{"./":{"url":"./","title":"Introduction","keywords":"","body":"MDX for Kylin Overview MDX for Kylin is an analytical data engine. MDX for Kylin offers data governance capabilities, including efficient dataset development, security management. MDX for Kylin has the following key strengths: Unified semantic layer Granular Data Access Control A Business-driven Semantic Layer and MDX interface MDX for Kylin automatically synchronizes models from Kylin and builds business semantics upon them. This transforms the technical concepts into business languages, unifying business definitions and meeting the demands of complex analytic scenarios (e.g. YTD, YOY, MOM). MDX for Kylin also offers an MDX interface, so users can connect directly to popular BI tools like Excel, Tableau, and more. Granular Data Access Control MDX for Kylin provides access control for all semantic information in the dataset to meet the needs of analytics platforms for data security management. Powered by Gitbook.            Last Modified： 2022-03-25 17:57:19 "},"installation/":{"url":"installation/","title":"Installation","keywords":"","body":"Installation In this chapter, we will introduce you the prerequisite of installing MDX for Kylin, the installation steps, and the uninstallation steps. Powered by Gitbook.            Last Modified： 2022-03-20 16:11:43 "},"installation/prerequisite.en.html":{"url":"installation/prerequisite.en.html","title":"Installation Prerequisites","keywords":"","body":"Installation Prerequisites To ensure the performance and robustness of the system, we recommend you to run MDX for Kylin in a single Linux server. The installation prerequisites of MDX for Kylin are listed below. Kylin Recommended Hardware Configuration Recommended Linux Version Required dependencies Recommended Database Version Recommended MySQL JDBC Version Recommended browser and driver version Recommended Client Configuration Kylin MDX for Kylin requires a Kylin instance or cluster. MDX for Kylin can connect with Kylin 4.0.2 and upon. If user want to use the MDX for Kylin before Kylin 4.x, please check the reference Recommended Hardware Configuration We recommend you to install MDX for Kylin in the following hardware configuration: Dual Intel Xeon Processor, 6 core (or 8 core) CPU - 2.3GHz or above 32GB ECC DDR3 or above At least one 1TB SAS HDD (3.5 inches), 7200RPM, RAID1 At least two 1GbE Ethernet ports Recommended Linux Version We recommend you to install MDX for Kylin in the following Linux operation systems: Red Hat Enterprise 7.x CentOS 6.4+ / CentOS 7.x Suse Linux 11 Ubuntu 16 Required dependencies Java Environment: JDK8 or above Recommended Database Version MySQL 5.7.x Recommended MySQL JDBC Version mysql-connector-java-8.0.16, please download to and if necessary, you can change version in /semantic-mdx/lib/ Recommended browser and driver version The chart screenshot export feature needs you to install a browser and its compatible driver, the browser should run correctly under the headless mode. We recommend you to use one of the following browsers versions, download its compatible driver and put the driver executable file in your PATH. Firefox version 57 or above CentOS 6, CentOS 7: sudo yum install firefox Ubuntu 16: sudo apt install firefox Firefox uses geckodriver, you can download it from GitHub, the version compatibility between geckodriver and Firefox can be found at Mozilla You can try executing firefox --headless to check whether Firefox runs correctly, if you get a dbus connection error, you should start a dbus-daemon first: CentOS: sudo yum install dbus-x11, Ubuntu: sudo apt install dbus-x11 (install dbus-x11) sudo dbus-uuidgen --ensure (generate machine-id) export $(dbus-launch) (run a dbus-daemon and set its environment variables) Chrome or Chromium version 67 or above CentOS 6: unsupported CentOS 7: sudo yum install chromium (need epel repository) Ubuntu 16: sudo apt install chromium-browser Chrome/Chromium uses chromedriver, you can download it from Google or Mirror, the version compatibility between chromedriver and Chrome/Chromium can be found at Google Recommended Client Configuration CPU: 2.5 GHz Intel Core i7 Operating System: macOS / windows 7 / windows 10 RAM: 8G or above Browser version: Chrome 67.0.3396 or above Powered by Gitbook.            Last Modified： 2022-03-25 16:25:24 "},"installation/install_linux.en.html":{"url":"installation/install_linux.en.html","title":"Install on Linux","keywords":"","body":"Install on Linux In this section, we will guide you to install MDX for Kylin in the Linux operating system quickly. Please make sure that your server meets the Installation Prerequisites of MDX for Kylin. Download Package Create Metastore Database Unpack Package Encrypt the Password of Mysql Server Modify Necessary Configurations Start MDX for Kylin Notice Download Package Download MDX for Kylin software package from webpage MDX for Kylin Download. Upload the installation package to the server and copy it to the /opt or /usr/local directory. Create Metastore Database Create a new database and set character_set_database to utf8mb4 or utf8, and set collation_server to utf8mb4_unicode_ci or utf8_unicode_ci Note: The sample creation database command in MySQL 5.7 is as follows: mysql> create database `` default character set utf8mb4 collate utf8mb4_unicode_ci; The sample creation database command in PostgreSQL 10.1 is as follows: postgresql> create database encoding='utf8'; Unpack Package Unpack the software package: $ tar -xf [package_name.tar.gz] e.g.: $ tar -xf mdx-for-kylin-1.0.0-beta.tar.gz Encrypt the Password of Mysql Server Open the unzipped file; encrypt the password of Mysql server. $ cd [Unzipped file] $ bin/mdx.sh encrypt '' Note: If there are some special characters in the input passwords, these characters should be in single quotes. If they self are single quotes, they should be in double quotes. Modify Necessary Configurations Modify necessary configurations in the properties file under conf directory. Configure insight.properties $ vim conf/insight.properties Modify the configurations listed below: insight.kylin.host: IP address or Hostname of the kylin server insight.kylin.port: port number of the kylin server insight.kylin.ssl: whether the kylin server enables SSL. The default value is false. insight.database.type: The type of MDX for Kylin database that needs to be connected. The default is mysql. if choose PostgreSQL as metadata, change type from mysql to postgresql. insight.database.useSSL:Whether use SSL to connect mysql.The default is false. insight.database.ip: IP address or Hostname of the Database server of the MDX for Kylin server insight.database.port: database port of the Database server of the MDX for Kylin server insight.database.name: database name of the Database server of the MDX for Kylin server insight.database.username: username of the Database server of the MDX for Kylin server insight.database.password: password’s encryption string for the Database server from step 4 insight.semantic.datasource-version: version of kylin, only support 4 insight.mdx.cluster.nodes: need to add the ip and port information of all MDX nodes in the cluster to the configuration file, for example: insight.mdx.cluster.nodes=ip1:port1,ip2:port2 Note: If insight.mdx.cluster.nodes is not set, the diagnostic package cannot be generated in the UI. For more configuration details, please refer to Basic Configurations. If you have cluster deployment requirements, please also read the manual Diagnostic Package chapter Start MDX for Kylin Start MDX for Kylin. It will take a few minutes to refresh metadata. $ bin/mdx.sh start Note: At the first startup, the synchronization task will fail because you have not filled in the account information communicated with kylin. The details are shown in the figure below. At this time, you can log in to MDX for Kylin normally and fill in the account information. After filling in, the synchronization task will get back to normal. Then you could login through url http://{host}:{insight.semantic.port}/login/ Since MDX for Kylin needs to connect to kylin, the system will prompt you to fill in the username and password for connection when you log in to the system for the first time. Stop MDX for Kylin $ bin/mdx.sh stop Powered by Gitbook.            Last Modified： 2022-03-25 11:17:33 "},"installation/MDX_cluster_installation.en.html":{"url":"installation/MDX_cluster_installation.en.html","title":"MDX cluster installation","keywords":"","body":"MDX cluster installation MDX instances installation & configurations Nginx installation & configurations How to access MDX cluster Notes MDX instances installation & configurations After downloading the MDX package from the website, please follow the guidance Install on Linux in the user mannual to install and configure MDX instances. To ensure that diagnosis package generation can perform normally in cluster mode, IP and Port information of ALL MDX for Kylin instances are needed in the property file ${MDX_HOME}/conf/insight.properties in the form as insight.mdx.cluster.nodes=:,: for each MDX instance. Nginx installation & configurations For installation of Nginx, please refer to the documents on the website of Nginx. MDX utilizes customized header:x-Host and x-Port to route requests to specified nodes in order to generate diagnosis packages on web. Thus, route rules are required in the Nginx property file. For example, based on Nginx 1.13.7, for two MDX for Kylin nodes with IP and Port as : and :, following configuration is required: # can be customized name upstream { server :; server :; } server { listen ; server_name ; #charset utf-8;(Recommended Use) #Enable customized header underscores_in_headers on; location / { if ($http_x_host = '') { #Requests without customized headers can be sent to any node #Here, needs to be consistent with the name after \"upstream\" proxy_pass http://; break; } #For requests containing customized headers, forward them to the specified node proxy_pass http://$http_x_host:$http_x_port;break; } } How to access MDX cluster After finishing above Nginx configuration, you may access the MDX cluster by the URL http://:/login which is determined by the configuration server_name and listen for Nginx. For BI software such Excel, you may access the project named on the MDX cluster by the URL http://:/mdx/xmla/. Notes Values surrounded by {} or <> in content above should be replaced (including {} or <>) with actual value accordingly. Nginx configuration above is a typical one. The route rules should be adjusted according to actual needs. Nginx may have problem accessing js and css file when the versions of different MDX instances are not the same version. So please ensure that versions of all MDX for Kylin instances are the same. Please do not use localhost for the IP information in the property file as this may cause Nginx forward failure. For enviroments on cloud, make sure that all MDX instances are installed under the same virtual subnet. Powered by Gitbook.            Last Modified： 2022-03-25 11:16:25 "},"installation/uninstall.en.html":{"url":"installation/uninstall.en.html","title":"Uninstall","keywords":"","body":"Uninstall In this section, we will introduce steps to uninstall MDX for Kylin. Run the following command in all nodes of MDX for Kylin to stop MDX for Kylin instance: bin/mdx.sh stop Run the following command to delete the workspace in all nodes of MDX for Kylin: rm -rf For now, MDX for Kylin is uninstalled successfully. Powered by Gitbook.            Last Modified： 2022-03-20 16:12:49 "},"overview/":{"url":"overview/","title":"Overview","keywords":"","body":"Overview In the overview module, you can monitor the MDX for Kylin system and have a glance of the core metrics and system status of each project, including the users served by the project, the queries and the dataset usage, etc. In the upper right corner, you can change the time filtering (Last 7 days by default). The time filtering set here will affect all metrics in the current page. Query Statistics In the query statistics area, you can view the following information about the current project: MDX Queries: the total number of historical MDX queries; AVG. Queries per User: the average number of queries per user; MDX Failed Queries: the total number of historical MDX failed queries; AVG. Query Time: the average response time of queries; Active Users: the number of users who queried. You can click the button to jump to the query history module. Query Trend In the query trend area, you can view the following information about the current project: Queries: the trend of queries amount; Failed Queries: the trend of failed queries amount;; AVG. Query Time: the trend of the average response time of queries. Only five datasets are displayed in the chart by default. You can also specify other datasets by clicking the filter button in the upper right corner. Query Time In the query time area, the changing trend of queries of different response time is displayed. The query time is divided into different levels: 0~3 seconds, 3~10 seconds, 10~30 seconds, 30~60 seconds and > 60 seconds. Ranking In the ranking area, the most/least frequently used datasets are displayed according to the queries amount in descending order. The datasets that have not been queried are not displayed. Powered by Gitbook.            Last Modified： 2022-03-25 15:09:30 "},"dataset/":{"url":"dataset/","title":"Dataset","keywords":"","body":"Data Source In this chapter, we will introduce you how to create and edit dataset. Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"dataset/design_dataset/":{"url":"dataset/design_dataset/","title":"Dataset Design","keywords":"","body":"Design dataset Welcome to the Design Dataset Tutorial. This tutorial shows how to design a dataset. Abstract This tutorial includes the following: Fill in the basic information Define a relationship Define semantics View and edit dimension table View and edit dimensions View and edit measure Add, View and edit Hierarchy Add, view and edit named sets Add, view and edit calculated measures Define translation Define dimension usage Save YTD, QTD, MTD Instructions Powered by Gitbook.            Last Modified： 2022-03-20 16:40:59 "},"dataset/design_dataset/s1_basic_info.en.html":{"url":"dataset/design_dataset/s1_basic_info.en.html","title":"Fill in the basic information","keywords":"","body":"Basic Information This chapter introduces how to design a dataset, using sample data (learn_kylin) as an example. Open the Web UI and click on the dataset menu to open the dataset list. Click the Add button to add a new dataset. Here we create a new dataset named kylin_sales_dataset. Then you will be taken to the Dataset Design Wizard. At the top of the GUI, you can see the current step. Next Define a relationship Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"dataset/design_dataset/s2_relationship.en.html":{"url":"dataset/design_dataset/s2_relationship.en.html","title":"Define a relationship","keywords":"","body":"Define Relationships In step 2 you can define the relationships between Models, before that you need to add Models to the dataset based on your analysis needs. Note：You must add at least one model. After adding the first model, you can add new models and define the relationship between them. Note：There must be at least one pair of common dimension tables between models Next Define semantics Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"dataset/design_dataset/s3_semantic.en.html":{"url":"dataset/design_dataset/s3_semantic.en.html","title":"Define semantics","keywords":"","body":"Define Semantics After clicking Next, you could define semantics in this step. The left side of the page shows the dimensions and measures in each cube. On this page you can do the following: View and edit dimension table View and edit dimensions View and edit measure Add, View and Edit Hierarchy Add, view and edit named sets Add, view, and edit calculated measures Next View and edit dimension table Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"dataset/design_dataset/s3_1_dimension_table.en.html":{"url":"dataset/design_dataset/s3_1_dimension_table.en.html","title":"View and edit dimension table","keywords":"","body":"View and edit dimension tables Click Dimension Table Name to view the properties of the dimension table After clicking the Edit button, you could edit the type of the dimension table. Note：If you need to use YTD, QTD, WTD, MTD functions, you need to specify the date table as the time type. Next View and edit dimensions Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"dataset/design_dataset/s3_2_dimension.en.html":{"url":"dataset/design_dataset/s3_2_dimension.en.html","title":"View and edit dimensions","keywords":"","body":"View and edit dimensions Click Dimensions Name to view the Properties of the dimensions Introduct of Dimension Properties In MDX for Kylin system, there are many properties that determine how dimensions function. The following table lists and describes each of these properties. Note: To ensure the query performance, please add the dimension, which is served as dimension properties on the the following table, to the aggregation group in kylin models. Dimension Properties Description Key Column The column corresponding to this dimension which cannot be changed. Dimension Name The displaying name of the dimension. Data Type The data type of the dimension which cannot be changed. Type The property of the dimension. After set as the time property, the dimension can be used for time-related calculations. E.g., YTD, YOY, etc. Name Column Name Column identifies the column that is displayed to users while analyzing. This column is used to improve the usefulness and friendlines in the client applications.For example, set the Name Column of the dimension Datekey (20120101) as the dimension Date_name (Jan. 1 st, 2012). When analyzing the dimension Datekey in the report, the value shown in the report is Jan. 1 st, 2012.The value in the Name Column must only correspond to the value in a Key Column, otherwise, it will cause an MDX calculation error. Value Column After the Value Column is defined, MemberValue can be used in the expression of the calculated measure to return the specified column.For date-related dimensions, the Value Column can be set to a date type dimension and utilize the benefits for filtering purposes, e.g., Last Year, Last Week.To ensure the accuracy of query results, the value in Value Column must have a one-to-one or one-to-many mapping relationship with the value in Key Column. Properties After setting Properties with dimensions, you can refer to the property in MDX expression.The value in each property must have a one-to-one or one-to-many mapping relationship with the value in Key Column. Folder To determine which folder this dimension belongs to. If you need multiple levels of folders, please use \\ character to separate.For example, when user input folder1\\folder2 in this field for a dimension, then this dimension will be placed in folder2, and folder2 is nested in folder1. Visible After turning off visibility, all users cannot access to this dimension. This option will be synchronized to the access list. Default Member Use an expression to specify a single default member returned of this dimension. Please notice this feature is still in the BETA phase. Edit Dimension After clicking the Edit button, you could edit the type of the dimension and the name of the dimension, and define visibility restrictions. Note: Key Column, Name Column and Value Column used in the dimension only support String, Int, Long, Double, Timestamp, Date, Boolean types You can edit attribute here. Note：If you need to use the YTD, QTD, WTD and MTD functions, you need to change the type of dimensions to the year, quarter, month and day. You can edit Name Column here. Note: When the Name Column is none, the expressions related to the Name Column will be processed according to the contents of the Key Column; You can edit Value Column here. Note: When Value Column is none, the expressions related to Value Column will be processed according to the contents of Name Column; You can edit Properties here. You can set the folder to which the dimension belongs here. If you need multi-level folders, please use \\ to separate them. Note: Multi-level folders only take effect in Excel. Secondly, you can also set the Default Member of the Dimension Note: This function is currently in the BETA stage, and now Default Member can be only set as a member of this dimension, such as [Dates].[Year].&[2019] Default member behavior description When default member is set for a dimension in the hierarchy, the default value will not be default member when the hierarchy is placed in the filter box or slicer. In addition, when the hierarchy is put on rows or columns, the default member will be filtered. When no default member dimension is checked, the display of other dimensions will be filtered by default member. Known Limitations: After placing the dimension with Default Member in the filter of the pivot table, the filter status on the filter interface is single-select Default Member, but the list below shows Select All. If the set Default Member does not exist, you can still save the data set normally, and eventually the Default Member will not take affect in Excel. At the same time, you can set whether the dimension is visible in the client application. Next View and edit measure Powered by Gitbook.            Last Modified： 2022-03-25 15:10:55 "},"dataset/design_dataset/s3_3_measure.en.html":{"url":"dataset/design_dataset/s3_3_measure.en.html","title":"View and edit measures","keywords":"","body":"View and edit measures Click Measures Name to view the properties of the measures After clicking the Edit button, you could edit the name and format setting of the measure, and define visibility restrictions. Note: MDX now only supports the SUM, MIN, MAX, COUNT, COUNT_DISTINCT measures in Kylin. Only the return types of measures in Kylin are String, Int, Long, Double. The measure format is to improve the readability of the measure value. You can specify the required format for any measure. The system supports the selection and configuration of predefined formats, such as: number, currency, percentage, and also supports the usage of format characters to configure custom formats. View Predefined measure formats and measure format characters. You can set the measure format here: [Open format setting page] [Predefined measure formats - Number] [Customize] You can set the folder to which the measure belongs here. If you need multi-level folders, please use \\ to separate them. Note: Multi-level folders only take effect in Excel. At the same time, you can set whether the measure is visible in the client application. Next Add, View and edit Hierarchy Powered by Gitbook.            Last Modified： 2022-03-25 15:12:15 "},"dataset/design_dataset/s3_4_hierarchy.en.html":{"url":"dataset/design_dataset/s3_4_hierarchy.en.html","title":"Add, View and edit Hierarchy","keywords":"","body":"hierarchy You could add hierarchies in MDX for Kylin. A hierarchical structure is a collection of levels based on dimensions, which can be used to improve the analytical capabilities of data analysts. For example, you can create a time hierarchy that contains Year, Quarter, Month, Week, and Day levels. In this way, analysts can analyze the sales by year in the client, and when necessary, they can respectively expand \"Year > Quarter > Month > Week > Day\" for more granular analysis. Add, view, and edit hierarchy Click the + Hierarchy button to add hierarchy. Note： Hierarchy cannot be created across dimension tables When adding dimensions to the hierarchy, please choose from the coarse to the granular dimension Click Hierarchy Name to view the properties of the hierarchy After clicking the Edit button, you could edit the properties of the hierarchy. Set Weight According to different business analysis requirements, users may need to set up customized roll-ups in the hierarchy, that is, customize the way of rolling up member values. In the hierarchy, you can set weight fields for different levels in a hierarchy. Whenever the value of the parent member is calculated, the weight field is multiplied by the child member. The weight field generally contains values from -1 to 1, such as -1, -0.25, 0, 0.25, 0.5, 0.75, 1, etc. A positive value means adding the value to the parent level, a negative value means subtracting the corresponding value, and 0 values make no change to the parent level. Users can use customized roll-ups for almost all hierarchical structures. For example, we have created a model with the transaction data of a pharmacy as follows: Fact table F_TRANS TRANS_ID PRODUCT_NAME PRICE 001 polyenes 33 002 5-HTP 84 003 Evening Primrose Oil 53 ... ... ... The dimension table D_MEDICINE contains the following dimensions: CATEGORY: the category of medicine SUB_CATEGORY: the sub-category of medicine SUB2_CATEGORY: the sub-sub-category of medicine PRODUCT_NAME: medicine name And the corresponding weight columns of the above dimensions Configuration required: Set the configuration insight.kylin.only.normal.dim.enable to false. Step 1: Create a new MDX dataset and create a hierarchy in the dimension table as follows. Step 2: When editing the hierarchy, click the button Set Weught to open the pop-up window for weight setting. The content of the pop-up window is as follows, and the user can set the weight column for each level. After setting, click OK to submit. Step 3: After saving the changes of this dataset, connect to Excel for analysis. Place the hierarchical structure and measure SUM(PRICE) in the pivot table, and expand the hierarchy, you can see the roll-up calculation result for each level customized by the value of the weight field. Known limitations Only supports customized roll-up calculations for SUM measures. If you need to filter the hierarchy for customized roll-up calculations, you should filter it on the row label or column label. If you put the hierarchy into the filter panel, the result might be inaccurate. It's not recommended to set the weight field on the hierarchy defined on the time-type dimension table. If in the model, the dimension table where the weighted field is located is joined to the fact table on multiple primary keys with a many-to-many relationship, the analysis result might be inaccurate. If there are multiple hierarchies in the same dimension table, and the same weight field is referenced. When multiple hierarchies are added to the report, the query results may be inaccurate. Next Add, View and Edit Named Sets Powered by Gitbook.            Last Modified： 2022-03-22 15:54:55 "},"dataset/design_dataset/s3_5_namedset.en.html":{"url":"dataset/design_dataset/s3_5_namedset.en.html","title":"Add, view and edit named sets","keywords":"","body":"Add, View and Edit Named Sets Introduction It is a common demand of MDX for Kylin to reuse a set of Members. This demand can be satisfied by Named Sets. A Named Set is a set of Members, called Member Set, which is evaluated according to a specified expression. Named Sets can be directly put on axes, and can also be referenced in the expressions of Calculated Measures and other Named Sets. Remarks Currently, supported BI tools of the Named Set feature are Excel and Tableau. Now the Named Set feature supports Member Sets only, which are sets of Members. It does not support Tuple Sets, which are sets of Tuples (A Tuple consists of several Members that all belong to different Dimensions). All Members in a Named Set must belong to the same Hierarchy. Steps Click the + Named Set button to add a Named Set. Click the Named Set to view the detail properties. Click the Edit button to edit properties of the Named Set. The expression can be written in MDX; Location shows where the Named Set will be shown in the \"PivotTable Fields\" list of Excel; The \"Visible\" switch controls whether the Named Set is visible in BI tools. Examples Create a Named Set in a Dataset. The expression of this Named Set is like the \"Top 5 City\" Named Set in above steps. In Excel, put the new Named Set on the Rows axis, it shows like: In Tableau, put the new Named Set on the Rows axis, it shows like: Next Add, view, and edit calculated measures Powered by Gitbook.            Last Modified： 2022-03-22 16:11:31 "},"dataset/design_dataset/s3_6_calculated_measure.en.html":{"url":"dataset/design_dataset/s3_6_calculated_measure.en.html","title":"Add, view, and edit calculated measures","keywords":"","body":"Add, view and edit calculated measure Click the + Calculated Measure button to add calculated measures. Note： On this page you can set the format string. The drop-down box at the format string can be selected either by drop-down or manually. The expression at the expression needs to fill in the MDX query Click Calculated Measure Name to view the properties of the calculated measure After clicking the Edit button, you could edit the properties of the calculated measure. You can set the folder to which the calculated measure belongs here. If you need multi-level folders, please use \\ to separate them. Note: Multi-level folders only take effect in Excel. At the same time, you can set whether the calculated measure is visible in the client application. Next Define translation Powered by Gitbook.            Last Modified： 2022-03-25 15:13:56 "},"dataset/design_dataset/s3_6_s1_non_empty_behavior.en.html":{"url":"dataset/design_dataset/s3_6_s1_non_empty_behavior.en.html","title":"Non-empty behavior","keywords":"","body":"Non-empty behavior Non-empty behavior includes a set of base measure names which will be used to parse MDX queries. If the set is empty, MDX will perform the evaluation to evaluate the measure value. If there is any base measure name and all base measure values are empty on a cell, the calculated measure value of the cell will be treated as empty without further evaluation. Why set Non-empty behavior? Non-empty behavior is an optimization specified by the user. Using this function can improve the performance of NON EMPTY queries that include calculated measures. How to set Non-empty behavior? To set the Non-empty behavior for a calculated measure, you need to follow three steps: In the define semantics step, find the calculated measure which you want to set Non-empty behavior and click edit. In the calculated measure form, click the Non-empty behavior select box, then select one or more base measures which may have empty values. Click OK to save the calculated measure. You can see your selected base measures in the non-empty behavior field of the table. Finally, save the dataset. Notice In order to reach the best performance of cells evaluation, only one member should be designated as far as possible, and no more than five members are recommended. If the Kylin model has been changed, the base measures referenced by Non-empty behavior in the dataset may be deleted. In this case, the dataset status will be set to error, but Excel can still connect to the dataset. You can still use the calculated measure as normal, since the deleted base measure in non-empty behavior list will be treated as invalid. (The current version of MDX will not explicitly show an error tip on a calculated measure whose non-empty behavior list contains any deleted base measure. We will report an error in the future version.) Powered by Gitbook.            Last Modified： 2022-03-22 17:02:04 "},"dataset/design_dataset/s3_6_s2_template.en.html":{"url":"dataset/design_dataset/s3_6_s2_template.en.html","title":"Use template","keywords":"","body":"Use template Using template means we can use the template to generate a calculated measure expression quickly. This feature can help us to create calculated measures faster. MDX will generate the build-in and widely-used templates automatically, you can create your customize templates by yourself. Why use template Reduce the complexity of editing calculated measure: It helps the persion, who is not familiar with MDX query, defines the calculated measures. Reduce the possibility of writing error expression: Because MDX syntax is complex and the expression is hard to write, the user will make the mistake easily. Using correct templates will prevent the mistake happened. Improve the efficiency of editing calculated measure: You can use the pre-defined templates to create many widely-used calculated measures easily, which expression are similar. Preview the frequently used expressions: Template can be defined with description and translation by yourself. you can click the template list and preview the description when you are editing the calculated measures. How to use template Edit calculated measure and click Use Templates button. Open Calculated Measure Template dialog, select one template. Select all required parameters on Parameters tab. [Optional]Click Expression tab and check the result of template. Click OK and fill the result in Expression field. The build-in templates MDX has the build-in and widely-used templates, this is the list of templates. ├── Default Template │ │ ├── Mathematical Operations │ │ ├── Addition: Calculate the sum of two values. │ │ ├── Subtraction: Calculate the difference between two values. │ │ ├── Multiplication: Calculate the product of two values. │ │ ├── Division: Calculate the ratio of a value to another one. │ │ │ ├── Time Intelligence │ │ ├── Year-to-date Total: Calculate the total of the measure or calculated measure, │ │ │ starting from the beginning of the current year. │ │ ├── Month-to-date Total: Calculate the total of the measure or calculated measure, │ │ │ starting from the beginning of the current month. │ │ ├── Year-over-year Change: Calculate the year-over-year change of the measure or │ │ │ calculated measure. │ │ ├── Month-over-month Change: Calculate the month-over-month change of the measure │ │ │ or calculated measure. Add the custom templates MDX allow you to create the customize template by yourself. You should edit the indicators.json, which is located in MDX software package, to create templates. The path of the JSON file is the same as the insight.properties file's. The file defines the template JSON structure. You should add your new template JSON at the end of list JSON property, which is an array. Quick start with custom templates The picture is the demo custom template which is added into the indicators.json file. The template will be listed in dialog immediately. Click here to see the demo JSON Notice: `${0}` means Measure_A, `${1}` means Measure_B in the `template` field { \"name\": \"Your custom Addition\", \"template\": \"${0} + ${1}\", \"folder\": \"Mathematical Operations\", \"category\": \"calculateMeasure\", \"buildin\": false, \"description\": \"Calculate the sum of two values.\", \"params\": [ { \"name\": \"Measure_A\", \"accept\": [ \"measure\", \"calculateMeasure\" ], \"placeholder\": \"${Measure_A}\" }, { \"name\": \"Measure_B\", \"accept\": [ \"measure\", \"calculateMeasure\" ], \"placeholder\": \"${Measure_B}\" } ] } More details about custom template JSON When you add the templates, please split each template JSON by comma. The last template JSON doesn't need the comma at the end. { \"pageNum\": 0, \"pageSize\": 0, \"total\": 0, \"list\": [ ... // The other templates' JSON { \"name\": \"Month-over-month Change\", // The last templates' JSON \"template\": \"Template expression\", \"buildin\": true, \"params\": [...] }, // 1. Add the comma here { \"name\": \"New template name\", // 2. Add your new template JSON here \"template\": \"New template expression\", ... } // 3. Don't keep the comma after your new last template JSON ] } The calculated meausre template is based on template JSON. More details about template is below: Notice: [Translatable] means the field can be translated by translation in JSON. If the translation field is not defined, it will use the default value. { \"name\": \"The template's name [Translatable]\", \"template\": \"The template's expression: '\\n' means wrap text. '${N}' means the nth of params.\", \"folder\": \"The template's folder: Split by'\\\\' to create multilayer folder [Translatable]\", \"category\": \"calculateMeasure\", // Default by \"calculateMeasure\" \"buildin\": false, // \"buildin\" means that is buildin or not. \"description\": \"The template's description [Translatable]\", // Param list \"params\": [ { \"name\": \"The param's name\", \"accept\": [ // The param's accept type. \"column\", \"namedSet\", \"measure\", \"calculateMeasure\" \"hierarchy\", \"hierarchyLevel\" ], \"placeholder\": \"The param's placeholder\" } ], // The above fields are [required], the below fields are [optional]. // Translation list \"translation\": { // Chinese translation \"zh\": { \"name\": \"模板的名称\", \"folder\": \"模板所属文件夹\", \"description\": \"模板的描述\", \"params.0.name\": \"参数的名称\", \"params.0.placeholder\": \"参数在表达式中占位符\" }, // English translation \"en\": { \"name\": \"Template's name\", \"folder\": \"Template's folder\", \"description\": \"Template's description\", \"params.0.name\": \"Parameter's name\", \"params.0.placeholder\": \"Parameter's placeholder\" } } } For future For now, defining a template JSON is not easy and it requires you know about JSON knowledge. However, it is friendly for the future of MDX. Because of the JSON structure, MDX system can fit in with a diversity of situations, even if you would like to define translation in template dialog by yourself. Maybe it will have an Web UI to replace the configuration for template JSON in the future. Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"dataset/design_dataset/s3_6_s3_semi_additive_measure.en.html":{"url":"dataset/design_dataset/s3_6_s3_semi_additive_measure.en.html","title":"semi-additive measure","keywords":"","body":"semi-additive measure Semi-additive measures are very common in various data analysis scenarios, like account balance or inventory analysis. Take account balance as an example, you can analyze account balance based on the account transactions history, SUM() is used when aggregated by default, but for aggregating multiple records under the same account, we need to use last record value along the time dimension. Click the + Calculated Measure button to add calculated measures, you can add semi-additive additive measure. Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"dataset/design_dataset/s3_7_measure_group.en.html":{"url":"dataset/design_dataset/s3_7_measure_group.en.html","title":"View and edit measure group","keywords":"","body":"View and edit measure group In datasets, measures are grouped according to Cubes in Kylin, and measure groups are used to associate dimensions and measures with each other. Note: The Cube in Kylin forms a measure group in MDX For calculated measures is a separate measure group Support for moving calculated measures into different measure value groups You can edit the measure group name here. Powered by Gitbook.            Last Modified： 2022-03-25 11:17:20 "},"dataset/design_dataset/s3_8_batch_deletion.en.html":{"url":"dataset/design_dataset/s3_8_batch_deletion.en.html","title":"Batch deletion of named sets/hierarchies/calculated measures","keywords":"","body":"Batch deletion of named sets/hierarchies/calculated measures When a dataset change occurs, such as replacing a model with a new model with a different name, if the named set/calculation measure in the dataset uses the dimension/measure/calculation measure in the replaced model, it will cause the named set/calculation measure in the dataset to become invalid. Another example: Delete the dimension of the model in Kylin, and the hierarchy created by using that dimension will become invalid. In this case, the number of failed namesets/hierarchies/computational metrics may be very large, and batch deletion operations can be used to delete the invalid content. The following example deletes both the invalid named set and the calculated metrics - Models and datasets: The model InternetSales_clone_Test and the model ResellerSales_clone_Test to form the data set MyTestDataset. It contains the calculation metric cm1 which references the measure from InternetSales_clone_Test, the calculation metric cm2 which references the measure from ResellerSales_clone_Test, and the named set N1 which references the dimension/measure from InternetSales_clone_Test. Change operation: Replace the model InternetSales_clone_Test in the dataset with another model Calculate measure and named set invalidation: Calculate metric cm1 and named set N1 invalidation: Batch delete operation: Click on this process at the top, select the calculated measure and named set you want to delete in the window, and click OK Confirm again to delete Delete successful Save dataset Powered by Gitbook.            Last Modified： 2022-03-25 15:16:09 "},"dataset/design_dataset/s4_translate.en.html":{"url":"dataset/design_dataset/s4_translate.en.html","title":"Define translation","keywords":"","body":"Translations Introduction In MDX for Kylin, you can embed multiple translation of a caption to provide culture-specific strings based on the localed identifier (LCID). Analysis application clients (such as Excel, Tableau) can pass the Language Code Identifier (LCID) when connecting to MDX for Kylin to obtain the language setting, and display the names of the objects in the corresponding lanaugage. This feature helps international teams to consume the same dataset without the need to repeatedly defining the dataset for localization purposes. Note There are three language supported: Chinese, English(US), and English(UK). The objects that can be set are names of the dimension table, dimension, measure, calculated measure, and hierarchy. If a dimension is defined with a translation, then it will also be applied in the hierarchy containing the dimension. If the language in the analysis application client is not defined in the dataset translation, the dataset will use the default language. When using Excel, Excel will pass the LCID as language settings in Excel. For Tableau users, the language settings of the Windows system will be applied, so you can change the translations of the dataset displayed in Tableau by changing the language setting of the Windows system. When creating a new calculated measure, please reference the measure in the original name, instead of the translation in the MDX expression. How to set translation When editing a dataset, go to translation, click the globe icon to add a language. Choose a language in the new column and click confirm. In this new group of translation, the user can input the translation of table names, dimensions or measures. Examples Define two language settings for a dataset, including Chinese and English (US). Open in Excel with Chinese language settings, the Chinese translation will apply: Open in Excel with English language setting, the English translation will apply: Note: you can change language settings of Excel through Options - Language Next Define Dimension Usage Powered by Gitbook.            Last Modified： 2022-03-22 16:16:49 "},"dataset/design_dataset/s5_dimension_usage.en.html":{"url":"dataset/design_dataset/s5_dimension_usage.en.html","title":"Define dimension usage","keywords":"","body":"Define Dimension Usage This page will list all the dimension tables and models in this dataset. You can define relationships between dimension tables and measures within models. For other kinds of relationships, you can edit the relationship type by clicking the Edit button. There are 2 possible dimension usage options: Regular: The dimension table is directly linked to the model. Many to Many：Kylin can not support many-to-many currently. Next Save Powered by Gitbook.            Last Modified： 2022-03-25 15:20:11 "},"dataset/design_dataset/save.en.html":{"url":"dataset/design_dataset/save.en.html","title":"Save","keywords":"","body":"Save and Create Once you've done this, click Save to complete the design of the dataset, then you can view it in the dataset list. Next YTD, QTD, MTD Instructions Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"dataset/design_dataset/s8_xtd.en.html":{"url":"dataset/design_dataset/s8_xtd.en.html","title":"YTD, QTD, MTD Instructions","keywords":"","body":"YTD, QTD, MTD instructions Define a time dimension table type as time. Create a Hierarchy with the year, month, and day. Name this Hierarchy as Date-Hierarchy. Note: You should set the corresponding date attribute for each level. E.g., for year dimension, you should set it as the Year attribute. Create a CM with the following formula: YTD : SUM(YTD([DATE_DIM].[Date-Hierarchy].CurrentMember), [Measures].[XXX]) MTD : SUM(MTD([DATE_DIM].[Date-Hierarchy].CurrentMember), [Measures].[XXX]) Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"dataset/access_list.en.html":{"url":"dataset/access_list.en.html","title":"Configure Access List","keywords":"","body":"Configure Access List After created the dataset, users can configure the access control of it. Users can set the access lists for a User, Group or a Role at object-level. The object that user can set the access list are Dimension, Measure, Calculated Measure and Named Set. On the dataset list, click the access icon on the right side and enter the access control configuration page. Select one of the tab pages for the dimension, measure, calculated measure or named set and click the + Grant button. A pop-up window appears. Select the user or group or role for editing access list at the top of the pop-up window. Switch between the model and the table in the navigation bar on the left side of the pop-up window. On the right side, you can see the dimensions in the table or the measures / calculated measures / named set in the model. Click on the dimension, measure, or calculation of the Eye icon in the front. When there is a slash on the mark, the corresponding dimension / measure / calculated measure / named set will not be accessible by the user, group or role. Click on the Eye icon again so you can remove the restriction. Click the Submit button. The saved access list will appear in the table below. Users can click the Delete button on the right side of the table to remove the visibility limit or click the Edit button to edit the access list again. To learn more about Object-level Security, please check Object-level Security Powered by Gitbook.            Last Modified： 2022-03-25 15:21:30 "},"dataset/import_export.en.html":{"url":"dataset/import_export.en.html","title":"Datasets Import and Export","keywords":"","body":"Datasets import and export Export Dataset Import Dataset Export Dataset Export a single dataset Open the dataset page, in the action column of a single dataset, click the ellipsis - > Export to export the ZIP file corresponding to the dataset. Export multiple datasets Open the dataset page, click Export Dataset, check the datasets you want to export in the list (you can fuzzy search the dataset name first), and click Export to generate the ZIP file corresponding to the datasets. Import Dataset Open the dataset page, click Import data set, select the ZIP file of the dataset, and click Parse: When the analysis is successful, a window will pop up, select the Action type and whether to import permissions, click Import to complete the import. Explanation for Add New/Replace/Not Import Add New When there is no dataset with the same name as the source dataset in the target project, the default is Add New operation, and the default drop-down option for the Action column is Add New. Replace When there is a dataset with the same name as the source dataset in the target project, the default is an Replace operation, and the default drop-down option for the Action column is Replace. Not Import In any case, the user can choose Not Import. Information about the dataset when importing The system will display corresponding information on the right according to different operations. Add New Display the model name in the new dataset and the relationship between the models. Replace The source data set and the target data set are exactly the same The definitions of the two data sets are exactly the same: model name, correlation between models, named set, calculation measure, dimension table/dimension/measure under the model, translation (accurate to the translation content of each object in each translation language) and dimension usage are consistent. The source and target datasets are not exactly the same The system will display the added objects (such as: model, measure, calculation measure) of the source data set relative to the target data set, and will also display the deleted objects (such as: model, measure, calculation measure). In addition, when the translation or dimension usage is inconsistent, the system will make a text prompt, but will not list the detailed differences. Not Import Remarks Supports exporting/importing datasets across environments (e.g. from development to production) and across projects Support for importing JSON dataset files exported in older versions Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"dataset/rename_dataset.en.html":{"url":"dataset/rename_dataset.en.html","title":"Rename Dataset","keywords":"","body":"Rename Dataset Open the dataset page, in the Action column of the individual dataset, click the ellipsis - > Rename: Enter a new name that conforms to the naming rules, and click OK: Complete renaming: Powered by Gitbook.            Last Modified： 2022-03-22 17:17:04 "},"dataset/mdx_list.en.html":{"url":"dataset/mdx_list.en.html","title":"MDX Function List","keywords":"","body":"MDX Function List These are the functions implemented in the current MDX for Kylin release. Name Description&Usage () Brace operator constructs a Tuple. : ([ ,...]) ([Date].[Day].&[1917-02-09],[Product].[Color].&[Blue]) {} Brace operator constructs a Set. : {[ ,...]} : {[ ,...]} Example 1：{[Customer].[BirthDate].&[1917-02-09]}Example 2：{[Customer].[BirthDate].[BirthDate] .Members}Example 3：{([Customer].[BirthDate].&[1917-02-09],[Product].[Color].&[Blue])} * Multiplies two numbers. : * [Measures].[Count]*5 * Returns the cross product of two sets. : * : * : * : * Example 1：{[Customer].[BirthDate].[BirthDate] .Members} *{[Customer].[Education].[Education].Members}Example 2：{[Customer].[BirthDate].&[1917-02-19]}*{[Customer].[Education].[Education] .Members}Example 3：{[Customer].[BirthDate].[BirthDate] .Members} * {[Customer].[Education].&[Bachelors]}Example 4：{[Customer].[BirthDate].&[1917-02-19]}*{[Customer].[Education].&[Bachelors]} + Adds two numbers : + [Measures].[Count]+2 - Subtracts two numbers. : - [Measures].[Count]-2 - Returns the negative of a number. : - -[Measures].[Count] / Divides two numbers. : / Example 1：2/1Example 2：[Measures].[Count]/5 Returns whether an expression is less than another. : : Example 1：[Measures].[A] Example 2：'kylin' Returns whether an expression is less than or equal to another. : : Example 1：[Measures].[A] Example 2：'kylin' <> Returns whether two expressions are not equal. : <> : <> Example 1：[Measures].[A] <> 10000Example 2：'kylin' <> 'kylingence' = Returns whether two expressions are equal. : = : = Example 1：1 = 2Example 2：'kylin' = 'kylingence' > Returns whether an expression is greater than another. : > : > Example 1：1 > 2Example 2：'kylin' > 'kylingence' >= Returns whether an expression is greater than or equal to another. : >= : >= Example 1：1 > 2Example 2：'kylin' > 'kylingence' AND Returns the conjunction of two conditions. : AND ([Measures].[Count]>10000) AND (1=2) Abs Returns a value of the same type that is passed to it specifying the absolute value of a number. : Abs() Abs(200.1-300) Acos Returns the arccosine, or inverse cosine, of a number. The arccosine is the angle whose cosine is Arg1. The returned angle is given in radians in the range 0 (zero) to pi. : Acos() Acos(0.540302)+acos (-1.000000) Acosh Returns the inverse hyperbolic cosine of a number. Number must be greater than or equal to 1. The inverse hyperbolic cosine is the value whose hyperbolic cosine is Arg1, so Acosh(Cosh(number)) equals Arg1. : Acosh() Acosh(1)+Acosh(10) Aggregate Returns a calculated value using the appropriate aggregate function, based on the context of the query. : Aggregate() : Aggregate(, ) Example 1：Aggregate({[Date].[CalendarYear].&[2014],[Date].[CalendarYear].&[2013]})Example 2：Aggregate({[Date].[CalendarYear].&[2014],[Date].[CalendarYear].&[2013]},[Measures].[Count]) AllMembers Returns a set that contains all members ,including calculated members,of the specified object. : .AllMembers: .AllMembers: .AllMembers Example 1：[Date].[CalendarSemester].[CalendarSemester] .AllmembersExample 2：[Date].[Due Fiscal Date-Hierarchy].AllmembersExample 3：[Date].[Due Fiscal Date-Hierarchy].[FiscalYear].Allmembers Asc Returns an Integer representing the character code corresponding to the first letter in a string. : Asc() Asc(\"kylingence\") AscB See Asc. : AscB() AscB(\"kylingence\") AscW See Asc. : AscW() AscW(\"kylingence\") Ascendants Returns the set of the ascendants of a specified member. : Ascendants() Ascendants([Date].[Due Fiscal Date-Hierarchy].[FiscalYear].&[2013].&[1] Asin Returns the arcsine, or inverse sine, of a number. The arcsine is the angle whose sine is Arg1. The returned angle is given in radians in the range -pi/2 to pi/2. : Asin() Asin(-0.5) Asinh Returns the inverse hyperbolic sine of a number. The inverse hyperbolic sine is the value whose hyperbolic sine is Arg1, so Asinh(Sinh(number)) equals Arg1. : Asinh() Asinh(-5) Atan2 Returns the arctangent, or inverse tangent, of the specified x- and y-coordinates. The arctangent is the angle from the x-axis to a line containing the origin (0, 0) and a point with coordinates (x_num, y_num). The angle is given in radians between -pi and pi, excluding -pi : Atan2(, ) Atan2 (-7,7) Atanh Returns the inverse hyperbolic tangent of a number. Number must be between -1 and 1 (excluding -1 and 1). : Atanh() Atanh(0.76159416) Atn Returns a Double specifying the arctangent of a number. : Atn() Atn (90) Avg Returns the average value of a numeric expression evaluated over a set. : Avg() Avg(, ) Example 1：Avg({[Date].[CalendarQuarter].[CalendarQuarter].members})Example 2：Avg({[Date].[CalendarQuarter].[CalendarQuarter].members},[Measures].[Count]) BottomPercent The BottomPercent function calculates the sum of the specified numeric expression evaluated over a specified set. The function then returns the elements with the lowest values whose cumulative percentage of the total summed value is at least the specified percentage. This function returns the smallest subset of a set whose cumulative total is at least the specified percentage. : BottomPercent(, , ) BottomPercent({[Product].[Color].[Color].members},60,[Measures].[Count]) BottomSum Sorts a set and returns the bottom N elements whose cumulative total is at least a specified value. : BottomSum(, , )BottomSum({[Product].[Color].[Color].members},5220,[Measures].[Count]) CBool Returns an expression that has been converted to a Variant of subtype Boolean. : CBool() CBool(100) CDate Returns an expression that has been converted to a Variant of subtype Date. : CDate() CDate(\"2020-07-25 17:44:10\") CDbl Returns an expression that has been converted to a Variant of subtype Double. : CDbl() CDbl(234.456784) CInt Returns an expression that has been converted to a Variant of subtype Integer. : CInt() CInt(234.121231231) Cache Evaluates and returns its sole argument, applying statement-level.cachingCache(>)Cache([Measures].[Count]) Caption Returns the caption of an object. : .Caption: .Caption: .Caption: .Caption Example 1：[Customer].[EmailAddress].CaptionExample 2：[Date].[Due Calendar Date-Hierarchy].CaptionExample 3：[Date].[Due Calendar Date-Hierarchy].[CalendarYear].CaptionExample 4：[Product].[Class].&[M].caption Cast Converts values to another type. : Cast( AS ) Cast(1+2 AS STRING) Children Returns the children of a member. : .Children [Date].[Due Calendar Date-Hierarchy].[CalendarYear].&[2010].children Chr Returns a String containing the character associated with the specified character code. : Chr()chr(48) ChrB See Chr. : ChrB() ChrB(48) ChrW See Chr. : ChrW() ChrW(48) ClosingPeriod Returns the last descendant of a member at a level. : ClosingPeriod() : ClosingPeriod() : ClosingPeriod(, ) : ClosingPeriod() Example 1：[Customer].[person-Hierarchy].[Education].closingperiodExample 2：ClosingPeriod([Date].[Due Fiscal Date-Hierarchy].[FiscalYear])Example 3：ClosingPeriod([ Date].[Due Fiscal Date-Hierarchy].[FiscalYear] ,[Date].[Due Fiscal Date-Hierarchy].[FiscalYear].&[2010])Example 4：ClosingPeriod([Date].[Due Fiscal Date-Hierarchy].[FiscalYear].&[2010]) CoalesceEmpty Coalesces an empty cell value to a different value. All of the expressions must be of the same type (number or string).CoalesceEmpty([,...]) CoalesceEmpty(88) Correlation Returns the correlation of two series evaluated over a set. : Correlation(, ) : Correlation(, , ) Example 1：Correlation({[Customer].[Education].&[Bachelors],[Customer].[Education].&[High School]},[Measures].[Count])Example 2：Correlation({[Customer].[Education].&[Bachelors],[Customer].[Education].&[High School]},[Measures].[SalesAmout],[Measures].[Count]) Cos Returns a Double specifying the cosine of an angle. : Cos() Cos(60*Pi()/180) Cosh Returns the hyperbolic cosine of a number. : Cosh() Cosh(4) Count Returns the number of tuples in a set, empty cells included unless the optional EXCLUDEEMPTY flag is used. : Count() : Count(, ) Example 1：Count({[Product].[Color].[Color].members})Example 2：Count({[Product].[Color].[Color].members},EXCLUDEEMPTY) Count Returns the number of tuples in a set including empty cells. : .Count [Product].[Class].[Class].members.Count Covariance Returns the covariance of two series evaluated over a set (biased). : Covariance(, ) : Covariance(, , ) Example 1：Covariance([Product].[Class].[Class].Members, [Measures].[Product Standard Cost])Example 2：Covariance([Product].[Class].[Class].Members, [Measures].[Product Standard Cost], [Measures].[Freight]) CovarianceN Returns the covariance of two series evaluated over a set (unbiased). : CovarianceN(, ) : CovarianceN(, , ) Example 1：Covariancen([Product].[Class].[Class].Members, [Measures].[Product Standard Cost]) Example 2：Covariancen([Product].[Class].[Class].Members, [Measures].[Product Standard Cost], [Measures].[Freight]) Crossjoin Returns the cross product of two sets. : Crossjoin(, ) Crossjoin([Product].[Color].[Color].members,[Product].[Size].[Size].members) CurrentDateMember Returns the exact member within the specified dimension corresponding to the current date, in the format specified by the format parameter. If there is no such date, returns the NULL member. Format strings are the same as used by the MDX Format function, namely the Visual Basic format strings. : CurrentDateMember(, )CurrentDateMember([Date].[Calendar-Hierarchy],'yyyymmdd') CurrentDateMember Returns the closest or exact member within the specified dimension corresponding to the current date, in the format specified by the format parameter. Format strings are the same as used by the MDX Format function, namely the Visual Basic format strings. : CurrentDateMember(, , )CurrentDateMember([Date].[Order Fiscal Date-Hierarchy],\"20050402\",BEFORE) CurrentDateString Returns the current date formatted as specified by the format parameter. : CurrentDateString() CurrentDateString('yyyymmdd') CurrentMember Returns the current member along a dimension during an iteration. : .CurrentMember [Product].[Class].CurrentMember CurrentMember Returns the current member along a hierarchy during an iteration. : .CurrentMember [Date].[Order Fiscal Date-Hierarchy].CurrentMember DDB Returns a Double specifying the depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify. : DDB(, , , , )Parameter1:The initial cost of the asset.Parameter2:The value at the end of the depreciation. This value can be 0.Parameter3:The number of periods over which the asset is being depreciated Parameter4:The period for which you want to calculate the depreciation. Period must use the same units as life.Parameter5:The rate at which the balance declines. If factor is omitted, it is assumed to be 2 (the double-declining balance method). Example 1：DDB(24000,3000,10,2)Example 2：DDB(24000,3000,10,2,1.5) DataMember Returns the system-generated data member that is associated with a nonleaf member of a dimension. : .DataMember [Customer].[CustomerKey].&[11001].DataMember Date Returns a Variant (Date) containing the current system date. : Date() Date() DateAdd Returns a Variant (Date) containing a date to which a specified time interval has been added. : DateAdd(, , ) Example 1：DateAdd(\"h\",1,date())Example 2：DateAdd(\"h\",1,[DUEDATE].[DateKey].&[2011-11-23]) DateDiff Returns a Variant (Long) specifying the number of time intervals between two specified dates. : DateDiff(, , , , )String Type：yyyy,q,m,y,d,ww,w,hh,n,s,ms,mcs,nsParameter4:A constant that specifies the first day of the week. If not specified, Sunday is assumed.Parameter5:A constant that specifies the first week of the year. If not specified, the first week is assumed to be the week in which January 1 occurs. Example 1：DateDiff(\"yyyy\",Date(),Date())Example 2：DateDiff(\"yyyy\",[Date].[DateKey].&[2011-11-23],[Date].[DateKey].&[2012-11-24])Example 3：DateDiff(\"yyyy\",Date(),Date(),1)Example 4：DateDiff(\"yyyy\",Date(),Date(),1,1) DatePart Returns a Variant (Integer) containing the specified part of a given date. : DatePart(, , , )Parameter3:A constant that specifies the first day of the week. If not specified, Sunday is assumed.Parameter4:A constant that specifies the first week of the year. If not specified, the first week is assumed to be the week in which January 1 occurs. Example 1：DatePart(\"yyyy\",[Date].[DateKey].&[2011-11-23])Example 2：DatePart(\"yyyy\",[Date].[DateKey].&[2011-11-23],1)Example 3：DatePart(\"yyyy\",[Date].[DateKey].&[2011-11-23],1,1) DateSerial Returns a Variant (Date) for a specified year, month, and day. : DateSerial(, , ) DateSerial(2020,3,5) DateValue Returns a Variant (Date). : DateValue() DateValue(CDate('2020-08-27')) Day Returns a Variant (Integer) specifying a whole number between 1 and 31, inclusive, representing the day of the month. : Day() Day(CDate('2010-09-23')) DefaultMember Returns the default member of an object. : .DefaultMember: .DefaultMember Example 1：[Product].[Class].DefaultMemberExample 2：[Date].[Order Fiscal Date-Hierarchy].DefaultMember Degrees Converts radians to degrees. : Degrees() Degrees(0.5*Pi()) Descendants Returns the set of descendants of a member at a specified level,optionally including or excluding descendants in other levels. : Descendants() : Descendants(, ) : Descendants(, ,) : Descendants(, ) : Descendants(, , ) : Descendants(, , ) Example 1：Descendants([Date].[Due Calendar Date-Hierarchy].[CalendarYear].&[2010])Example 2：Descendants([Date].[Due Calendar Date-Hierarchy].[CalendarYear].&[2010], [Date].[Due Calendar Date-Hierarchy].[DateKey])Example 3：Descendants([Date].[Due Calendar Date-Hierarchy].[CalendarYear].&[2010],[Date].[Due Calendar Date-Hierarchy].[CalendarYear],SELF) Dimension Returns the dimension that contains a specified object. : .Dimension: .Dimension: .Dimension: .Dimension Example 1：[Date].[CalendarYear].[CalendarYear].DimensionExample 2：[Date].[Due Calendar Date-Hierarchy].DimensionExample 3：[Date].[Due Fiscal Date-Hierarchy].[FiscalYear].DimensionExample 4：[Date].[CalendarYear].&[2010].Dimension Dimensions Returns the dimension whose zero-based position within the cube is specified by a numeric expression. : Dimensions() Dimensions(2) Dimensions Returns the dimension whose name is specified by a string. : Dimensions() Dimensions('[Customer].[AddressLine]') Distinct Eliminates duplicate tuples from a set. : Distinct() Distinct({[Date].[FiscalYear].&[2005],[Date].[FiscalYear].&[2005],[Date].[FiscalYear].&[2006]}) DrilldownLevel Drills down the members of a set, at a specified level, to one level below. Alternatively, drills down on a specified dimension in the set.According to the multi-level hierarchical data structure,you can explicitly choose a level at which to drill down. There are two mutually exclusive ways to specify the level. The first approach is to set the level_expression argument using an MDX expression that returns the level, An alternative approach is to specify the index argument, using a numeric expression that specifies the level by number. : DrilldownLevel() : DrilldownLevel(, ) : DrilldownLevel(, , ): DrilldownLevel(): DrilldownLevel(, ): DrilldownLevel(, , )Expression2:Set Level_expressionExpression3:Set Index Example 1：DrillDownLevel([Date].[Due Calendar Date-Hierarchy].[CalendarQuarter].Members)Example 2：DrilldownLevel([Date].[Due Calendar Date-Hierarchy].[CalendarQuarter].Members,[Date].[Due Calendar Date-Hierarchy].[EnglishMonthName])Example 3：DrilldownLevel([Date].[Due Calendar Date-Hierarchy].[CalendarYear].Members,,1) DrilldownMember Drills down the members in a set that are present in a second specified set.If RECURSIVE is specified, the function continues to recursively compare the members of the result set against the second set, retrieving the children for each member in the result set that is also present in the second set until no more members from the result set can be found in the second set. : DrilldownMember(, ) DrilldownMember(, , )Symbol Type：RECURSIVE Example 1：DrillDownMember([Date].[Due Fiscal Date-Hierarchy].Members,[Date].[Due Calendar Date-Hierarchy].Members)Example 2：DrilldownMember([Date].[Due Fiscal Date-Hierarchy].Members,[Date].[Due Calendar Date-Hierarchy].Members,RECURSIVE) Except Finds the difference between two sets, optionally retaining duplicates.If ALL is specified, the function retains duplicates found in the first set; duplicates found in the second set will still be removed. The members are returned in the order they appear in the first set. : Except(, ) : Except(, , )Symbol Type：ALL Except({[Date].[CalendarYear].&[2005],[Date].[CalendarYear].&[2006]},{[Date].[CalendarYear].&[2005]}) Exclude Restrict the level of detail of a measure,For example, the expression is Exclude( [Product], [Measures].[Qty] ), which means that the calculation of [Measures].[Qty] will not be affected by the filter conditions of the dimensions in the dimension table [Product]. : Exclude( [ | , ...] )Exclude([Date].[DueFiscalDate-Hierarchy],[Measures].[Count]) Exists Returns the the set of tuples of the first set that exist with one or more tuples of the second set. : Exists(, ) Exists({[Customer].[Education].&[Bachelors]},{[Customer].[Education].&[Bachelors],[Customer].[Education].&[High School]}) Exp Returns a Double specifying e (the base of natural logarithms) raised to a power. Exp() [Measures].[Count]*exp(1) Extract Returns a set of tuples from extracted dimension elements. The opposite of Crossjoin. : Extract(, [, ...]) Extract( [Customer].[Education].[Education].Members * {[Date].[CalendarYear].&[2011],[Date].[CalendarYear].&[2013]}, [Customer].[Education] ) FV Returns a Double specifying the future value of an annuity based on periodic, fixed payments and a fixed interest rate. : FV(, , , , )Parameter1:The interest rate per period.Parameter2:The total number of payment periods in an annuity.Parameter3:The payment made each period; it cannot change over the life of the annuity. Typically, pmt contains principal and interest but no other fees or taxes. If pmt is omitted, you must include the pv argument. Example 1：FV(0.12,4,10000)Example 2：FV(0.01,48,1000,1)Example 3：FV(0.01,48,1000,1,1) Filter Returns the set resulting from filtering a set based on a search condition. : Filter(,) Filter([Customer].[CustomerKey].[CustomerKey].Members,[Measures].[Count]>6) FirstChild Returns the first child of a member. : .FirstChild [Date].[Due Calendar Date-Hierarchy].[CalendarYear].&[2013].FirstChild FirstQ Returns the 1st quartile value of a numeric expression evaluated over a set. : FirstQ() : FirstQ(, ) FirstQ([Date].[CalendarYear].[CalendarYear].Members,[Measures].[SalesAmout]) FirstSibling Returns the first child of the parent of a member. : .FirstSibling [Date].[CalendarYear].&[2009].FirstSibling Fix Returns the integer portion of a number. If negative, returns the negative number greater than or equal to the number. : Fix() [Measures].[Count]*fix(1.3) Fixed Restrict the level of detail of a measure,For example, the expression is Fixed( [Product], [Measures].[Qty] ), which means that the calculation of [Measures].[Qty] will not be affected by the filter conditions of the dimensions in the dimension table [Product]. : Fixed( [ | , ...] ) Fixed([Product].[Class].[Class],[Measures].[Count]) Format Formats a number or date to a string. : Format(, ) : Format(, ) : Format(, ) format([Measures].[ Count],\"#,##0.00\") FormatCurrency Returns an expression formatted as a currency value using the currency symbol defined in the system control panel. : FormatCurrency(, , , , )Parameter1:Expression to be formatted.Parameter2:Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1Parameter3:Tristate constant that indicates whether or not a leading zero is displayed for fractional values. See Settings section for values.Parameter4:Tristate constant that indicates whether or not to place negative values within parentheses. See Settings section for values.Parameter5:Tristate constant that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See Settings section for values.-2 = TristateUseDefault - Use the setting from the computer's regional settings.-1 = TristateTrue - True0 = TristateFalse - False Example 1：FormatCurrency([Measures].[Unitprice])Example 2：FormatCurrency([Measures].[Unitprice],2)Example 3：FormatCurrency([Measures].[Unitprice],2,-1)Example 4：FormatCurrency([Measures].[Unitprice],2,-1,-2)Example 5：FormatCurrency([Measures].[Unitprice],2,-1,-2,-1) FormatDateTime Returns an expression formatted as a date or time. : FormatDateTime(, ) Example 1：FormatDateTime(Date())Example 2：FormatDateTime(Date(),2) FormatNumber Returns an expression formatted as a number. : FormatNumber(, , , , )Parameter1:Expression to be formatted.Parameter2:Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1Parameter3:Tristate constant that indicates whether or not a leading zero is displayed for fractional values. See Settings section for values.Parameter4:Tristate constant that indicates whether or not to place negative values within parentheses. See Settings section for values.Parameter5:Tristate constant that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See Settings section for values.-2 = TristateUseDefault - Use the setting from the computer's regional settings.-1 = TristateTrue - True0 = TristateFalse - False Example 1：FormatNumber([Measures].[Freight])Example 2：FormatNumber([Measures].[Freight],2)Example 3：FormatNumber([Measures].[Unitprice],2,-1)Example 4：FormatNumber([Measures].[Unitprice],2,-1,-2)Example 5：FormatNumber([Measures].[Unitprice],2,-1,-2,-1) FormatPercent Returns an expression formatted as a percentage (multipled by 100) with a trailing % character. : FormatPercent(, , , , )Parameter1:Expression to be formatted.Parameter2:Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1Parameter3:Tristate constant that indicates whether or not a leading zero is displayed for fractional values. See Settings section for values.Parameter4:Tristate constant that indicates whether or not to place negative values within parentheses. See Settings section for values.Parameter5:Tristate constant that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See Settings section for values.-2 = TristateUseDefault - Use the setting from the computer's regional settings.-1 = TristateTrue - True0 = TristateFalse - False Example 1：FormatPercent([Measures].[Count]/60398)Example 2：FormatPercent([Measures].[Count]/60398,2)Example 3：FormatPercent([Measures].[Count]/61000,2,-1)Example 4：FormatPercent([Measures].[Count]/61000,2,-1,-2)Example 5：FormatPercent([Measures].[Count]/61000,2,-1,-2,-1) Generate Applies a set to each member of another set and joins the resulting sets by union.If ALL is specified, the function retains duplicates in the resulting set. : Generate(, ): Generate(, , )Symbol Type：ALL Generate( [Date].[CalendarYear].[CalendarYear].Members , TopCount( [Date].[CalendarYear].CurrentMember * [Product].[ProductLine].[ProductLine].Members ,3, [Measures].[SalesAmout)) Generate Applies a set to a string expression and joins resulting sets by string concatenation. : Generate(, ): Generate(, , ) Example 1：Generate([Date].[CalendarYear].[CalendarYear].Members,\"AND\") Example 2：Generate( [Date].[CalendarYear].[CalendarYear].Members, [Date].[CalendarYear].CurrentMember.Name,\"AND\") Head Returns the first specified number of elements in a set. : Head(): Head(, ) Example 1：Head([Customer].[CustomerKey].[CustomerKey].Members)Example 2：Head([Customer].[CustomerKey].[CustomerKey].Members,3) Hex Returns a String representing the hexadecimal value of a number. : Hex() Hex([Measures].[Count]) Hierarchize Orders the members of a set in a hierarchy.If POST is specified, the Hierarchize function sorts the members in a level using a post-natural order. In other words, child members precede their parents. : Hierarchize(): Hierarchize(, )Symbol Type：POST Hierarchize({[Customer].[Education].&[High School],[Customer].[Education].&[Bachelors]}) Hierarchy Returns an object's hierarchy. : .Hierarchy: .Hierarchy Example 1：[Date].[Due Fiscal Date-Hierarchy].[FiscalYear].HierarchyExample 2：[Date].[Due Fiscal Date-Hierarchy].[FiscalYear].&[2010].Hierarchy Hour Returns a Variant (Integer) specifying a whole number between 0 and 23, inclusive, representing the hour of the day. : Hour()Hour(Cdate('2020-08-12 09:30:45')) IIf Returns one of two objects determined by a logical test. : IIf(, , ): IIf(, , ): IIf(, , ): IIf(, , ): IIf(, , : IIf(, , ): IIf(, , ): IIf(, , ): IIf(, , ) Example 1：IIF([Measures].[Count]>80000, ([Customer].[Education].&[Bachelors].[Date].[CalendarYear].&[2011]), ([Customer].[Education].&[High School].[Date].[CalendarYear].&[2011]))Example 2：IIF([Measures].[Count]>80000,[Customer].[CustomerKey],[Customer].[FirstName])Example 3：IIF([Measures].[Count]>80000,[Date].[Due Fiscal Date-Hierarchy],[Customer].[person-Hierarchy])Example 4：IIF([Measures].[Count]>80000, [Date].[Due Fiscal Date-Hierarchy].[FISCALYEAR], [Date].[Due Fiscal Date-Hierarchy].[DateKey])Example 5：IIF([Measures].[Count]>80000,[Measures].[SalesAmout]10000)Example 6：IIF([Measures].[Count]>80000, [Customer].[Education].[Bachelors], [Customer].[Education].&[High School])Example 7：IIF([Measures].[Count]>80000,[Measures].[Unitprice]/3,[Measures].[Unitprice]/4)Example 8：IIF([Measures].[Count]>80000, {[Customer].[Education].&[Bachelors]}, {[Customer].[Education].&[Bachelors],[Customer].[Education].&[High School]})Example 9：IIF([Measures].[SalesAmout]>10000, \"Sales Are High\", \"Sales Are Low\") IPmt Returns a Double specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate. : IPmt(, , , , , )Parameter1:The interest rate per period.Parameter2:The period for which you want to find the interest .Parameter3:The total number of payment periods in an annuity.Parameter4:The present value.Parameter5:The future value.If fv is omitted, it is assumed to be 0 (the future value of a loan, for example, is 0).Parameter6:The number 0 or 1 and indicates when payments are due. If type is omitted, it is assumed to be 0. Example 1：IPmt(0.12,1,3,80000)Example 2：IPmt(0.01,1,36,80000,50000)Example 3：IPmt(0.01,1,36,80000,50000,1) IS Returns whether two objects are the same : IS : IS : IS : IS : IS Example 1：[Customer].[Education].&[Bachelors] IS [Customer].[Education].&[Bachelors]Example 2：[Date].[Due Fiscal Date-Hierarchy].[FiscalYear] IS [Date].[Due Fiscal Date-Hierarchy].[DateKey]Example 3：[Date].[Due Fiscal Date-Hierarchy] IS [Date].[Due Calendar Date-Hierarchy]Example 4：[Customer].[BirthDate] IS [Customer].[BirthDate]Example 5：([Customer].[BirthDate],[Customer].[AddressLine]) IS ([Customer].[BirthDate],[Customer].[AddressLine]) IS EMPTY Determines if an expression evaluates to the empty cell value. :IS EMPTY : IS EMPTY Example 1：[Customer].[Education].&[Primary School] Is EmptyExample 2：([Customer].[AddressLine],[Date].[CalendarQuarter]) IS EMPTY IS NULL Returns whether an object is null. Currently always returns FALSE, returns TRUE only if the given Member Key cannot be cast to the type of Level Key. : IS NULL : IS NULL : IS NULL : IS NULL Example 1：[Customer].[Education].&[Primary School] IS NULLExample 2：[Date].[Due Calendar Date-Hierarchy].[CalendarYear] IS NULLExample 3：[Customer].[person-Hierarchy] IS NULLExample 4：[Customer].[Education].[Education] IS NULL InStr Returns the position of the first occurrence of one string within another. Implements very basic form of InStr : InStr(, )InStr(\"kylingence\",\"e\") InStrRev Returns the position of an occurrence of one string within another, from the end of string. : InStrRev(, , , )Parameter1:The string expression to be searched.Parameter2:The string expression that is to be searched for.Parameter3:A numeric expression that sets the starting position for each search. If this value is omitted, the search begins at the first character position. If start is null, the function return value is undefined.Parameter4:An integer value. This argument is always ignored. It is defined for compatibility with other Instr functions in other languages. Example 1：InStrRev(\"kylingence\",\"e\")Example 2：InStrRev(\"kylingence\",\"e\",2)Example 3：InStrRev(\"kylingence\",\"e\",2,1) Int Returns the integer portion of a number. If negative, returns the negative number less than or equal to the number. : Int() Int(1.3) Intersect Returns the intersection of two input sets, optionally retaining duplicates.The optional ALL flag keeps duplicates. The two specified sets must have the same dimensions : Intersect(, , ): Intersect(, )Symbol:ALL Example 1：Intersect({[Customer].[Education].&[Bachelors],[Customer].[Education].&[High School]}, {[Customer].[Education].&[Bachelors]},All)Example 2：Intersect({[Customer].[Education].&[Bachelors],[Customer].[Education].&[High School]}, {[Customer].[Education].&[Bachelors]}) IsDate Returns a Boolean value indicating whether an expression can be converted to a date. : IsDate() IsDate(Date()) IsEmpty Determines if an expression evaluates to the empty cell value. : IsEmpty(): IsEmpty() Example 1：IsEmpty(\"\")Example 2：IsEmpty(2) Item Returns a member from the tuple specified in . The member to be returned is specified by the zero-based position of the member in the set in . : .Item() ([Customer].[Education].&[Bachelors],[Date].[CalendarYear].&[2010]).Item(0) Item Returns a tuple from the set specified in . The tuple to be returned is specified by the zero-based position of the tuple in the set in . : .Item(){[Customer].[BirthDate].[BirthDate].Members}.Item(1) Item Returns a tuple from the set specified in . The tuple to be returned is specified by the member name (or names) in . .Item([, ...]) {[Customer].[Education].[Education].Members}.Item(\"Bachelors\") LCase Returns a String that has been converted to lowercase. : LCase() LCase(\"KYLINGENCE\") LTrim Returns a Variant (String) containing a copy of a specified string without leading spaces. : LTrim() LTrim(\" kylin gence \") Lag Returns a member further along the specified member's dimension. : .Lag() [Customer].[Education].[High School].Lag(1) LastChild Returns the last child of a member. : .LastChild [Date].[Due Calendar Date-Hierarchy].[CalendarYear].&[2013].LastChild LastSibling Returns the last child of the parent of a member. : .LastSibling [Date].[CalendarYear].&[2010].LastSibling Lead Returns a member further along the specified member's dimension. : .Lead() [Customer].[Education].&[High School].Lead(1) Left Returns a specified number of characters from the left side of a string. : Left(, ) Left(\"kylingence\",2) Len Returns the number of characters in a string. : Len()Len(\"kylingence\") Level Returns a member's level. : .Level [Date].[Due Fiscal Date-Hierarchy].[FiscalYear].&[2010].Level Levels Returns the level whose position in a hierarchy is specified by a numeric expression. : .Levels()[Date].[Due Fiscal Date-Hierarchy].levels(1) Levels Returns the level whose name is specified by a string expression. : .Levels(): Levels() Example 1：[Date].[Due Fiscal Date-Hierarchy].Levels(\"DateKey\")Example 2：Levels('[Customer].[person-Hierarchy].[Education]') LinRegIntercept Calculates the linear regression of a set and returns the value of b in the regression line y = ax + b. : LinRegIntercept(, ): LinRegIntercept(, , )Parameter1:A valid Multidimensional Expressions (MDX) expression that returns a set.Parameter2:A valid numeric expression that is typically a Multidimensional Expressions (MDX) expression of cell coordinates that return a number that represents values for the y-axis.Parameter3:A valid numeric expression that is typically a Multidimensional Expressions (MDX) expression of cell coordinates that return a number that represents values for the x-axis. LinRegIntercept(LastPeriods(3,[Date].[CalendarYear].&[2014]),[Measures].[InternetSales Count],[Measures].[Reseller Count]) LinRegPoint Calculates the linear regression of a set and returns the value of y in the regression line y = ax + b. : LinRegPoint(, , ): LinRegPoint(, , , )Parameter1:A valid numeric expression that is typically a Multidimensional Expressions (MDX) expression of cell coordinates that return a number that represents values for the slicer axis.Parameter2:A valid Multidimensional Expressions (MDX) expression that returns a set.Parameter3:A valid numeric expression that is typically a Multidimensional Expressions (MDX) expression of cell coordinates that return a number that represents values for the y-axis.Parameter4:A valid numeric expression that is typically a Multidimensional Expressions (MDX) expression of cell coordinates that return a number that represents values for the x-axis. LinRegPoint([Measures].[Count],LastPeriods(3,[Date].[CalendarYear].&[2014]),[Measures].[InternetSales Count],[Measures].[Reseller Count]) LinRegR2 Calculates the linear regression of a set and returns R2 (the coefficient of determination). : LinRegR2(, ): LinRegR2(, , )Parameter1:A valid Multidimensional Expressions (MDX) expression that returns a set.Parameter2:A valid numeric expression that is typically a Multidimensional Expressions (MDX) expression of cell coordinates that return a number that represents values for the y-axis.Parameter3:A valid numeric expression that is typically a Multidimensional Expressions (MDX) expression of cell coordinates that return a number that represents values for the x-axis. LinRegR2(LastPeriods(3,[Date].[CalendarYear].&[2014]),[Measures].[InternetSales Count],[Measures].[Reseller Count]) LinRegSlope Calculates the linear regression of a set and returns the value of a in the regression line y = ax + b. : LinRegSlope(, ): LinRegSlope(, , )Parameter1:A valid Multidimensional Expressions (MDX) expression that returns a set.Parameter2:A valid numeric expression that is typically a Multidimensional Expressions (MDX) expression of cell coordinates that return a number that represents values for the y-axis.Parameter3:A valid numeric expression that is typically a Multidimensional Expressions (MDX) expression of cell coordinates that return a number that represents values for the x-axis. LinRegSlope(LastPeriods(3,[Date].[CalendarYear].&[2014]),[Measures].[InternetSales Count],[Measures].[Reseller Count]) LinRegVariance Calculates the linear regression of a set and returns the variance associated with the regression line y = ax + b. : LinRegVariance(, ): LinRegVariance(, , )Parameter1:A valid Multidimensional Expressions (MDX) expression that returns a set.Parameter2:A valid numeric expression that is typically a Multidimensional Expressions (MDX) expression of cell coordinates that return a number that represents values for the y-axis.Parameter3:A valid numeric expression that is typically a Multidimensional Expressions (MDX) expression of cell coordinates that return a number that represents values for the x-axis. LinRegVariance(LastPeriods(3,[Date].[CalendarYear].&[2014]),[Measures].[InternetSales Count],[Measures].[Reseller Count]) Log Returns a Double specifying the natural logarithm of a number. : Log() Log(Exp(2)) Log10 Returns the base-10 logarithm of a number. : Log10() Log10(100) Max Returns the maximum value of a numeric expression evaluated over a set. : Max(): Max(, ) Example 1：max({[Date].[CalendarYear].[CalendarYear].Members})Example 2：max({[Date].[CalendarYear].[CalendarYear].Members},[Measures].[Count]) Median Returns the median value of a numeric expression evaluated over a set. Median(): Median(, ) Example 1：Median({[Date].[CalendarYear].[CalendarYear].Members})Example 2：Median({[Date].[CalendarYear].[CalendarYear].Members},[Measures].[Count]) Members Returns the set of members in an object. : .Members: .Members: .Members Example 1：[Date].[CalendarYear].[CalendarYear].MembersExample 2：[Customer].[person-Hierarchy].MembersExample 3：[Date].[Due Fiscal Date-Hierarchy].[FiscalYear].Members Mid Returns a specified number of characters from a string. : Mid(, , )Parameter1:string expression from which characters are returned.Parameter2:Character position in string at which the part to be taken begins. If start is greater than the number of characters in string, Mid returns a zero-length string (\"\").Parameter3:Number of characters to return. If omitted or if there are fewer than length characters in the text (including the character at start, all characters from the start position to the end of the string are returned. Example 1：Mid(\"kylingence\",3)Example 2：Mid(\"kylingence\",2,4) Min Returns the minimum value of a numeric expression evaluated over a set. : Min(): Min(,) min([Date].[CalendarYear].[CalendarYear].Members,[Measures].[Count]) Minute Returns a Variant (Integer) specifying a whole number between 0 and 59, inclusive, representing the minute of the hour. : Minute() Minute(CDate('2019-05-23 20:49:28')) Month Returns a Variant (Integer) specifying a whole number between 1 and 12, inclusive, representing the month of the year. : Month() Month(CDate('2012-03-24 18:39:28')) Mtd A shortcut function for the PeriodsToDate function that specifies the level to be Month.: Mtd() : Mtd() MTD([Date].[Calendar-Hierarchy].currentmember) NOT Returns the negation of a condition. : NOT NOT [Measures].[Count]>80000 Name Returns the name of an object. : .Name: .Name: .Name: .Name Example 1：[Customer].[Education].[Education].NameExample 2：[Customer].[person-Hierarchy].nameExample 3：[Date].[Due Fiscal Date-Hierarchy].[FiscalYear].nameExample 4：[Date].[Due Fiscal Date-Hierarchy].[FiscalYear].[2010].name NextMember Returns the next member in the level that contains a specified member. : .NextMember [Customer].[Education].[High School].NextMember NonEmptyCrossJoin Returns the cross product of two sets, excluding empty tuples and tuples without associated fact table data. : NonEmptyCrossJoin(, ) NonEmptyCrossJoin([Customer].[LastName].[LastName].Members, [Customer].[GENDER].[GENDER].Members) Now Returns a Variant (Date) specifying the current date and time according your computer's system date and time. : Now() Now() OR Returns the disjunction of two conditions. : OR [Measures].[Count]>80000 OR [Measures].[SalesAmout]>30000000 Oct Returns a Variant (String) representing the octal value of a number. : Oct() Oct([Measures].[Count]) OpeningPeriod Returns the first descendant of a member at a level. : OpeningPeriod() OpeningPeriod(): OpeningPeriod(,) Example 1：OpeningPeriod([Date].[Due Fiscal Date-Hierarchy].[FiscalYear])Example 2：OpeningPeriod([Date].[Due Fiscal Date-Hierarchy].[FiscalYear],[Date].[Due Fiscal Date-Hierarchy].[FiscalYear].&[2010])Example 3：[Date].[Due Fiscal Date-Hierarchy].[FiscalYear].openingperiod Order Arranges members of a set, optionally preserving or breaking the hierarchy.If ASC or DESC is specified, the Order function first arranges the members according to their position in the hierarchy, and then orders each level. If BASC or BDESC is specified, the Order function arranges members in the set without regard to the hierarchy. In no flag is specified, ASC is the default. : Order(, , ): Order(, ) Example 1：Order([Date].[CalendarYear].[CalendarYear].members, [Measures].[Count], DESC) Example 2：Order([Date].[Due Calendar Date-Hierarchy].[CalendarYear].members, [Measures].[Count]) Ordinal Returns the zero-based ordinal value associated with a level. : .Ordinal [Date].[CalendarYear].[CalendarYear].Ordinal PPmt Returns a Double specifying the principal payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate. : PPmt(, ,, , ,)Parameter1:The interest rate per period.Parameter2:Specifies the period and must be in the range 1 to nper.Parameter3:The total number of payment periods in an annuity.Parameter4:The present value — the total amount that a series of future payments is worth now.Parameter6:The number 0 or 1 and indicates when payments are due. If type is omitted, it is assumed to be 0. Example 1：PPmt(0.1, 1, 30, 100000)Example 2：PPmt(0.1, 15, 30, 100000, 0)Example 3：PPmt(0.1, 1, 30, 100000, 0, CBool(0)) PV Returns a Double specifying the present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate. : PV(, , , , ) PV(0,3,2,7,CBool(1)) ParallelPeriod Returns a member from a prior period in the same relative position as a specified member. : ParallelPeriod(): ParallelPeriod(): ParallelPeriod(, ): ParallelPeriod(, ,) Example 1：ParallelPeriod([Date].[Calendar-Hierarchy].[CalendarYear])Example 2：ParallelPeriod([Date].[Calendar-Hierarchy].[CalendarQuarter], 1)Example 3：ParallelPeriod([Date].[Calendar-Hierarchy].[CalendarYear],1,[Date].[Calendar-Hierarchy].currentMember Parameter Returns default value of parameter. : Parameter(, , , ) : Parameter(, , ) : Parameter(, , , ) : Parameter(, , ) : Parameter(, , , ) : Parameter(, ,) Parent Returns the parent of a member. : .Parent [Date].[Due Fiscal Date-Hierarchy].[FiscalYear].&[2013].&[1].&[1].Parent Percentile Returns the value of the tuple that is at a given percentile of a set. : Percentile(, , )Parameter1:The array or range of data that defines relative standing.Parameter2:The Value of the query.Parameter3:The percentile value in the range 0..1, inclusive. Percentile([Date].[CalendarQuarter].[CalendarQuarter].members, [Measures].[Count], 1) PeriodsToDate Returns a set of periods (members) from a specified level starting with the first period and ending with a specified member. : PeriodsToDate(): PeriodsToDate(): PeriodsToDate(, ) Example 1：PeriodsToDate([Date].[Calendar-Hierarchy].[CalendarQuarter])Example 2：PeriodsToDate([Date].[Calendar-Hierarchy].[CalendarYear],[Date].[Calendar-Hierarchy].[MONTHNUMBEROFYEAR].&[34]) Pi Returns the number 3.14159265358979, the mathematical constant pi, accurate to 15 digits. : Pi() Pi() Pmt Returns a Double specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate. : Pmt(, ,, , ): Pmt(, ,, , )Parameter1:The interest rate for the loan.Parameter2:The total number of payments for the loan.Parameter3:The present value, or the total amount that a series of future payments is worth now; also known as the principal.Parameter4:The future value, or a cash balance you want to attain after the last payment is made. If fv is omitted, it is assumed to be 0 (zero), that is, the future value of a loan is 0.Parameter5:The number 0 (zero) or 1 and indicates when payments are due. Pmt(0, 3, 2, 7, CBool(1)) Power Returns the result of a number raised to a power. : Power(, ) Power(4, 0.5) PrevMember Returns the previous member in the level that contains a specified member. : .PrevMember [Date].[CalendarYear].&[2012].PrevMember Properties Returns the value of a member property. .Properties() [Date].[CalendarYear].[CalendarYear].&[2007].Properties('Caption') Qtd A shortcut function for the PeriodsToDate function that specifies the level to be Quarter.: Qtd() : Qtd() QTD([Date].[Calendar-Hierarchy].currentmember) RTrim Returns a Variant (String) containing a copy of a specified string without trailing spaces. : RTrim() RTrim('abc ') Radians Converts degrees to radians. : Radians() Radians(180) Rank Returns the one-based rank of a tuple in a set. : Rank(, ): Rank(, , ): Rank(, ) Rank(, , ) Example 1：Rank(([Date].[CalendarYear].&[2007],[Customer].[LastName].&[Adams]), [Date].[CalendarYear].[CalendarYear].members* [Customer].[LastName].[LastName].members)Example 2：Rank(([Date].[CalendarYear].&[2007],[Customer].[LastName].&[Adams]), [Date].[CalendarYear].[CalendarYear].members* [Customer].[LastName].[LastName].members, [Measures].[Count])Example 3：Rank([Date].[CalendarYear].&[2007], [Date].[CalendarYear].[CalendarYear].members)Example 4：Rank([Date].[CalendarYear].&[2007], [Date].[CalendarYear].[CalendarYear].members, [Measures].[Count]) Rate Returns a Double specifying the interest rate per period for an annuity. : Rate(, , , , , )Parameter1:The total number of payment periods in an annuity.Parameter2:The payment made each period and cannot change over the life of the annuity. Parameter3:The present value — the total amount that a series of future payments is worth now.Parameter4:The future value, or a cash balance you want to attain after the last payment is made.Parameter5:The number 0 or 1 and indicates when payments are due.Parameter6:Your guess for what the rate will be. Example 1：Rate(12, 500, 3000)Example 2：Rate(12, 500, 3000, 300000)Example 3：Rate(12, 500, 3000, 300000, CBool(0))Example 4：Rate(12, 500, 3000, 300000, CBool(0), 1) Replace Returns a string in which a specified substring has been replaced with another substring a specified number of times. : Replace(, , , , , )Parameter1:Meta String.Parameter2:Searched substring.Parameter3:Replaced substring.Parameter4:The search start position, if omitted, it is assumed to be 1.Parameter5:The number of substring replacements to be performed. If omitted, it is assumed to be -1, which means that all replacements are performed.Parameter6:The comparison type when calculating substrings. Replace('kylingence', gence', 'mdx', 1, 1, 1) Right Returns a Variant (String) containing a specified number of characters from the right side of a string. : Right(, ) Right('kylingence', 2) Round Returns a number rounded to a specified number of decimal places. : Round(, ): Round() Example 1：Round(1.123)Example 2：Round(1.123, 2) SLN Returns a Double specifying the straight-line depreciation of an asset for a single period. : SLN(, ,)Parameter1:The initial cost of the asset.Parameter2:The value at the end of the depreciation (sometimes called the salvage value of the asset).Parameter3:The number of periods over which the asset is depreciated (sometimes called the useful life of the asset). SLN(100, 10, 5) SYD Returns a Double specifying the sum-of-years' digits depreciation of an asset for a specified period. : SYD(, , , )Parameter1:The initial cost of the asset.Parameter2:The value at the end of the depreciation (sometimes called the salvage value of the asset).Parameter3:The number of periods over which the asset is depreciated (sometimes called the useful life of the asset).Parameter4:The period and must use the same units as life. SYD(1000, 100, 5, 5) Second Returns a Variant (Integer) specifying a whole number between 0 and 59, inclusive, representing the second of the minute. : Second()Second(CDate('2013-02-23 16:39:28')) SetToStr Constructs a string from a set. : SetToStr() SetToStr([Date].[CalendarYear].Children) Sgn Returns a Variant (Integer) indicating the sign of a number. : Sgn() Sgn(3.11111) Siblings Returns the siblings of a specified member, including the member itself. .Siblings [Date].[CalendarYear].[CalendarYear].&[2007].Siblings Sin Returns a Double specifying the sine of an angle. : Sin() Sin(60*Pi()/180) Sinh Returns the hyperbolic sine of a number. : Sinh()Sinh(-2) Space Returns a Variant (String) consisting of the specified number of spaces. : Space() \"kylingence\"||Space(3)||\"MDX\" Sqr Returns a Double specifying the square root of a number. : Sqr() Sqr(4) SqrtPi Returns the square root of (number * pi). : SqrtPi()SqrtPi(4) Stddev Alias for Stdev. : Stddev() Stddev(, ) Example 1：StdDev({[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2011],[Date].[CalendarYear].&[2012]})Example 2：StdDev({[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2011],[Date].[CalendarYear].&[2012]},[Measures].[Count]) StddevP Alias for StdevP. : StddevP()StddevP(,) Example 1：StddevP({[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2011],[Date].[CalendarYear].&[2012]})Example 2：StddevP({[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2011],[Date].[CalendarYear].&[2012]},[Measures].[Count]) Stdev Returns the standard deviation of a numeric expression evaluated over a set (unbiased). : Stdev() Stdev(, ) Example 1：Stdev({[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2011],[Date].[CalendarYear].&[2012]})Example 2：Stdev({[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2011],[Date].[CalendarYear].&[2012]},[Measures].[Count]) StdevP Returns the standard deviation of a numeric expression evaluated over a set (biased). : StdevP()StdevP(, ) Example 1：StdevP({[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2011],[Date].[CalendarYear].&[2012]})Example 2：StdevP({[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2011],[Date].[CalendarYear].&[2012]},[Measures].[Count]) Str Returns a Variant (String) representation of a number. : Str() Str(34) StrComp Returns a Variant (Integer) indicating the result of a string comparison. : StrComp(, , )Parameter3:Specifies the type of string comparison. If the compare argument is Null, an error occurs. If compare is omitted, the Option Compare setting determines the type of comparison. Example 1：StrComp(\"abcd\",\"ABCD\")Example 2：StrComp(\"abcd\",\"ABCD\",0)StrComp(\"abcde\",\"ABCD\",1) StrReverse Returns a string in which the character order of a specified string is reversed. : StrReverse() StrReverse(\"abcde\") StrToMember Returns a member from a unique name String in MDX format. : StrToMember() StrToMember('[Customer].[Education].&[Bachelors]') StrToSet Constructs a set from a string expression. : StrToSet([, ...])StrToSet(\"[Product].[Color].&[Red],[Product].[Color].&[Silver]\",[Product].[Color]) StrToTuple Constructs a tuple from a string. : StrToTuple() StrToTuple(\"([Product].[Color].&[Red],[Product].[Class].&[H ])\",[Product].[Color],[Product].[Class]) String : String(, ) String(3,\"h\") Subset Returns a subset of elements from a set. : Subset(, ) Subset(, , )Parameter1:A valid numeric expression that specifies the position of the first tuple to be returned.Parameter2:A valid numeric expression that specifies the number of tuples to be returned. Example 1：SubSet({[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2011],[Date].[CalendarYear].&[2012]},2)Example 2：SubSet({[Date].[CalendarYear].&[2010], [Date].[CalendarYear].&[2011], [Date].[CalendarYear].&[2012]},1,3) Sum Returns the sum of a numeric expression evaluated over a set. : Sum() Sum(, ) Sum([Date].[DateKey].CurrentMember,[Measures].[Count]) Tail Returns a subset from the end of a set. : Tail(): Tail(, ) Example 1：Tail({[Date].[CalendarYear].&[2010], [Date].[CalendarYear].&[2011], [Date].[CalendarYear].&[2012], [Date].[CalendarYear].&[2013]})Example 2：Tail({[Date].[CalendarYear].&[2010], [Date].[CalendarYear].&[2011], [Date].[CalendarYear].&[2012], [Date].[CalendarYear].&[2013]},2) Tan Returns a Double specifying the tangent of an angle. : Tan() Tan(45*Pi()/180) Tanh Returns the hyperbolic tangent of a number. : Tanh() Tanh(-2) ThirdQ Returns the 3rd quartile value of a numeric expression evaluated over a set. : ThirdQ() ThirdQ(, ) Example 1：ThirdQ({[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2011],[Date].[CalendarYear].&[2012]})Example 2：ThirdQ({[Date].[CalendarYear].&[2010], [Date].[CalendarYear].&[2011], [Date].[CalendarYear].&[2012], [Date].[CalendarYear].&[2013] },[Measures].[Count]) Time Returns a Variant (Date) indicating the current system time. : Time() Time() TimeSerial Returns a Variant (Date) containing the time for a specific hour,minute, and second. : TimeSerial(, , )Parameter1:Hour.Parameter2:MinuteParameter3:Second TimeSerial(16,34,17) TimeValue Returns a Variant (Date) containing the time. : TimeValue()TimeValue(CDate('2020-09-02 18:20')) Timer Returns a Single representing the number of seconds elapsed since midnight. : Timer() Timer() ToggleDrillState The ToggleDrillState function toggles the drill state of each member of the second set that is present in the first set. The first set can contain tuples with any dimensionality, but the second set must contain members of a single dimension. The ToggleDrillState function is a combination of the DrillupMember and DrilldownMember functions. If the member, m, of the second set is present in the first set, and that member is drilled down (that is, has a descendant immediately following it), then DrillupMember(Set_Expression1, {m}) is applied to the member or tuple in the first set. : ToggleDrillState(, ) ToggleDrillState(, , ) Example 1：ToggleDrillState({[Customer].[Education].[Education].Members},{[Customer].[Education].&[Bachelors],[Customer].[Education].&[High School]}) TopCount Returns a specified number of items from the top of a set, optionally ordering the set first. : TopCount(, , ): TopCount(, ) Example 1：TopCount({[Customer].[Education].[Education].Members},3,[Measures].[Count])Example 2：TopCount({[Customer].[Education].[Education].Members},3) TopPercent Sorts a set and returns the top N elements whose cumulative total is at least a specified percentage. : TopPercent(, , ) TopPercent({[Product].[Color].[Color].Members},60,[Measures].[Count]) TopSum Sorts a set and returns the top N elements whose cumulative total is at least a specified value. : TopSum(, , ) TopSum({[Customer].[Education].[Education].Members},30000,[Measures].[Count]) Trim Returns a Variant (String) containing a copy of a specified string without leading and trailing spaces. : Trim() Trim(\" delete space \") TupleToStr Constructs a string from a tuple. : TupleToStr() TupleToStr(([Customer].[Education].&[Bachelors],[Date].[CalendarYear].&[2011])) TypeName Returns a String that provides information about a variable. : TypeName() TypeName(2) UCase Returns a string that has been converted to uppercase. : UCase() ucase(\"Kylingence\") Union Returns the union of two sets, optionally retaining duplicates,using the ALL flag keeps duplicates in the joined set. : Union(, ): Union(, , )Symbol:All Example 1：Union({[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2013]},{[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2012]})Example 2：Union({[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2013]},{[Date].[CalendarYear].&[2010],[Date].[CalendarYear].&[2012]},All) UniqueName Returns the unique name. : .UniqueName: .UniqueName: .UniqueName: .UniqueName Example 1：[Customer].[Education].[Education].UniqueNameExample 2：[Customer].[person-Hierarchy].UniqueNameExample 3：[Customer].[person-Hierarchy].[Education].uniquenameExample 4：[Customer].[Education].&[Bachelors].UniqueName Unorder Removes any enforced ordering from a specified set. : Unorder() Unorder(order([Customer].[Education].[Education].Members,[Measures].[Count])) Val Returns the numbers contained in a string as a numeric value of appropriate type. : Val() Val(\"34\") ValidMeasure Returns a valid measure in a virtual cube by forcing inapplicable dimensions to their top level. : ValidMeasure()ValidMeasure(([Customer].[Education].&[Bachelors],[Date].[CalendarYear].&[2012])) Value Returns the value of a measure. .Value [Date].[CalendarYear].&[2010].Value Var Returns the variance of a numeric expression evaluated over a set (unbiased). : Var(): Var(, ) Example 1：Var({[Date].[CalendarYear].&[2010], [Date].[CalendarYear].&[2011], [Date].[CalendarYear].&[2012] })Example 2：Var({[Date].[CalendarYear].&[2010], [Date].[CalendarYear].&[2011], [Date].[CalendarYear].&[2012] },2) VarP Returns the variance of a numeric expression evaluated over a set (biased). : VarP(): VarP(, ) Example 1：VarP({[Date].[CalendarYear].&[2010], [Date].[CalendarYear].&[2011], [Date].[CalendarYear].&[2012] })Example 2：VarP({[Date].[CalendarYear].&[2010], [Date].[CalendarYear].&[2011], [Date].[CalendarYear].&[2012] },2) Variance Alias for Var. : Variance(): Variance(, ) Example 1：Variance({[Date].[CalendarYear].&[2010], [Date].[CalendarYear].&[2011], [Date].[CalendarYear].&[2012] })Example 2：Variance({[Date].[CalendarYear].&[2010], [Date].[CalendarYear].&[2011], [Date].[CalendarYear].&[2012] },3) VarianceP Alias for VarP. : VarianceP(): VarianceP(, ) Example 1：VarianceP({[Date].[CalendarYear].&[2010], [Date].[CalendarYear].&[2011], [Date].[CalendarYear].&[2012] })Example 2：VarianceP({[Date].[CalendarYear].&[2010], [Date].[CalendarYear].&[2011], [Date].[CalendarYear].&[2012] },3) VisualTotals Dynamically totals child members specified in a set using a pattern for the total label in the result set. : VisualTotals(): VisualTotals(, ) Example 1：VisualTotals({[Customer].[Education].&[Bachelors],[Customer].[Education].&[High School], [Customer].[Education].&[Partial High School]})Example 2：VisualTotals({[Customer].[Education].&[Bachelors],[Customer].[Education].&[High School], [Customer].[Education].&[Partial High School]},'* -Visualtotals') Weekday Returns a Variant (Integer) containing a whole number representing the day of the week. : Weekday(, ) Example 1：Weekday(Date())Example 2：Weekday(Date(),3) WeekdayName Returns a string indicating the specified day of the week. : WeekdayName(, , ) WeekdayName(3,[Measures].[Count] Wtd A shortcut function for the PeriodsToDate function that specifies the level to be Week.: Wtd(): Wtd() WTD([Date].[Calendar-Hierarchy].currentmember) XOR Returns whether two conditions are mutually exclusive. : XOR [Measures].[Count]>80000 Xor [Measures].[SalesAmout] Year Returns a Variant (Integer) containing a whole number representing the year. : Year() Year(CDate(\"2020-09-03\")) Ytd A shortcut function for the PeriodsToDate function that specifies the level to be Year.: Ytd(): Ytd() YTD([Date].[Calendar-Hierarchy].currentmember) _CaseMatch Evaluates various expressions, and returns the corresponding expression for the first which matches a particular value.。Case When Then [...] [Else ] EndCASE sum([Date].[DateKey].CurrentMember,[Measures].[Count]) WHEN 0 THEN 'NONE'WHEN 1 THEN 'SMALL'ELSE 'LARGE'END _CaseTest Evaluates various conditions, and returns the corresponding expression for the first which evaluates to true.Case When Then [...] [Else ] EndCASE WHEN [Measures].[Count]THEN 'TRUE'ELSE 'VERY LARGE'END || Concatenates two strings. : || 'kylin'||'gence' Powered by Gitbook.            Last Modified： 2022-03-20 16:37:32 "},"dataset/metadata_synchronization.en.html":{"url":"dataset/metadata_synchronization.en.html","title":"Metadata Synchronization","keywords":"","body":"Metadata Synchronization Metadata synchronization principle Metadata synchronization types Metadata synchronization frequency Metadata failure retrial mechanism Metadata synchronization principle Metadata synchronization is to get the relevant information from Kylin through HTTP call, and compare it with the existing metadata information in mdx. If there is any change, the metadata in mdx will be repaired according to the change of Kylin. Metadata synchronization types Metadata synchronization information includes the following types: User list synchronization User group list synchronization Cube list synchronization Project list synchronization Segment list synchronization Cube metadata list synchronization Metadata synchronization frequency For the above metadata types, the changes of items No.1 to No.4 are less difficult, more frequent and less expensive for users. They can be synchronized every 20 seconds and cannot be changed. The synchronization frequency of item No.5 and No.6 are low. The default value is 300 seconds, that is, 5 minutes synchronization. The benchmark value is 20 seconds. The default configuration value is 15, that is 15 times of 20 seconds, which means 300 seconds. The configuration items are as follows: insight.dataset.verify.interval.count=15 Note ： When the synchronization task is massive, it may take longer than the configuration defined. Metadata failure retrial mechanism Metadata synchronization task may stop because of user information change in Kylin. At this time, the metadata synchronization task will fail and try again with a frequency of 20 seconds. If the current synchronization user information or kylin returns to normal, the synchronization task returns to normal. Powered by Gitbook.            Last Modified： 2022-03-20 16:39:15 "},"mdx_query/":{"url":"mdx_query/","title":"Query","keywords":"","body":"Query In this chapter, we will introduce you to the query syntax supported by MDX for Kylin and view query history. Powered by Gitbook.            Last Modified： 2022-03-25 11:17:56 "},"mdx_query/query_syntax.en.html":{"url":"mdx_query/query_syntax.en.html","title":"Query Syntax","keywords":"","body":"Query syntax The MDX syntax currently supported by MDX for Kylin is a subset of the standard MDX, which is different from the latest standard in some details. This paper introduces the syntax structure supported by MDX for Kylin. Select statement Syntax structure described by BNF: [ WITH [ , ...n ] ] SELECT [ * | ( [ , ,...n ] ) ] FROM [ ] [ ] ::= ( MEMBER ) | ( SET ) ::= [ NON EMPTY ] Set_Expression [ ] ON Integer_Expression | AXIS(Integer) | COLUMNS | ROWS | PAGES | SECTIONS | CHAPTERS ::= Cube_Name | [NON VISUAL] (SELECT [ * | ( [ , ,...n ] ) ] FROM ) ::= WHERE Tuple_Expression ::= [ CELL ] PROPERTIES Cell_Property_Name [ , Cell_Property_Name,...n ] ::= [DIMENSION] PROPERTIES (Dimension_Property_Name [,Dimension_Property_Name,...n ] ) | (Level_Property_Name [, Level_Property_Name,...n ] ) | (Member_Property_Name [, Member_Property_Name,...n ] ) Syntax restrictions SELECT_WITH_CLAUSE At present, MDX only supports member and set, and the calculated measure and named set need to be defined in the dataset. SELECT_QUERY_AXIS_CLAUSE MDX only enables execution optimization for queries on a specific axis when up to two axes are used. SELECT_SUBCUBE_CLAUSE Specify the query cube. Currently, it supports Cube_Name and has limited support for subqueries. SELECT_SLICER_AXIS_CLAUSE The expression must contain members in dimension and hierarchy, not members referenced in SELECT_QUERY_AXIS_CLAUSE expression. Syntax parameters Parameter Description Set_Expression Returns a valid multidimensional expression of a set Integer_Expression An integer between 0 and 127 Cube_Name Provides a valid string for the cube name Tuple_Expression Returns a valid multidimensional expression for tuple Cell_Property_Name A valid string representing the cell property Dimension_Property_Name A valid string representing the dimension property Level_Property_Name A valid string representing the level property Member_Property_Name A valid string representing the member property Powered by Gitbook.            Last Modified： 2022-03-24 19:48:48 "},"mdx_query/query_history.en.html":{"url":"mdx_query/query_history.en.html","title":"Query History","keywords":"","body":"Query History All the queries that you executed in Kylin will be saved in query history, you can check it out in the left side navigation bar Query -> History. This page saves the basic information of queries, such as query time, SQL statement, query user, etc. This helps you to record query behaviors, which enables you to better manage and optimize the models. This chapter will presents you the content of query history page. View Query History Click the Query History button in the left navigator bar, you will see all the queries with basic information. Each line in the list is a query history record. The meaning of the columns are as follows: Start time: The time the query was submitted. Execution Time: The time taken to complete the query. If the query fails, it is displayed as blank. MDX Statement: MDX statement that was executed. Dataset Name: The dataset used for the query. Query Status: There are several states as follows： Success Failure Application: The type of BI that submitted the query. Query Node: The service nodes that handle the query. User: MDX for Kylin user who submitted the query. History Details When you click on the arrow icon on the left side of a query analysis, the details of the current MDX query will be expanded. The information is divided into two parts: query details and SQL statements. The query details show the basic information of MDX scripts and queries (such as: Session ID, query status, etc.), SQL statements show related SQL scripts. Note: Only the first 1000 rows of Query can be seen in the query details. You can click the copy button in the upper right corner of the query statement box to copy the complete statement. Query Details Click View in More Information to show more details: Meaning of relevant details: Query ID: MDX query execution ID Execution Time: the total time of the entire MDX query (including the total time of preprocessing, SQL queries, etc.) Use MDX Cache : query whether to hit MDX cache Use Other engine: whether to use other syntax execution engine Network Package: the total bytes of network throughput Timeout: whether timeout in the query of processing Time for Creating Multidimensional Dataset: the time for creating multidimensional dataset Time for Marshall Soap Message: the time for marshall soap message Dataset Name: the dataset for query to hit Use Gateway : Whether the client side initiating the query uses MDX for Kylin Gateway. SQL Statement Select the SQL statement of query list, and then click the Detail tab to view the detailed information of the SQL query statement. As shown below: Meaning of relevant details: Query ID : SQL query execution ID Number of result rows : Returns the number of rows in the result set Whether to use cache : query whether to hit cache System ID : internal increment number Powered by Gitbook.            Last Modified： 2022-03-24 17:19:56 "},"integration/":{"url":"integration/","title":"BI Integration","keywords":"","body":"BI Integration In this chapter, you will learn how MDX for Kylin integrates with BI. Powered by Gitbook.            Last Modified： 2022-03-23 18:11:45 "},"integration/excel_integration.en.html":{"url":"integration/excel_integration.en.html","title":"Integrate with Excel","keywords":"","body":"Integrate with Excel In this section, we will introduce you how to analyze data from MDX for Kylin using Excel. With this method, you will be able to query data in MDX for Kylin through MDX for Kylin without importing data to Excel. Prerequisite Excel connect to MDX for Kylin Learn More Prerequisite Install MDX for Kylin. Your Windows Excel version is 2007 or above. Excel connect to MDX for Kylin Choose Data -> Get Data -> From Database -> from Analysis Services Next, in the Server name you need to fill in the host information of MDX for Kylin, the sample is as follows: http://{host}:{port}/mdx/xmla/{project} MDX for Kylin default HTTP port is 7080. Change the project to the project you want to access in MDX for Kylin. Admin can find the port of MDX for Kylin under MDX for Kylin installation folder, in conf/insight.properties file, insight.semantic.port configuration. If the configuration insight.semantic.context-path is set, you should enter the following information in the server field: http://{host}:{port}/{context-path}/mdx/xmla/{project} Both host and port should be written as information of Kylin. For example: # context-path configuration as follow: insight.semantic.context-path=/ws/testworkspace/mdx # Address of Kylin http://10.10.10.200:7070/kylin # The server information to enter in Excel http://10.10.10.200:7070/ws/testworkspace/mdx/mdx/xmla/test_project Choose Use the following User Name and Password and fill the username and password of MDX for Kylin. Now you have successfully establish connection to MDX for Kylin, choose the dataset you want to analyze, click Next. Check Always attemp to use this file to refresh data and Save password in file Check Save password in file, this way you don't need to refill the password later. This setting will only be effective in this machine. Now you can analyze Kylin's dataset using Excel PivotTable. Learn more To learn more about the features MDX for Kylin supports in Excel, please read Supported Excel Functionality Powered by Gitbook.            Last Modified： 2022-03-25 11:17:56 "},"integration/excel_function_list.en.html":{"url":"integration/excel_function_list.en.html","title":"Supported Excel Function List","keywords":"","body":"Supported Excel Functionality Prerequisite Below functionality requires Excel 2010 and above Data Connection Function Support Status Operation Path Comment SSAS Entrance - Use username and password Support Data - Get Data - From Database - SSAS You need to check Save password in file and Always attempt to use file to refresh during the connection process, otherwise you may need to enter authentication information frequently to maintain the connection Existing Connection Support Data There are two ways to connect to the existing connection. Selecting Connections in this workbook will make the newly created PivotTable use the same connection. Selecting Connection files in this computer will create a new copy of the connection, new PivotTable will use the new copy connection. In addition, when the data is refreshed, the same connected PivotTable will be updated Insert PivotTable Support Insert - PivotTable -Choose Connection You can choose a connection entry other than SSAS, such as XMLA Connect Import Offline Cube File Not Support Drag and drop .cub file to Excel Excel support extracts data from multidimensional servers and generates .cub files for offline analysis Analyze in PivotTable Sync Semantic Model Function Support Status Operation Path Comment Measure group Support PivotTable By default, each model corresponds to a group, and the calculated measure is a single measure group Measure Folder Support PivotTable Dimension Table Support PivotTable Only one public dimension table will be displayed Named Set Support PivotTable Namedset Folder Support PivotTable The Named Set is displayed under the Set folder by default Hierarchy Support PivotTable Normal Dimension Support PivotTable Dimension Folder Support PivotTable Field Select & Search Function Support Status Operation Path Comment Filters Area Support PivotTable Support filtering normal dimension and hierarchy dimension Rows Area Support PivotTable Support choosing dimension, hierarchy and namedset Columns Area Support PivotTable Support choosing dimension, hierarchy and namedset. if user check the time dimension, it is placed on rows by default. Values Area Support PivotTable When there are more than two measures, values dimension will be generated by default on columns Field Search Support PivotTable Support searching measure, dimension and namedset Filter Function Function Support Status Operation Path Comment Filter Area Support Support to filter dimension and hierarchy; support single and multiple selection; support fuzzy select Columns & Rows Support Support to filter dimension and hierarchy; support single and multiple selection; support fuzzy select Keep/Hide selected items Support PivotTable right-click menu - Filter Belong to list filter and cannot coexist with value filter, label filter TopN Support PivotTable right-click menu - Filter Belong to value filter; multiple dimensions filter TopN cannot take effect; Hierarchy multiple Level filter TopN may lead to inaccurate data Value Filters Support PivotTable right-click menu - Filter Need to enable sub-query by configuring insight.mdx.mondrian.mdprop.mdx.subqueries, check Basic Configurations for details; value filter and label filter cannot be performed at the same time; for single character (not) equals, (not) greater than/less query results are incorrect; After filtering the hierarchy , it is not possible to expand; no total can be displayed after filtering Lable Filters Support PivotTable right-click menu - Filter Need to enable sub-query by configuring insight.mdx.mondrian.mdprop.mdx.subqueries, check Basic Configurations for details; value filter and label filter cannot take effect at the same time; for single character (not) equals, (not) greater than/less query results are incorrect; After filtering the hierarchy , it is not possible to expand; no total can be displayed after filtering Slicer Filter Support Analyze Belong to list filter Timeline Filter Not support Analyze Belong to list filter Excel copied fiel d filter Support Copy Field - Filter Copy a filter in PivotTable to a blank area and filter the field Sort Function Function Support Status Operation Path Comment Datasource Order Support PivotTable right-click menu - Sort Sort by sql result by default; Use Key Column and name column to change the sorting Manual Order Support PivotTable right-click menu - Move Custom sorting through move function Field Order Support PivotTable right-click menu - Sort Sort according to the selected field, other sorting methods cannot coexist Layout & Display Function Support Status Operation Path Comment Format Cells Support PivotTable right-click menu The string format such as currency sign can be set by editing the dataset, or it can be set in Excel Show Totals Support Design - Subtotals Columns with small cardinality placed on the left has better performance Show Subtotals Support Design - Subtotals Columns with small cardinality placed on the left has better performance Include filtered items In Totals Not support Design - Subtotals Support totals do not change according to the filter items Show +/- buttons Not support Analyze - Show +/- buttons will be generated in hierarchy by default; If there are multiple common dimensions, the +/- button will not be generated currently Show items with no data on rows Not support PivotTable right-click menu - PivotTable Option - Display The row will be hidden when all measures on are empty Show items with no data on columns Not support PivotTable right-click menu - PivotTable Option - Display The column will be hidden when all measures on are empty Show field headers Support Analyze - Show Show field list Support Analyze - Show Show Properties in tooltips Not support PivotTable right-click menu Show Properties in reports Not support PivotTable right-click menu Insert blank line after each Item Support Design - Blank Rows Expand Support PivotTable right-click menu Support expand one and expand all Collapse Support PivotTable right-click menu Support collapse one and collapse all Drill down Not support PivotTable right-click menu Currently, you can only drill down two levels at most, and you can drill down multiple levels after opening the subquery Drill up Not support PivotTable right-click menu Function is not perfect, see above Repeat all Item lables Support Design - Report Layout Show in compact form Support Design - Report Layout Show in outline form Support Design - Report Layout Show in tabular form Support Design - Report Layout Refresh Data Function Support Status Operation Path Comment Defer Layout Update Support PivotTable Only update data, exclude the structure. If the dataset structure is changed (dimensions/measures are missing), an error will be reported PivotTable right click refresh Support PivotTable right click Both update the data and structure. If the structure changes, the report will be adaptively changed, related dimensions/measures may be removed, or the entire report may be cleared Refresh Support Data Same as above, will update all reports of the same connection Refresh All Support Data Will update all connected reports Cube Formulas Function Support Status Operation Path Comment CubeMember Support Formula Returns a member or tuple from the cube. Use to validate that the member or tuple exists in the cube CubeValue Support Formula Returns an aggregated value from the cube CubeSet Not support Formula Defines a calculated set of members or tuples by sending a set expression to the cube on the server, which creates the set, and then returns that set to Microsoft Excel CubeSetCount Not support Formula Returns the number of items in a set CubeKPIMember Not support Formula Returns a key performance indicator (KPI) property and displays the KPI name in the cell. A KPI is a quantifiable measurement, such as monthly gross profit or quarterly employee turnover, that is used to monitor an organization's performance CubeMemberProperty Not support Formula Returns the value of a member property from the cube. Use to validate that a member name exists within the cube and to return the specified property for this member CubeRankedMember Support Formula Returns the nth, or ranked, member in a set. Use to return one or more elements in a set, such as the top sales performer or the top 10 students Advanced Functions Function Support Status Operation Path Comment ESC cancel query Support Type ESC during the query There may be problems in a cluster env Show Value As Support PivotTable right-click menu Similar to table calculation in Tableau Group/Ungroup Support PivotTable right-click menu Common in head-long tail scenario analysis, long tail is classified as other Drillthrough Not support PivotTable right-click menu Double-click the measure cell to drill into details Create Set Bases on Row Items Not support Analyze - Filed, Items & Sets Can be defined in MDX for Kylin data set interface Create Set Bases on MDX Not support Analyze - Filed, Items & Sets Can be defined in MDX for Kylin data set interface Create Calculate Measure Not support Analyze - OLAP Tools Can be defined in MDX for Kylin data set interface Create Calculate Member Not support Analyze - OLAP Tools Can be defined in MDX for Kylin data set interface What-If Analysis Not support Analyze - OLAP Tools Need to have data write-back function Offline OLAP Not support Analyze - OLAP Tools Report Making Function Support Status Operation Path Comment Inset Chart Support Insert - Charts Various types of charts can be selected for data visualization Filter linkage Support Right click Slicer - Report Connections After the filter setting is associated with multiple PivotTable, linkage analysis can be performed, which is often used in dashboards Report Sharing Function Support Status Operation Path Comment Change Data Source Support Analyze This operation will update the data and structure. If the structure changes, the report will be adaptively changed, related dimensions/measures may be removed, or the entire report may be cleared Sharing without change data source Support When creating the report, do not check Save password in file and Always try to refresh using file To connect from SSAS Entrance - Use Windows Authentication, it needs to be used with MDX for Kylin Gateway Powered by Gitbook.            Last Modified： 2022-03-25 14:45:55 "},"integration/tableau_integration.en.html":{"url":"integration/tableau_integration.en.html","title":"Integrate with Tableau","keywords":"","body":"Integrate with Tableau In this section, we will introduce you how to analyze data from MDX for Kylin using Tableau. With this method, you will be able to query data in MDX for Kylin through MDX for Kylin without importing data to Tableau. Prerequisite Tableau connect to MDX for Kylin Semantic Prerequisite Install MDX for Kylin Install Tableau's Microsoft Analysis Services driver, see Microsoft Analysis Services Drivers Recommended Download 2012 SP1 (Version 11.0.2100.60) Tableau connect to MDX for Kylin Semantic Choose Connect -> Microsoft Analysis Services Next, you need to fill in the address information of the connection MDX for Kylin Semantic in the Server name column, the sample is as follows: http://{host}:{port}/mdx/xmla/{project} MDX for Kylin Semantic default HTTP port is 7080. The username and password are your MDX for Kylin login username and password. If the configuration insight.semantic.context-path is set, you should enter the following information in the server field: http://{host}:{port}/{context-path}/mdx/xmla/{project} Both host and port should be written as information of Kylin. For example: # context-path configuration as follow: insight.semantic.context-path=/ws/testworkspace/mdx # Address of Kylin http://10.10.10.200:7070/kylin # The server information to enter in Tableau http://10.10.10.200:7070/ws/testworkspace/mdx/mdx/xmla/test_project ![Authentic](images/tableau/username_password.en.png) Now that project is connected to tableau, please a dataset. After selecting the dataset, Tableau can read the information about the dataset. Click on the workbook to start the analysis. Now you can analyze Kylin's Cube using Excel PivotTable. So far, the measures: top, percentile and correlation are not supported. Powered by Gitbook.            Last Modified： 2022-03-23 18:17:38 "},"integration/tableau_function_list.en.html":{"url":"integration/tableau_function_list.en.html","title":"Supported Tableau Function List","keywords":"","body":"Supported Tableau Functionality Prerequisite Below functionality requires Windows Tableau 10.x and above Data Connection Function Support Status Operation Path Use Windows Authentication Not Support Connect - To a Server - More - Microsoft Analysis Services - Use Windows Authentication Use a specific username and password Support Connect - To a Server - More - Microsoft Analysis Services - Use a specific username and password Sync Semantic Model Function Support Status Comment Dimension Table Support Hierarchy Support Dimension Support Measure Support Calculated Measure Support Measures and calculated meausres are shown in the mesure panel Named Set Support Folder Not Support Folders of dimensions and measures are not synchronized Field Select & Search Function Support Status Comment Filters Support Support filtering on dimension, hierarchy and measure Rows Support Support choosing dimension, hierarchy and measure Columns Support Support choosing dimension, hierarchy and measure Sheet area Support Field Search Support Support searching dimension, hierarchy and measure Filtering Function Support Status Comment Filter on dimension Support Support General, Condition, Top filter. Support single/multiple values filtering. Support searching value on filters Filter on hierarchy Support Support General, Condition, Top filter. Support single/multiple values filtering. Support searching value on filters Filter on measure/calculetd measure Support Sopport Range of laues, At least, At most, Special filtering Sorting Function Support Status Comment Sorting dimension/hierarchy Support Support sorting from an axis, header, field label, or toolbar, or manual sorting. Support sorting by Data source order, Alphabetic, Field, Manual, or Nested Sorting measure/calculetd measure Support Support sorting from an axis, header, field label, or toolbar, or manual sorting Layout & Display Function Support Status Operation Path Comment Format setting Support Right-click menu - Format Formating such as currency sign $ or￥can be set by editing the dataset, or it can be set in Tableau Show Totals Support Analysis - Totals Columns with small cardinality placed on the left has better performance Show Subtotals Support Analysis - Totals - Add All Subtotals Columns with small cardinality placed on the left has better performance Data Refresh Function Support Status Operation Path Comment Auto Update Worksheet Support Toolbar - Auto Update Worksheet Data Source - Refresh Support Data - the specified data source - Refresh Will update all worksheets using the same data source Dashboard Function Support Status Comment Filter Actions Support Dashboard - Actions - Add Action - Filter Highlight Actions Support Dashboard - Actions - Add Action - Highlight Go to URL Actions Support Dashboard - Actions - Add Action - Go to URL Go to Sheet Actions Support Dashboard - Actions - Add Action - Go to Sheet Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"security/":{"url":"security/","title":"Security","keywords":"","body":"Security In this chapter, we will introduce you the ACL management system in MDX for Kylin. Powered by Gitbook.            Last Modified： 2022-03-23 17:58:29 "},"security/role.en.html":{"url":"security/role.en.html","title":"Role","keywords":"","body":"Role This chapter will introduce what a Role is, how the Role decides the permission in MDX for Kylin, and how you can assign roles to users. User Role Default Role Assign Users to Role Manage Role Dataset Role The original MDX for Kylin only provided user-level semantic information permission control. It provided role-level semantic information access control. The following information needs attention: When a user is not assigned any dataset role or is configured with a user-level whitelist, the user does not have access to any dataset. The user must have at least access to a metric or a calculated metric in the data set, otherwise the user cannot connect to the data set. Users should have permissions on the items, tables in Kylin, otherwise they cannot connect to the dataset. When a user is assigned multiple roles, the final authority is a collection of whitelists at each role level and user level. That is, if the access authority of user A in the dataset is dimension 1 and measure 1, the access authority of role A is dimension 2 and Measure 2, and user A belongs to role A, then the final access right of user A is dimension 1, dimension 2, measure 1, and measure 2. Default Role MDX for Kylin initially comes with a default role, namely the Admin, which has access to all semantic information of all data sets. Admin role assignments can be viewed on Enter Management Page-> Dataset Roles page. Assign Users to Role You may go to Enter Management Page-> Dataset Roles to assign users to role in batch. A user will gain the permission as per role. When a user has multiple roles, the user will gain the union of permissions from all the roles. Manage Role You may go to Security - ->Role to create, edit, clone and delete Role. When you change the permission of the role, you consequently change the permission the user having that role. Note: Default Role cannot be edited or deleted. Powered by Gitbook.            Last Modified： 2022-03-23 17:59:31 "},"security/object_level_security.en.html":{"url":"security/object_level_security.en.html","title":"Object-level Security","keywords":"","body":"Object-level Security Understand Object There are several concepts that exist in MDX for Kylin that are considered as an object, such as Dimension, Measure, Calculated Measure, Hierarchy, Named Set. Understand Object-level Security In MDX for Kylin, you can configure the Object-level security for every single object in MDX for Kylin. some of these objects such as Calculated Measure or Named Set only exist in MDX for Kylin. that’s why their access needs to be controlled separately in MDX for Kylin. And there are use cases that user needs to control the Measure to be NOT accessible to a group of users but the Calculated Measure that references the Measure that rely on the measures are accessible to the same group of users. Status of Object-level Security There are 3 status of the access control: Status Product Behavior Unspecified By default, when access is not configured, user cannot see and query the object and the dataset. This default behavior can be modified by configuring the setting as mentioned in the next section below. Accessible When set as accessible, user can view and query the object. Not accessible When set as not accessible, user cannot view and query the object. Apply Object-level Security at Different Level User's access to a dataset is decided by the access collection of all objects on that dataset. User need to have access to at least one measure or calculated measure on a dataset to access that dataset. Note: Since Tableau has a built-in measure of count(*) by default, so user can access the dataset with only one dimension granted. But we do not recommend to use MDX for Kylin in this way. A new setting is introduced to configure whether the dataset and object are accessible by default. Once this setting is set to true, all the newly created datasets will be accessible to all users by default. Setting insight.dataset.allow-access-by-default Usage When true, all datasets are accessible by all users by default. When false, all datasets are not accessible by all users by default. Default Value False Server restart needed? Yes The existing dataset access list will remain the same. If insight.dataset.allow-access-by-default is set to true , newly dataset will be accessible by all users by default. Any objects that should not be exposed to certain users or groups should be restricted by Admin. Apply Object-level Access by Role Object-level access can be applied by user or role. You can create a role and assign user the role, and then grant object-level access by role to batch process the permission control. To understand more about role, please read Role. When a user is assigned to multiple roles, the user access should be combined with all the access the user get from the user-level and role-level. For example, if the user is granted to access dimension 1 and measure 1 on a dataset, the role the user belongs to is granted to access dimension 2 and measure 2, the user belongs to this role. Then the user can access dimension 1, dimensions 2, measure1 and measure 2. Apply Object-level Access by Role Object-level access can be applied by group. MDX for Kylin will periodically sync the user and group from Kylin, and the user in each group. If external user identity system is integrated with Kylin, for example, Azure Active Directory (Azure AD), the user and group in MDX for Kylin will come from external user identity system. The objects user can acesss will be decided by combining all the access or restriction the user could get from him/herself and all groups he/she belongs to. For example, user A is in group U1. User A has been restricted access to dimension D1 and measure M1 on dataset DA1, group U1 has been restricted access to dimension D2and measure M2. User A can access DA1 with no access to D1,D2,M1,M2. Configure Object-level Access List To configure object-level access list, please edit the dataset and go to access list to configure access list for Dimension, Measure, Calculated Measure and Named Set. Please read the step by step guide at Configure Access List Understand Object Visibility You can also configure the visibility of the object in the Dimension, Measure, Calculated Measure, and Named Set editor. When the object is set to be Not Visible, all the user will not be able to access the object. And when configuring the access of the object for a user and role, the access is automatically restricted and cannot be modified. The Difference Between Object Visibility and Object-level Access List Although the visibility and object-level access list may looks similar at first glance, they are effective in a different level. When a object is set to be Not Visible, it is hidden to all users when query from client tool, as if the object does not exist on the dataset. The object-level access list configured by user or role. So it gives admin the flexibility to restrict the access to certain sensible data to certain user or group of users. Powered by Gitbook.            Last Modified： 2022-03-25 15:23:19 "},"operations/":{"url":"operations/","title":"System Operation","keywords":"","body":"System Operation In this chapter, we will introduce you how to do system operation work. Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"operations/logging.en.html":{"url":"operations/logging.en.html","title":"System Log","keywords":"","body":"System Log After being successfully started, MDX for Kylin will create a directory named logs/. By default all logs generated during MDX for Kylin runtime will be stored in this directory. Log files Log files generated by MDX for Kylin is as follows: mdx.log The file is MDX access log generated by Semantic server, whose default logging level is INFO. semantic.log Semantic main log file, whose default logging level is INFO. semantic.out The standard output of Semantic will be redirected to this file. gateway.log Gateway main log file, whose default logging level is INFO. Log Configuration MDX for Kylin leverages log4j for logging configuration. Users can edit the log4j.properties file in the $MDX_HOME/conf/ directory to configure the logging behavior, such as the splitting rule and the single file size limit. For example: The default appender type of semantic.log and mdx.log files is org.apache.log4j.RollingFileAppender, which means creating a new file every time the old file reaches a designated size. To create a new file every day instead, you can set log4j.appender.file and/or log4j.appender.mdx to org.apache.log4j.DailyRollingFileAppender. log4j.appender.file.MaxFileSize and log4j.appender.mdx.MaxFileSize define the size limit mentioned above of any semantic.log file or mdx.log file respectively, default 268435456, i.e. 256MB. log4j.appender.file.MaxBackupIndex and log4j.appender.mdx.MaxBackupIndex define the max reserved amount of semantic.log files and of mdx.log files respectively, default 10. After modifications on the log4j.properties file, you should restart MDX for Kylin to apply your changes. Log debugging The MDX log contains the caller information of the query ID and API, which can be used to increase the debugging ability. Query ID, MDX query issued by Business Intelligence tools, will generate a unique query ID in MDX, you can trace the relevant information according to the query ID. The caller information of API can be used to locate the user. Powered by Gitbook.            Last Modified： 2022-03-23 17:47:53 "},"operations/diagnosis.en.html":{"url":"operations/diagnosis.en.html","title":"Diagnosis Package","keywords":"","body":"Diagnostic Package System Configuration Generate diagnostic package from web page Generate diagnostic package from shell Multi-node deployment configuration example MDX for Kylin configuration item Configuration requirements for Nginx routing rules Diagnostic Package Content Attention information System Configuration MDX for Kylin requires you to properly configure each node during installation. For details, see the manual Installing in Linux Environment Generate diagnostic package from web page The system diagnostic package contains diagnostic information for the entire MDX for Kylin instance. To generate a system diagnostic package requires the following operations Log in to MDX for Kylin with Kylin's administrator account Click the Enter Management button in the upper right corner Select time range, you can choose Today, Last 3 days, Last 7 days, Last 1 month, or custom time range Note: The time range selected must include the time period during which MDX for Kylin experienced the problem. Select server Note: If MDX for Kylin is deployed on multiple nodes, you need to determine the problem node and choose the correct server name when generating the system diagnostic package, otherwise the system diagnostic package may not contain information about the problem. You can then download the diagnostic package. Generate diagnostic package from shell You may also generate a system diagnostic package by executing script with following operations You can enter the following directory $MDX_HOME/semantic-mdx/scripts/, execute the following command ./diagnose_package_offline.sh Start time: 13 bit timestamp; End time: 13 bit timestamp MDX ip: MDX ip; MDX port: MDX port; whether dump mysql database: Enter y to indicate that you need to dump mysql metadata database, enter n to indicate that you don’t need it; Diagnostic package output path: The diagnostic package output path; The following example of script execution shows that the mdx instance of port 7080 of localhost node is packaged, the time range is 2021-03-07 - 2021-03-08, the MySQL database needs to be dump, and the diagnostic package output path is '/ usr / local/`: ./diagnose_package_offline.sh 1615046400000 1615132800000 localhost 7080 y /usr/local/ Multi-node deployment configuration example MDX for Kylin configuration item You need to add the configuration item insight.mdx.cluster.nodes=IP1:Port1,IP2:Port2 in the[MDX installation directory]/conf/insight.properties file of each MDX node, which will all in the cluster The IP and Port information of the MDX node is added to the configuration file. Configuration requirements for Nginx routing rules According to the custom header:x-Host and x-Port to forward the request to the specified node to ensure that multiple nodes can be notified on the page to generate a diagnostic package and download it. You need to add routing rules in the Nginx configuration file: For example, for two MDX for Kylin nodes of A and B on two machines, whose IP and Port are IP_A: Port_A andIP_B: Port_B, you need to add them in Nginx Add the following configuration to the configuration file: upstream nodes { server ip_A:port_A; server ip_B:port_B; } server { listen port_N; server_name ip_N; #charset utf-8;(Recommended Use) #Enable custom header underscores_in_headers on; location / { if ($http_x_host = '') { #Requests without custom headers can be sent to any node proxy_pass http://nodes; break; } #For requests containing custom headers, forward them to the specified node proxy_pass http://$http_x_host:$http_x_port; break; } } The forwarding logic at this time is shown in the following figure: Diagnostic Package Content The system diagnostic package contains following content： conf_{timestamp} directory indicators.json : MDX calculated measure template file, recording the template definitions of calculated measures insight.properties : MDX configuration file set-jvm.sh : MDX JVM parameter configuration file (which can also be modified in insight.properties file) startup.sh : MDX boot script logs_{timestamp} directory gc-{timestamp}.log : MDX JVM GC activity log mdx.log : MDX query log file，merging content from several MDX query log files in specified time period (Content is sorted by original log file last modified time, separated by \"Content above from file : \") semantic.log : MDX API call log file, merging content from several MDX API call log files in specified time period (For example, synchronizing information from Kylin, accessing dataset from web GUI) Project-{project}_Dataset-{dataset}.json : several files, json files of datasets which can be used to import dataset from web GUI (Requires MDX connecting to a proper Kylin) jstack.log : MDX process ID, core file, Java stack information of remote debugging service jmap.log : MDX process memory mapping information and heap space allocation top.log : The resource usage status of each process in the system mos_scripts.out : Distributed MDX startup logs information about the process of copying server Hadoop-related configuration files and replacing related conflicting jar packages mdx_env ：MDX running environment information file, including detail information from versions of MDX, JDK to System sync_info ：MDX synchronization task information file, including current connection user and current synchronization task status schema_{timestamp} directory {user}_{project}.xml : several files, the schema information of datasets (One dataset may appear to be inconsistent to different users due to visibility settings) dataset_{timestamp} directory Project-{project}_Dataset-{dataset}.json : several files, json files of datasets, which can be imported from the front-end interface (requires connection to the corresponding Kylin) spark_logs_{timestamp} directory app-{applicationId} directory events_{number}_app-{applicationId}_{startTime}_{endTime} : several files, Spark related logs Attention information In the multi-node deployment configuration example, Nginx is configured as an example configuration. The specific routing method and filtering range can be adjusted according to actual needs. If the versions of multiple MDX for Kylin nodes are inconsistent, there may be problems in reading js andcss files after Nginx forwarding, so you must ensure that the MDX for Kylin version of each node is consistent. Because the IP and Port information given in the configuration file is used when requesting the diagnostic package, please do not use localhost, which may cause Nginx forwarding failure and the request to fail. Each time a diagnostic package is newly generated, it will clear the diagnostic package generated 7 days ago. Powered by Gitbook.            Last Modified： 2022-03-23 17:51:47 "},"operations/error_code.en.html":{"url":"operations/error_code.en.html","title":"Error Code","keywords":"","body":"Error Code Error Naming Rules In order to make the error message more concise, clear and traceable, the error codes are divided according to the service module and business category, and the format is: MDX-AABBCCCC AA: Service modules, such as system service, semantic service, MDX service, etc. BB: Business categories under service module. CCCC: The specific reason for the error, such as the string length exceeds the limit, the query result is too long, etc. The specific service modules and business category list are as follows. Service Module Business Category 01 System Service 0102 System Config User 01 System Service 0104 Diagnose Package 01 System Service 0105 Sync Task 01 System Service 0106 User / Group / Role 01 System Service 0107 DB 01 System Service 0108 System Tool 02 Semantic Service 0201 Kylin API CALL 02 Semantic Service 0202 Dataset 03 MDX Service 0301 Schema 03 MDX Service 0302 XMLA 03 MDX Service 0303 Query 03 MDX Service 0304 Rewrite / Reject 04 Authority 0401 Authentication 04 Authority 0402 Authorization 04 Authority 0403 User Delegation Error Code List Error Code Error Message MDX-00000001 Internal error MDX-01020001 Sync user not configured MDX-01020002 Property parsing error MDX-01040001 Not generating diagnostic package on current node MDX-01040002 Dataset not found in diagnostic package generation MDX-01040003 Diagnostic package generation node error MDX-01040004 Dataset serializing error in diagnostic package generation MDX-01040005 Diagnostic package file not found MDX-01040006 Diagnostic package downloading error MDX-01050001 Invalid sync user information MDX-01050002 Illegal sync user information updating request MDX-01060001 Invalid role name MDX-01060002 Duplicate role name MDX-01060003 User error MDX-01060004 Role not exists MDX-01060005 User not exists MDX-01060006 Deleting role with users assigned MDX-01060007 Invalid role MDX-01060008 Cannot delete the ADMIN role MDX-01060009 Role ID and name not match MDX-01060010 Adding / Deleting more than 1 user to / from a role MDX-01070001 Dataset record insertion error MDX-01070002 MDX_QUERY record insertion error MDX-01070003 SQL_QUERY record insertion error MDX-01070004 Role record insertion error MDX-01070005 Role record deleting error MDX-01080001 User password encryption error MDX-01080002 User password decryption error MDX-01080005 set-jvm script reading error MDX-01080006 set-jvm script writing error MDX-01080007 MDX properties file reading error MDX-01080008 MDX properties file writing error MDX-01080009 MDX version format error MDX-02010002 Fetching Kylin tables description error MDX-02010003 Fetching Kylin models description error MDX-02010004 Fetching Kylin project list error MDX-02010005 Fetching Kylin user list error MDX-02010006 Fetching Kylin users by project error MDX-02010007 Fetching Kylin users by group error MDX-02010008 Fetching Kylin user authorities error MDX-02010009 Fetching Kylin project access information error MDX-02010010 HTTP request with empty URI MDX-02010011 Building URI instance error MDX-02010012 Kylin host / port not configured MDX-02010013 Kylin connection error MDX-02010014 Kylin HTTP request failed MDX-02010015 Reading Kylin HTTP response error MDX-02020002 Fetching dataset by project error MDX-02020003 Fetching dataset by ID error MDX-02020004 Duplicate dataset name in project MDX-02020006 Duplicate dimension table name MDX-02020007 Duplicate dimension table alias MDX-02020008 Duplicate measure alias MDX-02020009 Duplicate calculated measure name MDX-02020010 Duplicate namedset name MDX-02020011 Folder name format error MDX-02020012 Calculate measure validation error MDX-02020014 Illegal default member validation request MDX-02020015 Unsupported dataset type MDX-02020016 MDX server connection error MDX-02020017 Dataset connection error MDX-02020018 Invalid dimension usage MDX-02020019 Hierarchy contains column from another table MDX-02020020 Fetching dimension table by model error MDX-02020021 Fetching dimension by dimension table and model error MDX-02020022 Fetching measure by model error MDX-02020023 Fetching calculated measure error MDX-02020024 Fetching namedset error MDX-02020025 Invalid dataset found MDX-02020026 Kylin project error MDX-02020027 Invalid dataset list fetching request MDX-02020028 Invalid or expired dataset export token MDX-02020029 Dataset export compression error MDX-02020030 Invalid dataset import request MDX-02020031 Dataset import decompression error MDX-02020032 Invalid dataset Zip file MDX-02020033 No valid dataset in uploaded file MDX-03010003 Datasource file not found MDX-03010004 Creating datasource file error MDX-03010005 Creating schema directory error MDX-03010006 Creating schema file error MDX-03010007 Serializing schema file error MDX-03020002 Drillthrough only supports tabular data format MDX-03020003 Drillthrough error MDX-03020005 URL format of XML/A request error MDX-03030001 MDX dataset not found MDX-03030002 MDX object not found MDX-03030003 MDX member resolving error MDX-03030004 MDX statement parsing error MDX-03030014 Hierarchy in calculated member not found MDX-03030015 Wrong return type of axis expression MDX-03030016 Wrong return type of member expression MDX-03030017 Wrong return type of set expression MDX-03030018 Missing function argument MDX-03030019 Wrong function argument type MDX-03030020 Unknown MDX argument MDX-03030021 MDX member not found MDX-03030022 Wrong return type of default member expression MDX-03030023 Invalid member encountered MDX-03030024 No signature matching function found MDX-03030025 More than one signature matching function found MDX-03030031 Hierarchy appears on multiple axes MDX-03030032 Function arguments do not belong to the same hierarchy MDX-03030033 Function arguments do not belong to a time dimension table MDX-03030034 Invalid axis number MDX-03030035 Duplicate axis name MDX-03030037 Tuple contains members of the same hierarchy MDX-03030038 Argument type error of VisualTotals function MDX-03030042 Invalid data type cast target MDX-03030043 Function does not support NULL member argument MDX-03030045 Cannot use this function because no time dimension has been defined MDX-03030046 Did not explicitly specify the target hierarchy MDX-03030047 No accessible element in the hierarchy MDX-03030050 Drillthrough disabled MDX-03030051 Performing drillthrough over an unknown member MDX-03030054 Properties missing in connection string MDX-03030055 Hierarchy belong to a time dimension table not defined as time type MDX-03030056 Hierarchy not belong to a time dimension table defined as time type MDX-03030064 Calculated member belongs to an invalid dimension MDX-03030068 Duplicate calculated member name MDX-03030076 UDF class not found MDX-03030077 Illegal UDF class definition MDX-03030079 Duplicate UDF name MDX-03030080 Duplicate namedset name MDX-03030081 Invalid calculated measure or namedset expression in dataset MDX-03030087 Invalid aggregator MDX-03030090 Descendants function argument type error MDX-03030092 Cannot infer type of set elements MDX-03030094 Hierarchy definition contains no level MDX-03030095 Hierarchy definition contains levels with duplicate name MDX-03030103 Crossjoin result size exceeds limit MDX-03030104 Query result size exceeds limit MDX-03030105 Number of members to be read exceeds limit MDX-03030106 Number of measure values to be read exceeds limit MDX-03030107 Query canceled MDX-03030108 Query timeout MDX-03030109 Number of calculation iterations exceeds limit MDX-03030110 Hierarchy contains no member MDX-03030157 Native optimization cannot be applied to function MDX-03030158 Query resources recycling error MDX-03030159 Number of concurrent MDX queries exceeds limit MDX-03030160 Number of concurrent SQL queries from Mondrian engine exceeds limit MDX-03030162 Number of concurrent SQL queries from Sniper engine exceeds limit MDX-03030163 RolapSchema instance recycling error MDX-03030164 MondrianServer instance recycling error MDX-03030165 RolapConnection instance recycling error MDX-03030166 Aggregation query execution cancelled due to time out MDX-03030167 Aggregation query execution cancelled MDX-03030168 SniperResult construction cancelled MDX-03040003 MDX cluster nodes not configured MDX-03040004 Cannot rewrite expression MDX-03040005 Expression is not a function expression MDX-03040006 Expression is not a specified function expression MDX-03040007 Expression is not an identifier MDX-03040008 Invalid namedset Union function expression MDX-03040009 Invalid namedset Except function expression MDX-04010001 User login authentication error MDX-04010002 Invalid basic authentication information MDX-04010003 Invalid cookie authentication information MDX-04010004 Invalid gateway authentication information MDX-04010005 Authentication information missing MDX-04010006 User name / password error MDX-04010007 User locked MDX-04010008 Kylin authentication failed MDX-04010009 User disabled MDX-04020001 Not an ADMIN user MDX-04020002 Not an ADMIN user or project admin user MDX-04020003 User has no project access MDX-04020004 No dataset available MDX-04020005 All datasets in project are broken MDX-04020006 User has no access to any dataset in project MDX-04030001 User delegation feature not enabled MDX-04030002 Empty delegation user parameter MDX-04030003 Delegation user parameter too long MDX-04030004 Invalid delegation user parameter MDX-04030005 Delegation user permissions inadequate Powered by Gitbook.            Last Modified： 2022-03-25 15:25:35 "},"operations/configuration.en.html":{"url":"operations/configuration.en.html","title":"Task Configuration","keywords":"","body":"Task configuration Now MDX for Kylin will periodically synchronize data from its connected Kylin. You can use the system administrator account of Kylin to enter the administrator page to view the task status. Enter the parameter page, you can synchronize the running status of the task and the last time the task ran. If the task is stopped due to unexpected circumstances, such as Kylin is down, you can click the Restart Sync Task button to restart the Sync task. If you modify the user name or password of the system administrator in Kylin that is also performing synchronization tasks, you can click the Edit User Information button to change the user name and password. Powered by Gitbook.            Last Modified： 2022-03-25 11:20:27 "},"operations/metadata.en.html":{"url":"operations/metadata.en.html","title":"Metadata Import and Export","keywords":"","body":"Metadata import and export All metadata and query history of MDX instances are stored in the database, so backing up and restoring the database is a very important part of the daily operation and maintenance. MDX currently supports MySQL and PostgreSQL as metadata storage. Among them, MySQL recommends 5.7 and later versions, and PostgreSQL recommends 10.1 and later versions. Metadata export MySQL MySQL is exported through the mysqldump command. For security reasons, it is recommended to leave the -P option blank and enter the password in subsequent interactive input. mysqldump -h[insight.database.ip] -P[insight.database.port] -u[insight.database.username] -p[password] [insight.database.name] > backup.sql Example: mysqldump -hlocalhost -P3306 -uroot -proot insight > backup.sql PostgreSQL PostgreSQL is exported through the pg_dump command. Pay attention to entering the password in the interactive input that follows. pg_dump -h [insight.database.ip] -p [insight.database.port] -U [insight.database.username] -d [insight.database.name] -W -F c -b -v -f backup.bak Metadata import MySQL MySQL uses the mysql command to import the metadata that has been backed up. mysql -h[insight.database.ip] -P[insight.database.port] -u[insight.database.username] -p[password] [insight.database.name] If the specified database does not exist, first create the corresponding database through the MySQL client tool, or the command line. create database [insight.database.name]; PostgreSQL PostgreSQL uses the pg_restore command to import the backup files. pg_restore -h [insight.database.ip] -p [insight.database.port] -U [insight.database.username] -W -d [insight.database.name] -v backup.bak If the specified database does not exist, create the database through the createdb command first. createdb [insight.database.name] Appendix: Data Sheet Description Table Features calculate_measure Calculated measure definition common_dim_relation Dimension relationship definition custom_hierarchy User-defined hierarchy dataset Dataset dim_table_model_rel Model relationship definition mdx_info MDX information mdx_query MDX query history measure_group Measure group definition named_dim_col Dimension column definition named_dim_table Dimension table definition named_measure Measure definition named_set Named set definition role_info Dataset role information sql_query SQL query history user_info User information Powered by Gitbook.            Last Modified： 2022-03-25 14:45:55 "},"configuration/":{"url":"configuration/","title":"System Configuration","keywords":"","body":"System Configuration In this chapter, we will introduce you system configurations, such as configuration files, basic configuration parameters, and more. Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"configuration/files.en.html":{"url":"configuration/files.en.html","title":"Configuration Files","keywords":"","body":"Configuration Files This section introduces configuration files in MDX for Kylin. File Name Description insight.properties This is the global configuration file, which contains almost all configuration properties about MDX for Kylin. log4j2.xml This is the log4j configuration file, which contains logging configurations. set-jvm.sh This file is the JVM configuration file of MDX for Kylin. Powered by Gitbook.            Last Modified： 2022-03-23 17:33:39 "},"configuration/properties.en.html":{"url":"configuration/properties.en.html","title":"Basic Configurations","keywords":"","body":"Basic Configurations The file insight.properties is located in the directory conf. This section details some configurations in the property file. After modifying configurations, you should restart the system to apply the changes. 1. Common configuration 2. Semantic Service module configuration 3. MDX module configuration 1. Common configuration Properties Description insight.kylin.host This parameter specifies the IP address or Hostname of the Kylin server to be connected,such as 127.0.0.1.The default islocalhost insight.kylin.port This parameter specifies the port of the Kylin server that needs to be connected, default is7070 insight.semantic.context-path This parameter specifies the context-path in MDX for Kylin, default is/ insight.kylin.ssl MDX for Kylin access Kylin is https enabled, default isfalse insight.database.type MDX for Kylin metadata database type, default ismysql insight.database.useSSL Does MDX for Kylin Metabase use SSL connection, default isfalse insight.database.ip The IP address or Hostname of the Metabase that MDX for Kylin needs to connect to, default islocalhost insight.database.port The port of MDX for Kylin Metabase that MDX for Kylin needs to connect to, default is3306 insight.database.name MDX for Kylin needs to connect to Metabase name, default isinsight insight.database.username MDX for Kylin needs to connect to the user name of the metabase, default isroot insight.database.password This configuration is used to generate diagnostic packets. This configuration item requires you to fill in the IP and Port information of all nodes in the MDX for Kylin cluster. If you configure multiple nodes, separate them with commas, such as insight.mdx.cluster.nodes=IP_1:Port_1,IP_2:Port_2 2. Semantic Service module configuration Properties Description insight.semantic.datasource-version This parameter specifies the version number of Kylin connected to the semantic service in MDX for Kylin. Only support 2 insight.semantic.port This parameter specifies the port of the semantic service in MDX for Kylin, default is7080 insight.semantic.meta.sync.project-page-size This parameter specifies the maximum number of projects that can be obtained in a single page when the semantic service in MDX for Kylin synchronizes projects , default is1000 insight.dataset.verify.interval.count This parameter specifies the time interval for the semantic service in MDX for Kylin to verify the data set, unit: 20 seconds, for example: 2 means 2 * 20 = 40 seconds. It takes effect only when insight.dataset.verify.enable is configured as true, default is15, which is 5 minutes insight.dataset.verify.enable This parameter specifies whether the semantic service in MDX for Kylin enables the data set synchronization verification function, default istrue insight.semantic.model.version.verify This parameter specifies whether the semantic service in MDX for Kylin enables metadata model version checking, default isfalse insight.semantic.startup.sync.enable This parameter specifies whether the semantic service in MDX for Kylin starts the synchronization task when the startup service is enabled, default istrue insight.semantic.segment.sync.enable This parameter specifies whether the semantic service in MDX for Kylin is enabled. Check Kylin's Segment changes, and clear MDX for Kylin cache according to Segment changes, default istrue insight.semantic.meta.sync.user-page-size This parameter specifies the size of each page when the semantic service in MDX for Kylin synchronizes user information from Kylin, default is100000 insight.semantic.cookie-age This parameter specifies the lifetime of the user cookie when accessing the semantic service Web UI in MDX for Kylin, default is86400, which is 86400 seconds insight.semantic.checkout.dataset.connect This parameter specifies whether to check the connection when MDX for Kylin data set is saved, default istrue insight.semantic.connect.timeout The connection timeout time of MDX for Kylin to Kylin, in milliseconds, default is5000 insight.semantic.socket.timeout MDX for Kylin connection socket timeout time for Kylin connection, unit is milliseconds, default is10000 insight.semantic.connection.request.timeout The connection request timeout time of MDX for Kylin to Kylin, the unit is milliseconds, default is8000 insight.semantic.max-http-header-size The maximum length of MDX for Kylin's http request header, the unit is kb, default is8192 insight.semantic.meta.keep.mdx-query.max.rows The maximum number of mdx query history records in the system，default is 1000000 insight.semantic.segment.sync.enable whether to synchronize the segment information of Kylin, default is true insight.kylin.only.normal.dim.enable MDX for Kylin only fetch normal dimension from Kylin when the join condition is many-to-many, default is false, current kylin not support many-to-many insight.semantic.zookeeper.enable Whether enable to register server info to ZooKeeper, default is false insight.semantic.zookeeper.address The address of ZooKeeper, default is localhost:2181 insight.semantic.zookeeper.node.path The node path in ZooKeeper, default is /mdx insight.semantic.zookeeper.session.timeout The session timeout with ZooKeeper, default is 30000 insight.semantic.reject.enable This parameter is used to specify whether to enable the interception strategy. After enabling, the query request that meets the interception strategy will be rejected. The default is false. 3. MDX module configuration Properties Description insight.mdx.servlet-path This parameter specifies the servlet path in MDX for Kylin, default is/mdx/xmla/ insight.mdx.gateway-path This parameter specifies the gateway servlet path in MDX for Kylin, default is/mdx/xmla_server/ insight.mdx.optimize-enabled This parameter specifies whether to enable statement optimization for mdx in MDX for Kylin, default istrue insight.mdx.calculate-total-need This parameter specifies whether mdx in MDX for Kylin calculates global summaries and subtotals, default istrue insight.mdx.schema.create-from-dataset This parameter specifies whether mdx in MDX for Kylin will create a schema from the dataset, default istrue insight.mdx.schema.refresh.disable This parameter specifies whether to disable refresh for mdx in MDX for Kylin, default isfalse insight.mdx.sql.orderby.enable This parameter specifies whether to enable SQL orderby in MDX for Kylin, default istrue insight.mdx.sql.calcite-engine-hint.enable This parameter specifies whether Kylin is forced to use the Calcite engine when MDX for Kylin is connected to Excel and queries containing similar to are performed. Answer, default isfalse insight.mdx.skip-axis-nonempty-check This parameter specifies whether to skip the null value check when calculating the axis in MDX for Kylin, default istrue insight.mdx.mondrian.olap.case.sensitive This parameter specifies whether the mdx statement in MDX for Kylin is case sensitive, default istrue insight.mdx.mondrian.rolap.maxQueryThreads This parameter specifies the maximum number of query threads for mdx in MDX for Kylin, default is50 insight.mdx.mondrian.query.sql.page.size This parameter specifies the maximum number of records obtained in a single page during mdx paging operation in MDX for Kylin, default is10000 insight.mdx.mondrian.rolap.generate.formatted.sql This parameter specifies whether mdx in MDX for Kylin should format the output sql statement, default isfalse insight.mdx.mondrian.rolap.star.disableCaching This parameter specifies whether to disable caching for mdx in MDX for Kylin, default isfalse insight.mdx.mondrian.rolap.ignoreInvalidMembers This parameter specifies whether mdx in MDX for Kylin ignores invalid members, default istrue insight.mdx.mondrian.rolap.ignoreInvalidMembersDuringQuery This parameter specifies whether mdx in MDX for Kylin ignores invalid members in queries, default istrue insight.mdx.mondrian.cache.expire-minute This parameter specifies that the mdx cache expiration time in MDX for Kylin is several minutes, default is720 insight.mdx.mondrian.olap.pure-axes-calculate.source.type This parameter specifies the dimensional data source type when calculating the mdx axis in MDX for Kylin. The optional parameters are: SNAPSHOT, PARTIAL_CUBE, ALL_CUBE, default isPARTIAL_CUBE insight.mdx.mondrian.olap.pure-axes-calculate.cardinality-gap This parameter specifies the maximum cardinality (exclusive) of dimension table that any SQL on a single dimension table in MDX for Kylin is forced to behavior like insight.mdx.mondrian.olap.pure-axes-calculate.source.type=SNAPSHOT, the special value -1 means always forced and 0 means not forced, default is -1 insight.mdx.mondrian.olap.pure-axes-calculate.total-cardinality-gap This parameter specifies the maximum cardinality (exclusive) of any total-axis SQL result that the SQL is forced to behavior like insight.mdx.mondrian.olap.pure-axes-calculate.source.type=SNAPSHOT, the special value -1 means always forced and 0 means not forced, default is 0 insight.mdx.mondrian.olap.support-non-default-all-member This parameter specifies whether mdx in MDX for Kylin supports non-default all members, default isfalse insight.mdx.mondrian.olap.cell.calc.join-dims This parameter specifies whether mdx in MDX for Kylin joins other dimension tables when calculating the cell, default istrue insight.mdx.mondrian.rolap.return-null-when-divide-zero This parameter specifies whether mdx in MDX for Kylin returns 0 when the divisor is 0, default istrue insight.mdx.mondrian.rolap.optimize-tuple-size-in-aggregate.enable This parameter specifies whether to enable tuple size optimization during mdx aggregation in MDX for Kylin, default isfalse insight.mdx.mondrian.rolap.calculate-cell-when-non-measure This parameter specifies whether to aggregate cell data when mdx in MDX for Kylin has no measurement, default isfalse insight.mdx.mondrian.sql.fetch-dim-from-snapshot This parameter specifies whether mdx in MDX for Kylin prefers to pull dimension data from snapshots, default istrue insight.mdx.mondrian.sql.enableOrderBy This parameter specifies whether to add collation when querying mdx sql in MDX for Kylin, default istrue insight.mdx.mondrian.jdbc.timezone This parameter specifies the time zone of the mdx jdbc query service in MDX for Kylin, default isGMT+8:00 insight.mdx.mondrian.schema.init-level-group-order-by-key This parameter specifies whether mdx in MDX for Kylin is to initialize the level by key value, default istrue insight.mdx.mondrian.query.filter-pushdown.enable This parameter specifies whether mdx in MDX for Kylin is enabled for filtering pushdown, default istrue insight.mdx.mondrian.query.filter-pushdown.in-clause-max-size This parameter specifies the maximum filtering pushdown number of mdx clauses in MDX for Kylin, default is20 insight.mdx.mondrian.query.sql.customize.enable This parameter specifies whether to enable customization of mdx in MDX for Kylin sql, default istrue insight.mdx.mondrian.query.sql.customize.class This parameter specifies the implementation class of mdx CustomizeSqlQuery in MDX for Kylin, default isio.kylin.mdx.web.mondrian.rolap.sql.KylinSqlQuery insight.mdx.mondrian.query.sql.max.size This parameter specifies the maximum number of query rows for mdx sql query in MDX for Kylin, default is50000 insight.mdx.mondrian.rolap.star.disableLocalSegmentCache This parameter specifies whether to enable local cache for the segments queried by mdx in MDX for Kylin, generate specific cache and find block cache SPI, default isfalse insight.mdx.mondrian.olap.triggers.enable This parameter specifies whether to notify Mondrian when the configuration properties of mdx in MDX for Kylin change?true insight.mdx.mondrian.rolap.nonempty This parameter specifies whether mdx in MDX for Kylin needs non-empty setting for each query axis, default isfalse insight.mdx.mondrian.rolap.compareSiblingsByOrderKey This parameter specifies whether mdx in MDX for Kylin checks sibling members and pulls members from the original expression for verification, default isfalse insight.mdx.mondrian.rolap.maxSqlThreads This parameter specifies the maximum number of Mondrian instances that mdx supports SQL in MDX for Kylin, default is100 insight.mdx.mondrian.rolap.maxCacheThreads This parameter specifies the maximum number of threads per Mondrian instance when mdx in MDX for Kylin supports caching, default is100 insight.mdx.mondrian.rolap.queryTimeout Set the timeout time of MDX query, in seconds, default is300 insight.mdx.mondrian.olap.NullMemberRepresentation This parameter specifies how to display the mdx in MDX for Kylin when the result is empty, default is#null insight.mdx.mondrian.visualtotal.solve.order This parameter specifies the mdx setting total order in MDX for Kylin, default is-1 insight.mdx.mondrian.cross-join.native.enable This parameter specifies whether to use Cross Join natively when MDX for Kylin sends queries, default istrue insight.mdx.mondrian.filter.row.limit This parameter specifies whether to add the Limit condition when MDX for Kylin is connected to Excel and perform Filter operation. The default is 0, which means that the Limit condition is not added. If it is 10, the SQL clause of limit 10 will be added to the query. Note: The parameters here must be written in positive integer, otherwise it will cause MDX query execution to report an error. Note: After setting this parameter, it may result in the inverse selection operation of the drop-down list in Excel Data incomplete, default is0 insight.mdx.mondrian.result.limit This parameter is used to specify the number of rows returned by the check SQL and the number of cells. If the limit is exceeded, an error will be returned directly. , default is100000 insight.mdx.mondrian.mdprop.mdx.subqueries This parameter is used to indicate the mdx support level for subqueries. MDX defaults to 2 and does not support subqueries. If you need MDX to support subqueries, you can set it to 31, which is a beta version. insight.mdx.mondrian.query.sql.model-priority-hint.enable This parameter enables whether to specify model priorities in SQL statements.If enabled, the model referenced by the dataset will be specified as the high priority model in the SQL statements. The default value is false. Please note that model priorities will take effect only if the querying measures are all from the same Kylin model. insight.mdx.xmla.support-rowset-visibilities This property is used to define whether to enable the support for HIERARCHY_VISIBILITY and MEASURE_VISIBILITY restrictions of XML/A Schema. The default value of this property is false. After this property has been enabled, previous Excel files with pivot tables must be fixed, otherwise Excel will not work properly with these files. insight.mdx.mondrian.query.limit This parameters is that maximum number of simultaneous queries the system will allow, default is 1000. Powered by Gitbook.            Last Modified： 2022-03-25 11:19:34 "},"configuration/jvm.en.html":{"url":"configuration/jvm.en.html","title":"JVM Configurations","keywords":"","body":"JVM Configurations You can configure the JVM in the configuration file $MDX_HOME/semantic-mdx/set-jvm.sh. The default configuration uses less memory, you can adjust it according to your actual situation. The default value of this configuration is as follows: jvm_xms=-Xms3g jvm_xmx=-Xmx16g You can change it to modify its configuration. jvm_xms=-Xms3g # Initial memory of JVM when MDX for Kylin starts. jvm_xmx=-Xmx16g # The maximum memory of JVM when MDX for Kylin starts. In addition, you can also modify it in $MDX_HOME/conf/insight.properties, which has a higher priority than the above set-jvm.sh file. An example is as follows insight.mdx.jvm.xms=-Xms3g insight.mdx.jvm.xmx=-Xmx16g When MDX for Kylin is started, the system will load the parameters defined in the configuration file $MDX_HOME/semantic-mdx/set-jvm.sh by default. If you modify the parameters, you need to restart MDX for Kylin to make the new parameter values take effect. Powered by Gitbook.            Last Modified： 2022-03-23 17:40:14 "},"rest/":{"url":"rest/","title":"Rest API","keywords":"","body":"REST API MDX for Kylin provides a series of REST APIs for system integration. With such APIs, a 3rd-party application is easy to integrate with MDX for Kylin. Powered by Gitbook.            Last Modified： 2022-03-23 17:28:45 "},"rest/authentication.en.html":{"url":"rest/authentication.en.html","title":"Authentication API","keywords":"","body":"Authentication API All APIs in MDX for Kylin are based on Basic Authentication authentication mechanism. Basic Authentication is a simple access control mechanism, which encodes account and password information based on Base64. Adding these information as request headers to HTTP request commands, the back-end will decode the account and password information from the request header for authentication. Take the default account and password of MDX for Kylin, ADMIN:KYLIN, as an example, after encoding, the corresponding authentication information would be Basic QURNSU46S1lMSU4=, and the corresponding HTTP header information is Authorization: Basic QURNSU46S1lMSU4=. Powered by Gitbook.            Last Modified： 2022-03-23 17:29:02 "},"rest/dataset.en.html":{"url":"rest/dataset.en.html","title":"Dataset API","keywords":"","body":"Dataset API This section introduces the Rest APIs related to the dataset. Export Import Update Fetch List Export GET http://:/api/dataset Request Parameters project datasetType datasetName Request Headers Basic Auth authentication Content-Type: application/json Curl examples are as follows: curl -X GET \\ 'http://localhost:7080/api/dataset?project=learn_kylin&datasetType=mdx&datasetName=test' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' \\ -H 'Content-Type: application/json;charset=utf8' \\ -o export_dataset.json Command interpretation: call the interface, save the json data into the current directory's export_dataset.json Import POST http://:/api/dataset?createType=import Basic Auth authentication Content-Type: application/json createType:import fixed value HTTP Body is a json file of dataset Curl examples are as follows: curl -X POST \\ 'http://localhost:7080/api/dataset?createType=import' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' \\ -H 'Content-Type: application/json;charset=utf8' \\ -d \"@export_dataset.json\" Command explanation: Call the interface to import the data set, json is the export_dataset.json file in the current directory. Update PUT http://:/api/dataset Basic Auth authentication Content-Type: application/json HTTP Body is a json file of dataset Curl examples are as follows: curl -X PUT \\ 'http://localhost:7080/api/dataset' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' \\ -H 'Content-Type: application/json;charset=utf8' \\ -d \"@export_dataset.json\" Command explanation: Call the interface to import the data set, json is the export_dataset.json file in the current directory. Fetch List GET http://:/api/datasets/MDX/ Basic Auth authentication Content-Type: application/json Curl examples are as follows: curl -X GET \\ 'http://localhost:7080/api/datasets/MDX/learn_kylin' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' \\ -H 'Content-Type: application/json;charset=utf8' \\ -o dataset.json Powered by Gitbook.            Last Modified： 2022-03-23 17:30:07 "},"rest/role.en.html":{"url":"rest/role.en.html","title":"Dataset Role API","keywords":"","body":"Dataset Role API For the operations related to the role of the dataset, you can use the related APIs described in this section. Related operations include: Add roles Update roles Query roles Delete roles Add a single user to an existing role Deleting a single user from an existing role Querying the Role List Add roles This API is used to add dataset roles and add users to it. POST http://host:port/api/role Basic Auth Content-Type: application/json The HTTP Body is json and the content is as follows: { \"name\": \"[role name]\", \"contains\": [ { \"type\": \"user\", \"name\": \"[user name 1]\" }, { \"type\": \"user\", \"name\": \"[user name 2]\" } ], \"description\": \"[role description]\" } Curl example is as follows: curl -X POST \\ 'http://host:port/api/role' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' \\ -H 'Content-Type:application/json;charset=utf8' \\ -d '{\"name\":\"role_test\",\"contains\":[{\"type\":\"user\",\"name\":\"ADMIN\"}],\"description\":\"test\"}' Command explanation: Invoke the interface and add the role of the dataset containing the ADMIN user: role_test returned messages { \"status\": 0, \"data\": { \"role_id\": 2 } } Explanation of the returned information: status is 0 for success, role_id is the role id. Update roles This API is used to batch update user information in the dataset PUT http://host:port/api/role/{roleId} URL Path Variable roleId: The value is role id Basic Auth Content-Type: application/json The HTTP Body is json and the content is as follows: { \"name\": \"[role name]\", \"contains\": [ { \"type\": \"user\", \"name\": \"[user name 1]\" }, { \"type\": \"user\", \"name\": \"[user name 2]\" } ], \"description\": \"[role description]\" } Curl example is as follows: curl -X PUT \\ 'http://host:port/api/role/2' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' \\ -H 'Content-Type:application/json;charset=utf8' \\ -d '{\"name\":\"role_test\",\"contains\":[{\"type\":\"user\",\"name\":\"ADMIN\"}],\"description\":\"test_update\"}' Command explanation: Call the interface to fully update the role and description of the dataset named role_test. returned messages { \"status\": 0, \"data\": { \"role_id\": 2 } } Explanation of returned information: status is 0 for success, role_id is role id. Query roles GET http://host:port/api/role/ {roleId} URL Path Variable roleId: The value is role id Basic Auth Content-Type: application/json Curl example is as follows: curl -X GET \\ 'http://host:port/api/role/2' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' Command explanation: Call the interface to query the dataset role information with role id 2. returned messages { \"status\": 0, \"data\": { \"name\": \"role_test\", \"description\": \"test_update\", \"contains\": [ { \"type\": \"user\", \"name\": \"ADMIN\" } ] } } Explanation of returned information: status is 0 for success, and data contains role information for the dataset. Delete roles DELETE http://host:port/api/role/{roleId} URL Path Variable roleId: The value is role id Basic Auth Content-Type: application/json Curl example is as follows: curl -X DELETE \\ 'http://host:port/api/role/2' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' Command explanation: Call the interface to delete the role information of the dataset with role id 2. returned messages { \"status\": 0, \"data\": \"success\" } Explanation of the returned information: status is 0 for success, and data contains deletion success information. Add a single user to an existing role POST http://host:port/api/role/user/visibility/{roleId} URL Path Variable roleId: The value is role id Basic Auth Content-Type: application/json The HTTP Body is json and the content is as follows: { \"name\": \"[role name]\", \"contains\": [ { \"type\": \"user\", \"name\": \"[user name]\" } ], \"description\": \"\" } Curl example is as follows: curl -X POST \\ 'http://host:port/api/role/user/visibility/2' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' \\ -H 'Content-Type:application/json;charset=utf8' \\ -d '{\"name\":\"role_test\",\"contains\":[{\"type\":\"user\",\"name\":\"ANALYST\"}],\"description\":\"\"}' Command explanation: Call the interface and add a user ANALYST to the existing dataset role role_test. returned messages { \"status\": 0, \"data\": \"success\" } Explanation of the returned information: status is 0 for success, and data contains deletion success information. Deleting a single user from an existing role DELETE http://host:port/api/role/user/visibility/{roleId} URL Path Variable roleId: The value is role id Basic Auth Content-Type: application/json Curl example is as follows: curl -X DELETE \\ 'http://host:port/api/role/user/visibility/2' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' \\ -H 'Content-Type:application/json;charset=utf8' \\ -d '{\"name\":\"role_test\",\"contains\":[{\"type\":\"user\",\"name\":\"ANALYST\"}],\"description\":\"\"}' Command explanation: Call the interface to remove a user ANALYST from the existing dataset role role_test. returned messages { \"status\": 0, \"data\": \"success\" } Explanation of the returned information: status is 0 for success, and data contains deletion success information. Querying the Role List GET http://host:port/api/roles Basic Auth Content-Type:application/json URL Parameters pageNum- requiredInteger, the number of pages, the minimum is 0 pageSize- requiredInteger, size per page containsDesc- MandatoryBoolean, whether to include role description RoleName- OptionalString, fuzzy query string, not selected as normal full query, selected will perform fuzzy query based on the corresponding string Curl example is as follows: curl -X GET \\ 'http://host:port/api/roles?pageNum=0&pageSize=500&containsDesc=true' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' Command explanation: Call the interface and return the data set role list for the specified page. returned messages { \"status\": 0, \"data\": { \"pageNum\": 0, \"pageSize\": 500, \"list\": [ { \"id\": 3, \"name\": \"role_test\", \"description\": \"test_update\" }, { \"id\": 1, \"name\": \"Admin\", \"description\": \"This role is an admin role with all semantic information access to all datasets\" } ], \"total\": 2 } } Explanation of returned information: status is 0 for success, and data contains data set role list information. Powered by Gitbook.            Last Modified： 2022-03-23 17:31:59 "},"rest/query.en.html":{"url":"rest/query.en.html","title":"Query related API","keywords":"","body":"Query related API Related operations include: Clear MDX Query Cache Clear MDX Query Cache MDX for Kylin retains the cache of MDX queries. To set the cache resident time, see Configuration file description GET http://host:port/mdx/xmla//clearCache Request Parameters project Request Headers Basic Auth Content-Type: application/json Curl examples are as follows: curl -X GET \\ 'http://host:port/mdx/xmla/clearCache' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' curl -X GET \\ 'http://host:port/mdx/xmla//clearCache' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' Command explanation: Call the interface and clear all MDX query caches. returned messages \" Cache has been cleared.\" \"Cache has been cleared.\" Explanation of the returned message: The cache has been cleared. Powered by Gitbook.            Last Modified： 2022-03-23 17:32:41 "},"appendix/":{"url":"appendix/","title":"Appendix","keywords":"","body":"Appendix Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"appendix/faq.en.html":{"url":"appendix/faq.en.html","title":"FAQ","keywords":"","body":"FAQ The following a list of frequently asked questions about MDX for Kylin. Q: An explanation of MDX for Kylin query cache A: MDX for Kylin will clear the cache in the following situations: MDX for Kylin will actively detect Kylin Segment changes. After discovering changes, MDX for Kylin will actively clear the cache. Dataset metadata changes. Any modification to the dataset will invalidate the query cache of the current dataset. Execute the clear MDX query cache command to clear the query cache. Reference manual The command is as follows: curl -X GET \\ 'http://host:port/mdx/xmla/clearCache' \\ -H 'Authorization: Basic QURNSU46S1lMSU4=' Note: After executing the clear cache command, the query cache of all MDX project will be refreshed; The MDX query cache automatically expires after 12 hours. The expiration time can be adjusted by setting parameter insight.mdx.mondrian.cache.expire-minute in profile $MDX_HOME/conf/insight.properties, with the parameter default value of 12 hours. Powered by Gitbook.            Last Modified： 2022-03-25 15:27:05 "},"appendix/knownlimitation.en.html":{"url":"appendix/knownlimitation.en.html","title":"Known Limitations","keywords":"","body":"Known Limitations The following records some known limitations of MDX for Kylin. Limitation 1: Unlike SQL Server Analysis Service, only the hierarchies can be expanded in Excel. The detailed operation is shown in the figure below. Limitation 2: When using hierarchies on row/column and adding filters on attributes that hierarchies rely on, the grand total and subtotals of calculated measures with currentMember function may be inaccurate. Limitation 3: The implementation of Aggregate function is incomplete. The value of calculated measures using Aggregate function will be affected by report filters or slicers. For example: calculated measures named Aggregate-CM_1-DateKey and Aggregate-CM_1-Due Calendar Date are both defined by an expression as \"Aggregate({[20120401], [20120402], [20120403], [20120404]}, [Measures].[InternetSales COUNT])\", and thus should have a fixed value 26. However, the filter on hierarchy with the value 20120403 affects the value of Aggregate-CM_1-DateKey, changing it to 7. Limitation 4: MDX for Kylin only supports IP hash as load balance policy. Other policies such as round robin might cause slow response or exception when canceling query in Excel. Limitation 5: MDX for Kylin not supports the related kylin to query the relationship of many-to-many. Powered by Gitbook.            Last Modified： 2022-03-25 15:27:38 "},"appendix/formatstring.en.html":{"url":"appendix/formatstring.en.html","title":"Predefined measure formats and measure format characters","keywords":"","body":"Predefined measure formats and measure format characters Predefined Measure Formats Format name    Description Unformatted No formatting. Number Can choose whether to take thousands of separators, negative format, can configure the number of digits after the decimal separator, at least one digit to the left of the decimal separator. Currency Can choose whether to take thousands of separators, negative format, can configure the number of digits after the decimal separator, currency symbol is based on system locale settings. Percentage Displays the number multiplied by 100 with a percent sign (%) appended to the right, can configure the number of digits after the decimal separator. Measure Format Expression A user-defined format expression for numbers can have anywhere from one to four sections separated by semicolons. Usage    Description One section The format expression applies to all values. Two sections The first section applies to positive values and zeros, the second to negative values. Three sections The first section applies to positive values, the second to negative values, and the third to zeros. The following example has two sections. The first section defines the format for positive values and zeros, and the second section defines the format for negative values. #,##0;(-#,##0) The following example has three sections. The first section defines the format for positive values, the second section defines the format for negative values, and displays \"Zero\" if the value is zero. $#,##0;(-$#,##0);\\Z\\e\\r\\o Measure Format Characters Character Description 0 Represents a digit placeholder that displays a digit or a zero (0).If the number has a digit in the position where the zero appears in the format string, the formatted value displays the digit. Otherwise, the formatted value displays a zero in that position.If the number has fewer digits than there are zeros (on either side of the decimal) in the format string, the formatted value displays leading or trailing zeros.If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, the formatted value rounds the number to as many decimal places as there are zeros.If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, the formatted value displays the additional digits without modification. # Represents a digit placeholder that displays a digit or nothing.If the expression has a digit in the position where the number sign (#) appears in the format string, the formatted value displays the digit. Otherwise, the formatted value displays nothing in that position.The number sign (#) placeholder works like the zero (0) digit placeholder except that leading and trailing zeros are not displayed if the number has the same or fewer digits than there are # characters on either side of the decimal separator in the format expression. . Represents a decimal placeholder that determines how many digits are displayed to the left and right of the decimal separator.If the format expression contains only number sign (#) characters to the left of the period (.), numbers smaller than 1 start with a decimal separator. To display a leading zero displayed with fractional numbers, use zero (0) as the first digit placeholder to the left of the decimal separator. % Represents a percentage placeholder. The expression is multiplied by 100. The percent character (%) is inserted in the position where the percentage appears in the format string. , Represents a thousand separator that separates thousands from hundreds within a number that has four or more places to the left of the decimal separator. E- E+ e- e+ Represents scientific format.If the format expression contains at least one digit placeholder (0 or #) to the right of E-, E+, e-, or e+, the formatted value displays in scientific format and E or e is inserted between the number and the number's exponent. The number of digit placeholders to the right determines the number of digits in the exponent. Use E- or e- to include a minus sign next to negative exponents. Use E+ or e+ to include a minus sign next to negative exponents and a plus sign next to positive exponents. + - $ ( ) Displays a literal character.Recommended usage：+：for positive number- or ( )：for negative number$：for currency symbol \\ Displays the next character in the format string.To display a character that has special meaning as a literal character, put a backslash () before the character. The backslash itself is not displayed. Using a backslash is the same as enclosing the next character in double quotation marks. To display a backslash, use two backslashes (\\). Examples of characters that cannot be displayed as literal characters include the following characters:# 0 % E e , . Powered by Gitbook.            Last Modified： 2022-03-16 16:21:11 "},"contact/":{"url":"contact/","title":"Contact Us","keywords":"","body":"Contact Us Welcome to contact us by any means. User Mailing List：user@kylin.apache.org, How to subscribe： https://kylin.apache.org/community/. Powered by Gitbook.            Last Modified： 2022-03-28 18:46:59 "}}