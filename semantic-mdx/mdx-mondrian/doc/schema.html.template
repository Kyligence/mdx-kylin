<html>
<!--
  == This software is subject to the terms of the Eclipse Public License v1.0
  == Agreement, available at the following URL:
  == http://www.eclipse.org/legal/epl-v10.html.
  == You must accept the terms of that agreement to use this software.
  ==
  == Copyright (C) 2001-2005 Julian Hyde
  == Copyright (C) 2005-2012 Pentaho
  == All Rights Reserved.
  ==
  == jhyde, 24 September, 2002
  -->
<head>
    <link rel="stylesheet" type="text/css" href="stylesheet.css"/>
    <title>Pentaho Analysis: How to Design a Mondrian Schema</title>
</head>
<body>
<!-- doc2web start -->

<!-- page title -->
<div class="contentheading">How to Design a Mondrian Schema</div>
<!-- end page title -->


<!--
########################
##  Contents       #####
######################## -->
<ol>
    <li><a href="#What_is_a_schema">What is a schema?</a></li>
    <li><a href="#Schema_files">Schema files</a>
        <ol>
            <li><a href="#Structure_of_a_Schema">Structure of a Schema</a></li>
            <li><a href="#Schema_element">Schema element</a></li>
            <li><a href="#Annotation">Annotation</a></li>
        </ol>
    </li>
    <li><a href="#Cubes_and_dimensions">Logical model</a>
        <ol>
            <li><a href="#Cube">Cube</a></li>
            <li><a href="#Measures">Measures</a></li>
            <li><a href="#Dimensions_and_Attributes">Dimensions and Attributes</a>
              <ol>
                <li><a href="#Dimension_key">Dimension key</a></li>
                <li><a href="#A_simple_attribute">A simple attribute</a></li>
                <li><a href="#Attribute_key_and_name">Attribute key and name</a></li>
                <li><a href="#Composite_key">Composite key</a></li>
                <li><a href="#Attribute_order">Attribute order</a></li>
              </ol>
            </li>
            <li><a href="#Hierarchies_and_Levels">Hierarchies and Levels</a>
              <ol>
                <li><a href="#All_and_default_members">'All' and default members</a></li>
                <li><a href="#Designing_attributes_for_use_in_hierarchies">Designing
                    attributes for use in hierarchies</a></li>
                <li><a href="#Attribute_Hierarchies">Attribute Hierarchies</a></li>
                <li><a href="#Attributes_versus_Hierarchies">Attributes versus Hierarchies</a></li>
              </ol>
            </li>
            <li><a href="#Schema_short_cuts">Schema short cuts</a></li>
            <li><a href="#More_about_dimensions">More about dimensions</a>
              <ol>
                <li><a href="#The_Measures_dimension">The <code>Measures</code> dimension</a></li>
                <li><a href="#Star_and_snowflake_dimensions">Star and snowflake dimensions</a></li>
                <li><a href="#Time_dimensions">Time dimensions</a></li>
                <li><a href="#Member_properties">Member properties</a></li>
              </ol>
            </li>
            <li><a href="#Degenerate_dimensions">Degenerate dimensions</a></li>
            <li><a href="#Level_Order_and_Display">Order and Display of Levels</a></li>
            <li><a href="#Approximate_level_cardinality">Approximate level cardinality</a></li>
            <li><a href="#Default_Measure_Attribute">Default Measure Attribute</a></li>
            <li><a href="#Functional_dependency_optimizations">Functional Dependency Optimizations</a></li>
        </ol>
    </li>
    <li><a href="#Physical_schemas">Physical schemas</a>
        <ol>
            <li><a href="#Table">Table</a></li>
            <li><a href="#Column">Columns and calculated columns</a></li>
            <li><a href="#InlineTable">Inline table</a></li>
            <li><a href="#Query">Query</a></li>
            <li><a href="#Link">Link</a></li>
            <li><a href="#Table_hints">Table Hints</a></li>
        </ol>
    </li>
    <li><a href="#Star_schemas">Star and snowflake schemas</a>
        <ol>
        </ol>
    </li>
    <li><a href="#Advanced_logical_constructs">Advanced logical constructs</a>
        <ol>
            <li><a href="#Shared_dimensions">Shared dimensions</a></li>
            <li><a href="#Parent_child_hierarchies">Parent-child hierarchies</a><ol>
            <li><a href="#Tuning_parent-child_hierarchies">Tuning parent-child 
            hierarchies</a></li>
            <li><a href="#Closure_tables">Closure tables</a></li>
            <li><a href="#Populating_closure_tables">Populating closure tables</a></li>
        </ol>
            </li>
            <li><a href="#Calculated_members">Calculated members</a></li>
            <li><a href="#Named_sets">Named sets</a></li>
        </ol>
    </li>
    <li><a href="#Plugins">Plug-ins</a>
        <ol>
            <li><a href="#User-defined_function">User-defined function</a></li>
            <li><a href="#Cell_formatter">Cell formatter</a></li>
            <li><a href="#Member_formatter">Member formatter</a></li>
            <li><a href="#Property_formatter">Property formatter</a></li>
            <li><a href="#Dynamic_schema_processor">Dynamic schema processor</a></li>
            <li><a href="#DataSource_change_listener">Data source change listener</a></li>
            <li><a href="#Dynamic_datasource_xmla_servlet">Dynamic datasource XMLA servlet</a></li>
        </ol>
    </li>
    <li><a href="#I18n">Internationalization</a></li>
    <li><a href="#Aggregate_tables">Aggregate tables</a></li>
    <li><a href="#Access_control">Access-control</a>
        <ol>
            <li><a href="#Defining_roles">Defining a role</a></li>
            <li><a href="#Rollup_policy">Rollup policy</a></li>
            <li><a href="#Union_roles">Union roles</a></li>
            <li><a href="#Setting_a_connections_role">Setting a connection's role</a></li>
        </ol>
    </li>
    <li><a href="#Appendix_A_XML_elements">Appendix A: XML elements</a></li>
</ol>

<!--
#############################
##  1. What is a Schema #####
############################# -->

<h3>1. What is a schema?<a name="What_is_a_schema">&nbsp;</a></h3>

<p>A schema defines a multi-dimensional database. It contains a logical model,
consisting of cubes, measures, dimensions and attributes, and a mapping of this
model onto a physical model.</p>

<p>The logical model consists of the constructs used to write queries in MDX
language: cubes, measures, dimensions, attributes, hierarchies, levels, and
members.</p>

<p>The physical model is the source of the data which is presented through the
logical model. It is a set of tables and other relational expressions, connected
using links. Typically the tables are stored in a relational database and
arranged in a star or snowflake schema; later, we shall see examples of other
kinds of mappings.</p>

<!--
###########################
##  2. overview start #####
########################### -->
<h3>2. Schema files<a name="Schema_files">&nbsp;</a></h3>

<p>Mondrian schemas are represented in an XML file.  An example
schema, containing almost all of the constructs we discuss here, is
supplied as <code>demo/FoodMart.mondrian.xml</code> in the Mondrian
distribution.  The dataset to populate this
schema <a href="install.html#2_Set_up_test_data">can be downloaded
from Pentaho</a>.</p>

<p>Currently, the only way to create a schema is to edit a schema XML
file in a text editor. The XML syntax is not too complicated, so this
is not as difficult as it sounds, particularly if you use the FoodMart
schema as a guiding example.</p>

<!--
####################################
##  2.1 Structure of a Schema  #####
#################################### -->
<h1>2.1 Structure of a Schema<a name="Structure_of_a_Schema">&nbsp;</a></h1>

<p>The structure of the XML document is as follows:</p>

{@xml
<Schema>
  <PhysicalSchema>
    <Table>
      <Key>
        <Column>
    {@ignore </Column></Key></Table> }
    <Query>
      <SQL>
    {@ignore </SQL></Query> }
    <InlineTable>
      <ColumnDefs>
        <ColumnDef>
      {@ignore </ColumnDef></ColumnDefs> }
      <Key> (as for Table)
      {@ignore </Key> }
      <Rows>
        <Row>
          <Value>
    {@ignore </Value></Row></Rows></InlineTable> }
    <Link/>
  {@ignore </PhysicalSchema>}
  <Dimension/> (shared; as for Dimension within Cube)
  <Cube>
    <Dimensions>
      <Dimension>
        <Attributes>
          <Attribute>
            <Key>
              <Column/>
            {@ignore </Key>}
            <Name/> (as Key)
            <Caption/> (as Key)
            <OrderBy/> (as Key)
            <Closure/>
            <MemberFormatter>
              <Script/>
            {@ignore </MemberFormatter>}
            <Property>
              <PropertyFormatter>
                <Script/>
        {@ignore </PropertyFormatter></Property></Attribute></Attributes>}
        <Hierarchies>
          <Hierarchy>
            <Levels>
              <Level/>
       {@ignore </Levels></Hierarchy></Hierarchies></Dimension></Dimensions>}
    <MeasureGroups>
      <MeasureGroup>
        <Measures>
          <Measure/>
          <MeasureRef/>
        {@ignore </Measures>}
        <DimensionLinks>
          <ForeignKeyLink/>
          <FactLink/>
          <ReferenceLink/>
          <CopyLink/>
          <NoLink/>
    {@ignore </DimensionLinks></MeasureGroup></MeasureGroups>}
    <CalculatedMembers>
      <CalculatedMember>
        <Formula/>
        <CalculatedMemberProperty/>
        <CellFormatter>
          <Script/>
      {@ignore </CellFormatter></CalculatedMember></CalculatedMembers>}
    <NamedSets>
      <NamedSet>
        <Formula/>
  {@ignore </NamedSet></NamedSets></Cube>}
  <Role>
    <SchemaGrant>
      <CubeGrant>
        <DimensionGrant/>
        <HierarchyGrant>
          <MemberGrant/>
    {@ignore </HierarchyGrant></CubeGrant></SchemaGrant>}
    <Union>
      <RoleUsage/>
  {@ignore </Union></Role>}
  <UserDefinedFunction>
    <Script/>
  {@ignore </UserDefinedFunction>}
  <Parameter/>
}


<p>The order of XML elements is not important.  For example, as long
as it occurs as a child of a {@element Schema} element, a
{@element UserDefinedFunction} element might occur after one
{@element Cube} element and after another.</p>

<p>This is different to Mondrian version 3.x, where order of elements was very important.
For other changes with previous versions of the schema, see the
<a href="https://github.com/pentaho/mondrian/tree/lagunitas/RELEASE.txt">release
notes</a>.</p>

<p>The content of each XML element is described in
<a href="#Appendix_A_XML_elements">Appendix A</a> and in the <a href="xml_schema.html">XML schema</a>.</p>

<!--
#############################
##  2.2 Schema element  #####
############################# -->
<h1>2.2 Schema element<a name="Schema_element">&nbsp;</a></h1>

<p>The {@element Schema} element
is the root element of every Mondrian schema.  For example:</p>

{@xml
<Schema name="Rock Sales" metamodelVersion="4.0">
  {@ignore </Schema>}
}

<p>A schema has a <code>name</code> attribute and, optionally,
a <code>description</code>.  Other attributes are described in
the <a href="xml_schema.html">XML schema</a>, which you can reach via
the element description
the <a href="#Appendix_A_XML_elements">Appendix A</a>.  (We shall not
describe every attribute of in this guide, just the most important
ones, so get into the habit of clicking on that link!)</p>

<p>The <code>metamodelVersion</code> attribute allows Mondrian to tell which
version the schema was intended for; if the version is different than
the current version of the software, Mondrian may be able to convert
it automatically. The current version is &quot;4.0&quot;.  If the
attribute is missing (it was optional before Mondrian version 4)
Mondrian does its best to deduce the version of the schema based on
its contents.</p>

<!--
##########################
##  2.3 Annotations  #####
########################## -->
<h1>2.3 Annotation<a name="Annotation">&nbsp;</a></h1>

<p>The major element types (schema, cube, shared dimension, dimension,
attribute, hierarchy, level, measure group, measure, calculated member) support
annotations. An annotation is a way of associating a user-defined property with
a metadata element, and in particular, allows tools to add metadata without
extending the official Mondrian schema.</p>

<p>Create an {@element Annotations} element as a child of the element
you wish to annotate, then include a number of {@element Annotation}
elements.  {@element Annotation} elements' names must be unique within
their element.  If you are adding annotations to support a particular
tool that you maintain, choose annotation names carefully, to ensure
that they do not clash with annotations used by other tools.</p>

<p>The following example shows &quot;Author&quot; and &quot;Date&quot;
annotations attached to a {@element Schema} object.</p>

{@xml
<Schema name="Rock Sales" metamodelVersion="4.0">
  <Annotations>
    <Annotation name="Author">Fred Flintstone</Annotation>
    <Annotation name="Date">10,000 BC</Annotation>
  </Annotations>
  <Cube name="Sales">
    ...
    {@ignore </Cube></Schema> }
}

<p>Some annotation names are used by convention across several tools.
They are as follows:</p>

<table class="grayTable" id="AutoNumber3">
<tr>
  <th>Annotation</th>
  <th>Element(s)</th>
  <th>Description</th>
</tr>
<tr>
  <td>AnalyzerBusinessGroup</td>
  <td>Level</td>
  <td>Used to create folders in the UI</td>
</tr>
<tr>
  <td>AnalyzerBusinessGroupDescription</td>
  <td>Level</td>
  <td>Description for the folders</td>
</tr>
<tr>
  <td>AnalyzerDateFormat</td>
  <td>Level</td>
  <td>Used for relative date filters</td>
</tr>
<tr>
  <td>AnalyzerHideInUI</td>
  <td>Measure, CalculatedMember</td>
  <td>Hides the field in the UI</td>
</tr>
<tr>
  <td>AnalyzerDisableDrillLinks</td>
  <td>Cube</td>
  <td>Disables drillthrough links on the cube</td>
</tr>
</table>

<!--
###########################
##  3. Logical model  #####
########################### -->
<h3>3. Logical model<a name="Cubes_and_dimensions">&nbsp;</a></h3>

<p>The most important components of a schema are cubes, measures, attributes and dimensions:</p>

<ul>
    <li>A <dfn>cube</dfn> is a data set describing a one or more
        processes over a particular time period.</li>
    <li>A <dfn>fact</dfn> is the data representing an individual
        occurrence of a process; for example, a line item describing
        the sale of a product to a customer, or a pay period of an
        employee in a company.</li>
    <li>A <dfn>measure</dfn> is a quantity within a cube that you are
        interested in measuring; for example, unit sales of a product,
        or the salary of an employee.</li>
    <li>An <dfn>attribute</dfn> is a value, possessed by every fact,
        by which you can divide facts into subsets. For example, you
        might wish to break down product sales by their color, the
        gender of the customer, and the store in which the product was
        sold; color, gender, and store are all attributes.</li>
    <li>A <dfn>dimension</dfn> is a grouping of related attributes.
        For example, name, gender, zip code and eye color are
        attributes of the customer dimension; color, weight, and
        manufacturer are attributes of the product dimension.</li>
</ul>

<p>Let's look at the XML definition of a simple schema.</p>

{@xml
<Schema name="Sales" metamodelVersion="4.0">
  <PhysicalSchema>
    <Table name="sales_fact_1997"/>
    <Table name="customer"/>
    <Table name="time_by_day"/>
  </PhysicalSchema>
  <Cube name="Sales">
    <Dimensions>
      <Dimension name="Customer" table="customer" key="Id">
        <Attributes>
          <Attribute name="Gender" column="gender"/>
          <Attribute name="Id" column="customer_id"/>
        </Attributes>
      </Dimension>
      <Dimension name="Time" table="time_by_day" key="Day">
        <Attributes>
          <Attribute name="Year" column="the_year"/>
          <Attribute name="Quarter" column="quarter">
            <Key>
              <Column name="the_year"/>
              <Column name="quarter"/>
            </Key>
          </Attribute>
          <Attribute name="Month" column="month_of_year">
            <Key>
              <Column name="the_year"/>
              <Column name="month_of_year"/>
            </Key>
          </Attribute>
          <Attribute name="Day" column="time_id"/>
        </Attributes>
        <Hierarchies>
          <Hierarchy name="Yearly" hasAll="false">
            <Level attribute="Year"/>
            <Level attribute="Quarter"/>
            <Level attribute="Month"/>
          </Hierarchy>
        </Hierarchies>
      </Dimension>
    </Dimensions>
    <MeasureGroups>
      <MeasureGroup name="Sales" table="sales_fact_1997">
        <Measures>
          <Measure name="Unit Sales" column="unit_sales" aggregator="sum" formatString="#,###"/>
          <Measure name="Store Sales" column="store_sales" aggregator="sum" formatString="#,###.##"/>
          <Measure name="Store Cost" column="store_cost" aggregator="sum" formatString="#,###.00"/>
        </Measures>
        <DimensionLinks>
          <ForeignKeyLink dimension="Customer" foreignKeyColumn="customer_id"/>
          <ForeignKeyLink dimension="Time" foreignKeyColumn="time_id"/>
        </DimensionLinks>
      </MeasureGroup>
    </MeasureGroups>
    <CalculatedMembers>
      <CalculatedMember name="Profit" dimension="Measures" formula="[Measures].[Store Sales] - [Measures].[Store Cost]">
        <CalculatedMemberProperty name="FORMAT_STRING" value="$#,##0.00"/>
      </CalculatedMember>
    </CalculatedMembers>
  </Cube>
</Schema>
}

<p>This schema contains a single cube, called "Sales".  The Sales cube
has two dimensions, "Time", and "Gender", and four measures, "Unit
Sales", "Store Sales", "Store Cost", and "Profit".</p>

<p>We can write an MDX query on this schema:</p>

<blockquote style="text-indent: -20px">
    <code>
        SELECT {[Measures].[Unit Sales], [Measures].[Store Sales]} ON COLUMNS,<br/>
        &nbsp; {Descendants([Time].[Yearly].[1997].[Q1])} ON ROWS<br/>
        FROM [Sales]<br/>
        WHERE [Customer].[Gender].[F]
    </code>
</blockquote>

<p>This query refers to the Sales cube (<code>[Sales]</code>), the
dimensions <code>[Measures]</code>, <code>[Time]</code>,
<code>[Customer]</code>, the hierarchy <code>[Time].[Yearly]</code>,
the attribute <code>[Customer].[Gender]</code>, and various members of
those dimensions.  The results are as follows:</p>

<blockquote>
    <table class="grayTable" id="AutoNumber1">
        <tr>
            <th align="left"><code>[Time]</code></th>
            <th><code>[Measures].[Unit Sales]</code></th>
            <th><code>[Measures].[Store Sales]</code></th>
        </tr>
        <tr>
            <th align="left"><code>[1997].[Q1]</code></th>
            <td align="right">32,910</td>
            <td align="right">$69,798.23</td>
        </tr>
        <tr>
            <th align="left"><code>[1997].[Q1].[Jan]</code></th>
            <td align="right">10,932</td>
            <td align="right">$23,309.04</td>
        </tr>
        <tr>
            <th align="left"><code>[1997].[Q1].[Feb]</code></th>
            <td align="right">10,266</td>
            <td align="right">$21,773.93</td>
        </tr>
        <tr>
            <th align="left"><code>[1997].[Q1].[Mar]</code></th>
            <td align="right">11,712</td>
            <td align="right">$24,715.26</td>
        </tr>
    </table>
</blockquote>

<p>Now let's look at the schema definition in more detail.</p>

<!--
########################
##  3.1 Cube       #####
######################## -->
<h1>3.1 Cube<a name="Cube">&nbsp;</a></h1>

<p>A cube (see {@element Cube}) is a named collection of dimensions
and measures.</p>

<p>The dimensions are children of a {@element Dimensions} holder
element. Even though schema order does not matter, typically the
dimensions are declared first. Then follow the measures, organized
into measure groups and under a {@element MeasureGroups} holder
element. (A measure group is a collection of measures that have the
same fact table. The simple cubes we shall be considering at first
have just one measure group; later, we shall see examples of cubes
with more than one measure group.)</p>

<p>The <code>[Sales]</code> cube in the previous example has two
dimensions. The <code>[Customer]</code> dimension has
attributes <code>[Gender]</code> and <code>[Id]</code>; and
the <code>[Time]</code> dimension has
attributes <code>[Year]</code>, <code>[Quarter]</code>, <code>[Month]</code>
and <code>[Day]</code>.</p>

<p>The <code>[Sales]</code> cube's measure group is based on the
table <code>"sales_fact_1997"</code>. As we shall see later, each
table used in the logical schema must be declared within the physical
schema, and sure enough, the
{@element PhysicalSchema}
element has a child element
{@element Table name="sales_fact_1997"}.</p>

<p>The fact table contains the columns from which measures are
calculated, and foreign key columns that link to dimension tables.  To
use these columns, Mondrian needs to know about them, so all of these
columns occur somewhere in the
{@element MeasureGroup}
element.  The <code>unit_sales</code>, <code>store_sales</code>
and <code>store_cost</code> columns each occur within a
{@element Measure} definition; and the
<code>customer_id</code> and <code>time_id</code> columns each occur
within a
{@element ForeignKeyLink}
element, linking the measure group to the <code>[Customer]</code>
and <code>[Time]</code> dimensions, respectively.</p>


<!--
########################
##  3.2 Measures   #####
######################## -->
<h1>3.2 Measures<a name="Measures">&nbsp;</a></h1>

<p>Let's look at the measures defined in the Sales cube's one and only measure group.</p>

{@xml
<Measure name="Unit Sales" column="unit_sales" aggregator="sum" formatString="#,###"/>
<Measure name="Store Sales" column="store_sales" aggregator="sum" formatString="#,###.##"/>
<Measure name="Store Cost" column="store_cost" aggregator="sum" formatString="#,###.00"/>
}

<p>Each measure (see {@element Measure}) has a name, a column in the fact table, and an
<code>aggregator</code>. The aggregator is usually "sum", but "count", "min", "max", "avg", and
"distinct-count" are also allowed; "distinct-count" has some limitations if your cube contains a
<a href="#Parent_child_hierarchies">parent-child hierarchy</a>.</p>

<p>The optional <code>datatype</code> attribute
specifies how cell values are represented in Mondrian's cache, and how
they are returned via XML for Analysis. The <code>datatype</code>
attribute can have values "<code>String</code>",
"<code>Integer</code>", "<code>Numeric</code>",
&quot;<code>Boolean</code>&quot;, &quot;<code>Date</code>&quot;,
&quot;<code>Time</code>&quot;, and &quot;<code>Timestamp</code>&quot;.
The default is "<code>Numeric</code>", except for "<code>count</code>"
and "<code>distinct-count</code>" measures, which are
"<code>Integer</code>".</p>

<p>An optional <code>formatString</code> attribute specifies how the value is to be printed.
Here, we have chosen to output unit sales with no decimal places (since it is an integer), and store sales
with two decimal places (since it is a currency value). The ',' and '.' symbols are locale-sensitive, so if
you were running in Italian, store sales might appear as "48.123,45". You can achieve even more wild effects
using <a href="mdx.html#Format_strings">advanced format strings</a>.</p>

<p>A measure can have a caption attribute to be returned by the
<code><a href="http://www.olap4j.org/api/mondrian/olap/Member.html#getCaption%28%29">Member.getCaption()</a></code>
method instead of the name. If you do not specify a caption, it will
default to the measure's name. Defining a specific caption might make
sense if you wish to localize the name of the measure as seen by
end-users, or if you wish to display special letters (e.g. &#931; or
&#928;) in the user interface:</p>

{@xml
<Measure name="Sum X" column="sum_x" aggregator="sum" caption="&amp;#931; X"/>
}

<p>Rather than coming from a column, a measure can use an SQL
expression to calculate its value. To do this, add a calculated column
<code>promotion_sales</code> to the declaration of the fact table:</p>

{@xml
<Table name="sales_fact_1997">
  <ColumnDefs>
    <CalculatedColumnDef name="promotion_sales">
      <ExpressionView>
        <SQL dialect="generic">
          (case when <Column name="promotion_id"/> =
          0 then 0 else <Column name="store_sales"/> end)
        </SQL>
      </ExpressionView>
    </CalculatedColumnDef>
  </ColumnDefs>
</Table>
}

then create the <code>[Promotion Sales]</code> measure based upon it:</p>

{@xml
<Measure name="Promotion Sales" aggregator="sum" column="promotion_sales" formatString="#,###.00">
}

<p>Observe how the
{@element PhysicalSchema}
is doing its job and gathering implementation details in one
place. The measure definition does not know or care that the
<code>promotion_sales</code> column is actually calculated, and looks
the same as a measure defined on a regular column. Every time Mondrian
needs to access the calculated column, it will generate the SQL
expression instead.</p>

<p>In this case, sales are only included in the summation if they
correspond to a promotion sale.  Arbitrary SQL expressions can be
used, including subqueries. However, the underlying database must be
able to support that SQL expression in the context of an
aggregate. Variations in syntax between different databases is handled
by specifying more than one {@element Key} element:</p>

{@xml
<Attribute name="Quarter">
  <Key>
    <Column name="the_year"/>
    <Column name="quarter"/>
  </Key>
</Attribute>
}

<p>If there is only one key column then {@element Key}
and <code>keyColumn</code> are equivalent. Use whichever you prefer:
the former is more uniform, but the latter requires less typing.</p>

<p>We do not need to specify <code>nameColumn</code>, because it
defaults to the last column in the composite key.</p>

<p>If a dimension table has a composite key, the key attribute for
that dimension will have a composite key. To reference it from a fact
table, you will need to need to create a {@element ForeignKeyLink} in
the fact table's {@element MeasureGroup} that uses one column in the
fact table for each of the columns of the dimension table's composite
primary key.</p>

<!-- ### Attribute order ### -->
<h1>3.3.5 Attribute order<a name="Attribute_order">&nbsp;</a></h1>

<p>The ordinal property of an attribute controls the order in which
members are displayed. Usually attributes are sorted by name. (If name
is not specified, recall that it will be the key, or the last column
in a composite key.) But sometimes name does not give us the order we
want. The <code>[Time].[Month]</code> attribute is an example of
this:</p>

{@xml
<Attribute name="Month">
  <Key>
    <Column name="the_year"/>
    <Column name="month"/>
  </Key>
</Attribute>
}

<p>Like <code>[Time].[Quarter]</code>, Month has a composite key. We
would like 12 months per year covered by the data set, not just 12
months. Unlike Quarter, we have overridden the name. Let's see what
happens if we execute a query.</p>

<blockquote>
  <code>
    SELECT [Time].[Month].Members on ROWS<br/>
    FROM [Sales];<br/>
    <br/>
    [Time].[Month].&amp;[2011]&amp;[April]<br/>
    [Time].[Month].&amp;[2011]&amp;[August]<br/>
    [Time].[Month].&amp;[2011]&amp;[December]<br/>
    [Time].[Month].&amp;[2011]&amp;[February]<br/>
    [Time].[Month].&amp;[2011]&amp;[January]<br/>
    ...
  </code>
</blockquote>

<p>The results look entirely arbitrary, until we remember that
Mondrian is sorting by name. We got what we asked for, but not what we
wanted! We need to tell Mondrian to sort by the key columns:</p>

{@xml
<Attribute name="Month" nameColumn="month_name" orderByColumn="month">
  <Key>
    <Column name="the_year"/>
    <Column name="month"/>
  </Key>
</Attribute>
}

<p>Now the results are as we expect:</p>

<blockquote>
  <code>
    [Time].[Month].&amp;[2011]&amp;[January]<br/>
    [Time].[Month].&amp;[2011]&amp;[February]<br/>
    [Time].[Month].&amp;[2011]&amp;[March]<br/>
    [Time].[Month].&amp;[2011]&amp;[April]<br/>
    [Time].[Month].&amp;[2011]&amp;[May]<br/>
    ...
  </code>
</blockquote>

<!--
####################################
##  3.4 Hierarchies and Levels #####
#################################### -->
<h1>3.4 Hierarchies and Levels<a name="Hierarchies_and_Levels">&nbsp;</a></h1>

<p>Some combinations of attributes in a dimension are often used
together. For example, a business user viewing a state might often
wish to expand it to see the constituent cities. When viewing a month,
they might wish to roll up into quarter or year. For such combinations
of attributes, it is convenient to create hierarchies.</p>

<p>Here is the <code>[Time]</code> dimension, slightly extended from
the earlier example:</p>

{@xml
<Dimension name="Time" table="time_by_day" key="Day">
  <Attributes>
    <Attribute name="Year" column="the_year"/>
    <Attribute name="Quarter">
      <Key>
        <Column name="the_year"/>
        <Column name="quarter"/>
      </Key>
    </Attribute>
    <Attribute name="Month">
      <Key>
        <Column name="the_year"/>
        <Column name="month_of_year"/>
      </Key>
    </Attribute>
    <Attribute name="Week">
      <Key>
        <Column name="the_year"/>
        <Column name="week_of_year"/>
      </Key>
    </Attribute>
    <Attribute name="Day" column="time_id"/>
  </Attributes>
  <Hierarchies>
    <Hierarchy name="Yearly" hasAll="false">
      <Level attribute="Year"/>
      <Level attribute="Quarter"/>
      <Level attribute="Month"/>
      <Level attribute="Day"/>
    </Hierarchy>
    <Hierarchy name="Weekly" hasAll="false">
      <Level attribute="Year"/>
      <Level attribute="Week"/>
      <Level attribute="Day"/>
    </Hierarchy>
  </Hierarchies>
</Dimension>
}

<p>You can see that most of the lines of XML in the dimension
definition are taken up by attribute definitions.  Once the attributes
are defined, you can build a hierarchy by choosing which attributes
you want, in which order.</p>

<p>In fact, we recommend that you when you first design a schema, you
just define attributes; let the business users use the cube without
any hierarchies defined, and let them tell you which hierarchies are
needed.</p>

<!-- ### --->
<h1>3.4.1 'All' and default members<a name="All_and_default_members">&nbsp;</a></h1>

<p>By default, every hierarchy contains a top level called
'<code>(All)</code>', which contains a single member called
'<code>(All {<i>hierarchyName</i>})</code>'. This member is parent of
all other members of the hierarchy, and thus represents a grand
total.</p>

<p>The all member is also the default member of the hierarchy; that is, the
member that is used for calculating cell values when the hierarchy is
not included on an axis or in the slicer.</p>

<p>Various attributes allow you to control the all level and member.
The {@element Hierarchy} element's <code>allMemberName</code>
and <code>allLevelName</code> attributes override the default names of
the all level and all member.</p>

<p>If the {@element Hierarchy} element
has <code>hasAll="false"</code>, the 'all' level is suppressed. The
default member of that dimension will now be the first member of the
first level; for example, in a Time hierarchy, it will be the first
year in the hierarchy. Changing the default member can be confusing,
so you should generally use <code>hasAll="true"</code>.</p>

<p>You can also set the default member of a hierarchy
explicitly. The <code>defaultMember</code> attribute should be the
fully-qualified name of the default member.</p>

{@xml
<Hierarchy name="Yearly" hasAll="false" defaultMember="[Time].[1997].[Q1].[1]">
  ...
</Hierarchy>
}

<p>When specified in this way, the default member can even be a calculated member.</p>

<!--- ### --->
<h1>3.4.2 Designing attributes for use in
hierarchies <a name="Designing_attributes_for_use_in_hierarchies">&nbsp;</a></h1>

<p>Although it is easy to build a hierarchy from existing attributes,
the attributes you include in a hierarchy have to be defined with
care. Each attribute must be functionally dependent on the attribute
of the level below it. Thus, there needs to be one and only
one <code>Quarter</code> for any given <code>Month</code>, and one and
only one <code>Year</code> for any given <code>Quarter</code>. A
<code>Year-Month-Week-Day</code> hierarchy would not pass muster,
because some of the some of the days in Week 5 belong to January, and
some to Februrary.</p>

<p>Typically some of the attributes in a hierarchy will have composite
keys, to achieve the appropriate functional dependency relationships.
It is useful to remember that including attributes in a hierarchy does
not alter the number of members of that attribute. In a well-formed
hierarchy, each successive level has more members. For example, in a
<code>Year-Quarter-Month-Day</code> hierarchy over 10 years, the
levels have 10, 40, 120, 3652 members respectively. If
your <code>Quarter</code> attribute only has 4 members (because you
have forgotten to give it a composite key) the levels have 10, 4, 120
and 3652 members, and that non-increasing sequence should be a sign
that you have done something wrong.</p>

<!--
##################################
## 3.4.3 Attribute hierarchies #####
################################## -->
<h1>3.4.3 Attribute hierarchies<a name="Attribute_hierarchies">&nbsp;</a></h1>

<p>Surprising as it may seem, the MDX language does not know about
attributes. It only knows about dimensions, hierarchies, levels and
members. Mondrian gets around that using sleight of hand: it generates
a single-level hierarchy for each attribute, called an <dfn>attribute
hierarchy</dfn>.</p>

<p>Attribute hierarchies do not have any special properties. The
effect is as if you manually created the hierarchy. But it saves you
the effort of defining lots of hierarchies. The net effect is that you
can easily define a dozen or so attributes and start playing with them
in queries before you start even thinking about hierarchies.</p>

<p>To control whether an attribute has a hierarchy, use
the <code>hasHierarchy</code> attribute of the {@element Attribute}
element. Other attributes, mostly corresponding directly to
similarly-named attributes of the {@element Hierarchy} element, are
shown in the following table:</p>

<table class="grayTable" id="table12">
  <tr>
    <th>Hierarchy attribute</th>
    <th>Attribute attribute</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>N/A</td>
    <td>hasHierarchy</td>
    <td>Whether an attribute has an attribute-hierarchy.</td>
  </tr>
  <tr>
    <td>name</td>
    <td>N/A</td>
    <td>The name of the hierarchy. An attribute hierarchy always has the
      same name as the attribute.</td>
  </tr>
  <tr>
    <td>hasAll</td>
    <td>hierarchyHasAll</td>
    <td>Whether the hierarchy has an 'all' level and member.</td>
  </tr>
  <tr>
    <td>allMemberName</td>
    <td>hierarchyAllMemberName</td>
    <td>Name of the 'all' member. If not specified, the all member is
      called 'All &lt;hierarchyName&gt;'.</td>
  </tr>
  <tr>
    <td>allMemberCaption</td>
    <td>hierarchyAllMemberCaption</td>
    <td>Caption of the 'all' member. If not specified, the member's
      caption is the same as its name.</td>
  </tr>
  <tr>
    <td>allLevelName</td>
    <td>hierarchyAllLevelName</td>
    <td>Name of the 'all' level.  If not specified, the all level is
      called '(All)'.</td>
  </tr>
  <tr>
    <td>defaultMember</td>
    <td>hierarchyDefaultMember</td>
    <td>The default member of the hierarchy. If not specified, the default
      member is the first member of the first level. (This is the 'all'
      member, if present.)</td>
  </tr>
</table>

<p>We recommend that you think twice before disabling the 'all' member
of an attribute hierarchy, or changing its default member, as this
will cause hidden constraints to be in play even when the attribute is
not being displayed on an axis.</p>


<!--
###########################################
##  3.4.4 Attributes versus Hierarchies #####
########################################### -->
<h1>3.4.4 Attributes versus Hierarchies<a name="Attributes_versus_Hierarchies">&nbsp;</a></h1>

<p>Attributes are a new feature in Mondrian version 4.  In previous
versions of Mondrian, you could define what are now called "attribute
hierarchies", but you would need to define some fairly verbose XML.
Also, the MDX syntax was clunky if you had more than one hierarchy in
a given dimension.  As a result, schema designers would typically
define hierarchies for the 'obviously' hierarchical dimensions like
Time and Geography but not expose each level as an attribute that
could be used to slice and dice independently.  Attributes were an
afterthought in most schemas.</p>

<p>From Mondrian 4 onwards, we encourage schema designers to design
dimensions with many attributes.  Don't worry about creating
hierarchies at first. See which combinations of attributes your
end-users regularly use together, and consider creating hierarchies to
make those drill paths more convenient. But we expect that your
end-users will still use the standalone attributes much of the
time.</p>

<p>Some attributes have "within parent" and "without parent"
forms. For example, the <code>[Time].[Month]</code> attribute has 120
members over 10 years, whereas the <code>[Time].[Month of Year]</code>
has just 12 members. The first can be used to compare whether
toboggans sold better in December 2012 sales than in December 2011;
the second can be used to compare whether toboggans sell better in
December than April.  You need to define two separate attributes.
There is no easy way to define one in terms of the other, or an
automatic mapping between them. The best you can do is to use a naming
convention, such as "<i>Attribute</i> of <i>Parent</i>", for all such
attributes, so that the correspondence is clear to your end-users.</p>

<!-- ## 3.5 Schema short cuts #################################### -->

<h1>3.5 Schema short cuts<a name="Schema_short_cuts">&nbsp;</a></h1>

<p>XML is a suitable language for defining schemas because it can be
read and written by both humans and machines. You can hand-write a
schema in emacs, vi or notepad, or you can write one in a modeling
tool. However, XML can be verbose. This is less of a problem for tools
than for humans typing every character.</p>

<p>Therefore Mondrian provides various short cuts. These are
alternative ways of specifying constructs that are less verbose. They
reduce the amount of typing, and make sure that simple things look
simple, without reducing the power of Mondrian's schema language.</p>

<h2>Attribute as shorthand for a singleton nested collection</h2>

<p>One recurring shorthand is to allow an attribute to be used instead
of a collection of nested elements, if that collection has only one
element.</p>

<p>For example, if you are defining an attribute with a simple
(non-composite) key you could either write</p>

{@xml
<Attribute name="A">
  <Key>
    <Column name="c">
  </Key>
</Attribute>
}

<p>or</p>

{@xml
<Attribute name="A" column="c"/>
}

<p>These are equivalent, but the second is more concise, and you would
probably choose to use it when writing a schema by hand. If the
attribute has a composite key, or if you wish to use
the <code>table</code> attribute, you have to use the nested
{@element Key} element:

{@xml
<Attribute name="A">
  <Key>
    <Column table="t1" name="c1"/>
    <Column table="t2" name="c2"/>
  </Key>
</Attribute>
}

<p>The nested collection in this case is {@element Key} and a set of
{@element Column} elements, and the attribute
is <code>keyColumn</code>. But the pattern occurs elsewhere in the
schema, as shown by the following table.</p>

    <table class="grayTable" id="table11" width="500">
        <tr>
            <td><b>Parent element</b></td>
            <td><b>Attribute</b></td>
            <td><b>Equivalent nested element</b></td>
            <td><b>Description</b></td>
        </tr>
        <tr>
            <td>{@element Attribute}</td>
            <td><code>keyColumn</code></td>
            <td>{@element Key}</td>
            <td>Column(s) that comprise the key of this attribute.</td>
        </tr>
        <tr>
            <td>{@element Attribute}</td>
            <td><code>nameColumn</code></td>
            <td>{@element Name}</td>
            <td>Column that defines the name of members of this attribute. If 
            not specified, the attribute key is used.</td>
        </tr>
        <tr>
            <td>{@element Attribute}</td>
            <td><code>orderByColumn</code></td>
            <td>{@element OrderBy}</td>
            <td>Column(s) that define the order of members. If not specified, 
            the attribute key is used.</td>
        </tr>
        <tr>
            <td>{@element Attribute}</td>
            <td><code>captionColumn</code></td>
            <td>{@element Caption}</td>
            <td>Column that forms the caption of members. If not specified, 
            the attribute name is used.</td>
        </tr>
        <tr>
            <td>{@element Measure}</td>
            <td><code>column</code></td>
            <td>{@element Arguments}</td>
            <td>Column(s) that are the arguments to this measure. (When
              this measure is implemented by generating a SQL
              expression, these columns become the argument to the SQL
              aggregate function.)</td>
        </tr>
        <tr>
            <td>{@element Table}</td>
            <td><code>keyColumn</code></td>
            <td>{@element Key}</td>
            <td>Column(s) that form this Table's key.</td>
        </tr>
        <tr>
            <td>{@element Link}</td>
            <td><code>foreignKeyColumn</code></td>
            <td>{@element ForeignKey}</td>
            <td>Column(s) that form a foreign key from this Link's
              referencing table to its referenced table.</td>
        </tr>
        <tr>
            <td>{@element ForeignKeyLink}</td>
            <td><code>foreignKeyColumn</code></td>
            <td>{@element ForeignKey}</td>
            <td>Column(s) that form a foreign key from a measure
            group's fact table to a dimension table.</td>
        </tr>
        </table>

<h2>Inherited attributes</h2>

<p>The <code>table</code> attribute occurs on {@element Dimension},
{@element Attribute} and {@element Column} elements and, if not
present, is inherited from the enclosing element. This makes
definitions more concise if, for example, a dimension is based on a
single table.</p>

<h2>Default values for attributes</h2>

<p>Many attributes have default values. For example, the default value
of the <code>type</code> attribute of a {@element Dimension} element
is "OTHER". Default values are described in the schema reference.</p>

<h2>Shared dimensions</h2>

<p>If several cubes in the same schema use dimensions that have
similar definitions, consider defining
a <a href="#Shared_dimensions">shared dimension</a>.</p>


<!-- ############################################################# -->
<h1>3.6 More about dimensions<a name="More_about_dimensions">&nbsp;</a></h1> 

<p>This section contains various topics about dimensions.</p>

<h1>3.6.1 The <code>Measures</code> dimension<a name="The_Measures_dimension">&nbsp;</a></h1> 

<p>Measures are treated as members of a special dimension, called
'Measures'. The dimension has a single hierarchy and a single
level.</p>

<p>MDX allows you to omit the hierarchy name if a dimension only has
one hierarchy (including attribute
hierarchies). Therefore <code>[Measures].[Unit&nbsp;Sales]</code> is a
valid shorthand for <code>[Measures].[Measures].[Unit&nbsp;Sales]</code>.</p>

<p>That measures belong to a dimension might seem strange. (If you
come from a background in relational databases, it seems like
declaring that every column is a row.) But it one of the defining
properties of the dimensional model, and one of its strengths. Because
measures are members, you can change the context from one measure to
another in a calculation just as easily as you can time period or
sales region. It allows for greater reuse of calculations. It also
makes for easier access control, because you can grant on a cell, of
which measure is just one coordinate.</p>

<!-- ############################################################# -->
<h1>3.6.2 Star and snowflake dimensions<a name="Star_and_snowflake_dimensions">&nbsp;</a></h1>

<p>The dimensions we have seen so far have been based on a single
table. Such dimensions are called <dfn>star dimensions</dfn>, because
they are arranged around a fact table like the points of a star. It is
also possible to have <dfn>snowflake dimensions</dfn>, which are based
upon two or more dimension tables.</p>

<p>First, make sure that every table in your snowflake dimension is
defined in the {@element PhysicalSchema}. You will be referencing
tables by their table usage name.  The table usage name is unique
within the schema. It is usually the same as the table name, but can
be specified explicitly using the {@element Table}
element's <code>alias</code> attribute if there are two tables of the
same name, and must be specified explicitly for {@element Query} and
{@element InlineTable} elements.</p>

<p>Next, make sure that there is a path between the tables defined by
one of more {@element Link} elements. Usually there will be a direct
link. For example, here are the <code>"product"</code>
and <code>"product_class"</code> tables that we wish to build
the <code>[Product]</code> dimension on:</p>

{@xml
<Table name='product' keyColumn='product_id'/>
<Table name='product_class' keyColumn='product_class_id'/>
<Link target='product' source='product_class' foreignKeyColumn='product_class_id'/>
}

<p>Mondrian will give an error if it cannot find a path, or if there
is more than one path.</p>

<p>Now, define the dimension:</p>

{@xml
<Dimension name='Product' table='product' key='Product Id'>
  <Attributes>
    <Attribute name='Product Family' table='product_class' keyColumn='product_family'/>
    <Attribute name='Product Department' table='product_class'>
      <Key>
        <Column name='product_family'/>
        <Column name='product_department'/>
      </Key>
    </Attribute>
    <Attribute name='Brand Name' table='product_class'>
      <Key>
        <Column name='product_family'/>
        <Column name='product_department'/>
        <Column table='product_class' name='brand_name'/>
      </Key>
    </Attribute>
    <Attribute name='Product Name' table='product' keyColumn='product_id' nameColumn='product_name'/>
    <Attribute name='Product Id' table='product' keyColumn='product_id'/>
  </Attributes>
</Dimension>
}

<p>The <code>table</code> attribute occurs in several places in this
example. It can occur on {@element Dimension}, {@element Attribute}
and {@element Column} elements. Elements that do not specify a table
inherit their parent element's table. The
{@element Dimension name='Product' table='product' key='Product Id'}
element establishes a default table of <code>product</code> for the
dimension.
The {@element Attribute name='Brand Name' table='product_class'}
element overrides, and its
{@element Column table='product_class' name='brand_name'} child
element overrides again.</p>

<p>Think carefully before introducing a snowflake
dimension. Normalizing the dimension table into multiple tables may
save some disk space (although very little on a column-oriented
database or any analytic database with good compression) but
introduces another join, and the cost of that join often outweighs any
benefits. One reasonable case for snowflake dimensions is where you
are heavily using aggregate tables at the granularity of the outer
table. (In the example, this would occur if a lot of important queries
involved the <code>[Product].[Brand Name]</code> attribute and you
decided to create an aggregate table at that
level. Because <code>product_class</code> is a separate table, you
could join to it to get columns such as <code>product_family</code>
and <code>product_department</code>, and you would not need to include
them in the aggregate table.)</p>


<!--
###############################
##  3.6.3 Time dimensions #####
############################### -->
<h1>3.6.3 Time dimensions<a name="Time_dimensions">&nbsp;</a></h1>

<p>Time dimensions based on year/month/week/day are coded differently in the Mondrian schema
due to the MDX time related functions such as:</p>

<ul>
    <li><code>ParallelPeriod([level[, index[, member]]])</code></li>
    <li><code>PeriodsToDate([level[, member]])</code></li>
    <li><code>WTD([member])</code></li>
    <li><code>MTD([member])</code></li>
    <li><code>QTD([member])</code></li>
    <li><code>YTD([member])</code></li>
    <li><code>LastPeriod(index[, member])</code></li>
</ul>

<p>Time dimensions have <code>type="TimeDimension"</code>. The role of an attribute in a time dimension is
indicated by the attributes's <code>levelType</code> attribute, whose allowable values are as follows:</p>

    <table class="grayTable"  >
        <tr>
            <td><code>levelType</code> value</td>
            <td><b>Meaning</b></td>
        </tr>
        <tr>
            <td>TimeYears</td>
            <td>Level is a year</td>
        </tr>
        <tr>
            <td>TimeHalfYear</td>
            <td>Level is a half year</td>
        </tr>
        <tr>
            <td>TimeQuarters</td>
            <td>Level is a quarter</td>
        </tr>
        <tr>
            <td>TimeMonths</td>
            <td>Level is a month</td>
        </tr>
        <tr>
            <td>TimeWeeks</td>
            <td>Level is a week</td>
        </tr>
        <tr>
            <td>TimeDays</td>
            <td>Level represents days</td>
        </tr>
        <tr>
            <td>TimeHours</td>
            <td>Level represents hours</td>
        </tr>
        <tr>
            <td>TimeMinutes</td>
            <td>Level represents minutes</td>
        </tr>
        <tr>
            <td>TimeSeconds</td>
            <td>Level represents seconds</td>
        </tr>
    </table>

<p>Here is an example of a time dimension:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Dimension">Dimension</a> name=&quot;Time&quot; type=&quot;TimeDimension&quot;&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Hierarchy">Hierarchy</a> hasAll=&quot;true&quot; allMemberName=&quot;All Periods&quot; primaryKey=&quot;dateid&quot;&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_Table">Table</a> name=&quot;datehierarchy&quot;/&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_Level">Level</a> name=&quot;Year&quot; column=&quot;year&quot; uniqueMembers=&quot;true&quot; levelType=&quot;TimeYears&quot; type=&quot;Numeric&quot;/&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_Level">Level</a> name=&quot;Quarter&quot; column=&quot;quarter&quot; uniqueMembers=&quot;false&quot; levelType=&quot;TimeQuarters&quot;/&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_Level">Level</a> name=&quot;Month&quot; column=&quot;month&quot; uniqueMembers=&quot;false&quot; ordinalColumn=&quot;month&quot; nameColumn=&quot;month_name&quot; levelType=&quot;TimeMonths&quot; type=&quot;Numeric&quot;/&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_Level">Level</a> name=&quot;Week&quot; column=&quot;week_in_month&quot; uniqueMembers=&quot;false&quot; levelType=&quot;TimeWeeks&quot;/&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_Level">Level</a> name=&quot;Day&quot; column=&quot;day_in_month&quot; uniqueMembers=&quot;false&quot; ordinalColumn=&quot;day_in_month&quot; nameColumn=&quot;day_name&quot; levelType=&quot;TimeDays&quot; type=&quot;Numeric&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_Hierarchy">Hierarchy</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Dimension">Dimension</a>&gt;</div>
    </code>
</blockquote>

<!--
#################################
##  3.6.4 Member properties #####
################################# -->
<h1>3.6.4 Member properties<a name="Member_properties">&nbsp;</a></h1>

<p>Member properties are defined by the {@element Property} element
within an {@element Attribute}, like this:</p>

{@xml
<Attribute name="City" keyColumn="city_id">
  <Property attribute="Country"/>
  <Property attribute="State"/>
  <Property attribute="City Population" name="Population"/>
</Attribute>
}

<p>We are defining the <code>[City]</code> attribute and three
properties. Each property is defined in terms of another attribute in
the same dimension. The <code>State</code> and <code>Country</code>
properties inherit the name of the attribute they are defined from;
the property created from the <code>City Population</code> attribute
has an explicit <code>name</code> attribute to rename it
to <code>Population</code>.</p>

<p>Since properties are defined from attributes, they are not simple
values. They have a key, a name, a caption, and a sort order, just
like attributes.</p>

<p>The attribute used to define a property must be functionally
dependent. It would be illegal to define a property based on
the <code>[Zipcode]</code> attribute, for instance, because there
might be more than one zipcode in a given city. But each city has only
one value for state, country, and population.</p>

<p>You can also supply a nested {@element PropertyFormatter} element
define a <a href="#Property_formatter">property formatter</a>, which
is explained later.</p>

<p>Once properties have been defined in the schema, all members of
that attribute will have those properties. (This applies to members of
its attribute hierarchy, and also members of a level of an explicit
hierarchy if that level is based on that attribute.) In an MDX query,
you can access those properties via the
<code><i>member</i>.Properties("<i>propertyName</i>")</code> function,
for example:</p>

<blockquote>
<code>SELECT {[Measures].[Store Sales]} ON COLUMNS,<br/>
&nbsp; TopCount(<br/>
&nbsp;&nbsp;&nbsp; Filter(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Customer].[City].Members,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [Customer].[City].CurrentMember.Properties("Population") < 10000),<br/>
&nbsp;&nbsp;&nbsp; 10,<br/>
&nbsp;&nbsp;&nbsp; [Measures].[Store Sales]) ON ROWS<br/>
FROM [Sales]</code>
</blockquote>

<p>Mondrian deduces the type of the property expression, if it can. If the property name is a
constant string, the type is based upon the <code>type</code> attribute ("String", "Numeric" or "Boolean")
of the property definition. If the property name is an expression (for example,
<code>CurrentMember.Properties("Popu" + "lation")</code>), Mondrian will return an untyped
value.</p>

<!--
##########################################
## 3.3.4 Order and display of levels #####
########################################## -->
<h1>3.3.4 Order and display of levels<a name="Level_Order_and_Display">&nbsp;</a></h1>

<p>Notice in the time hierarchy example above the <code>ordinalColumn</code> and
<code>nameColumn</code> attributes on the <code>&lt;Level&gt;</code> element. These
affect how levels are displayed in a result. The <code>ordinalColumn</code> attribute specifies a
column in the Hierarchy table that provides the order of the members in a given level, while the
<code>nameColumn</code> specifies a column that will be displayed.</p>

<p>For example, in the Month level above, the <code>datehierarchy</code> table has month (1 .. 12)
and month_name (January, February, ...) columns. The column value that will be used internally within MDX is the
month column, so valid member specifications will be of the form:
<code>[Time].[2005].[Q1].[<b><i>1</i></b>]</code>. Members of the <code>[Month]</code>
level will be displayed in the order January, February, etc.</p>

<p>In a parent-child hierarchy, members are always sorted in hierarchical
order. The <code>ordinalColumn</code> attribute controls the order that
siblings appear within their parent.</p>

<p>Ordinal columns may be of any datatype which can legally be used in
an ORDER BY clause.  Scope of ordering is per-parent, so in the
example above, the day_in_month column should cycle for each month.
Values returned by the JDBC driver should be non-null instances of <a
href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Comparable.html">
java.lang.Comparable</a>
which yield the desired ordering when their
<code>Comparable.compareTo</code> method is called.</p>

<p>Levels contain a <code>type</code> attribute, which can have values "<code>String</code>", "<code>Integer</code>", "<code>Numeric</code>", &quot;<code>Boolean</code>&quot;,
&quot;<code>Date</code>&quot;, &quot;<code>Time</code>&quot;, and &quot;<code>Timestamp</code>&quot;.
The default value is <code>&quot;Numeric&quot;</code> because key columns generally have a numeric type. If it is a
different type, Mondrian needs to know this so it can generate SQL statements
correctly; for example, string values will be generated enclosed in single
quotes:</p>
<blockquote>
    <p><code>WHERE productSku = '123-455-AA'</code></p>
</blockquote>

<!--
#####################################
##  3.3.6 Degenerate dimensions #####
##################################### -->
<h1>3.3.6 Degenerate dimensions<a name="Degenerate_dimensions">&nbsp;</a></h1>

<p>A <dfn>degenerate dimension</dfn> is a dimension which is so simple that it isn't worth
creating its own dimension table. For example, consider following the fact table:</p>

  <table id="table5" class="grayTable"  >
    <tr>
      <td><b>product_id</b></td>
      <td><b>time_id</b></td>
      <td><b>payment_method</b></td>
      <td><b>customer_id</b></td>
      <td><b>store_id</b></td>
      <td><b>item_count</b></td>
      <td><b>dollars</b></td>
    </tr>

    <tr>
      <td align="right">55</td>
      <td align="right">20040106</td>
      <td>Credit</td>
      <td align="right">123</td>
      <td align="right">22</td>
      <td align="right">3</td>
      <td align="right">$3.54</td>
    </tr>
    <tr>
      <td align="right">78</td>
      <td align="right">20040106</td>
      <td>Cash</td>
      <td align="right">89</td>
      <td align="right">22</td>
      <td align="right">1</td>
      <td align="right">$20.00</td>
    </tr>
    <tr>
      <td align="right">199</td>
      <td align="right">20040107</td>
      <td>ATM</td>
      <td align="right">3</td>
      <td align="right">22</td>
      <td align="right">2</td>
      <td align="right">$2.99</td>

    </tr>
    <tr>
      <td align="right">55</td>
      <td align="right">20040106</td>
      <td>Cash</td>
      <td align="right">122</td>
      <td align="right">22</td>
      <td align="right">1</td>
      <td align="right">$1.18</td>
    </tr>
  </table>

<p>and suppose we created a dimension table for the values in the <code>payment_method</code> column:</p>

  <table id="table6" class="grayTable"  >
    <tr>
      <td><b>payment_method</b></td>
    </tr>
    <tr>
      <td>Credit</td>
    </tr>

    <tr>
      <td>Cash</td>
    </tr>
    <tr>
      <td>ATM</td>
    </tr>
  </table>

<p>This dimension table is fairly pointless. It only has 3 values, adds no additional information,
and incurs the cost of an extra join.</p>

<p>Instead, you can create a degenerate dimension. To do this, declare a dimension without a
table, and Mondrian will assume that the columns come from the fact table.</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Cube">Cube</a> name=&quot;Checkout&quot;&gt;</div>
            <div style="padding-left:40px">&lt;!-- The fact table is always necessary. --&gt;</div>
            <div style="padding-left:40px">&lt;<a href="#XML_Table">Table</a> name=&quot;checkout&quot;&gt;</div>
            <div style="padding-left:40px">&lt;<a href="#XML_Dimension">Dimension</a> name=&quot;Payment method&quot;&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Hierarchy">Hierarchy</a> hasAll=&quot;true&quot;&gt;</div>
                    <div style="padding-left:80px">&lt;!-- No table element here. Fact table is assumed. --&gt;</div>
                    <div style="padding-left:80px">&lt;<a href="#XML_Level">Level</a> name=&quot;Payment method&quot; column=&quot;payment_method&quot; uniqueMembers=&quot;true&quot;/&gt;</div>
                <div style="padding-left:60px">&lt;/<a href="#XML_Hierarchy">Hierarchy</a>&gt;</div>
            <div style="padding-left:40px">&lt;/<a href="#XML_Dimension">Dimension</a>&gt;</div>
            <div style="padding-left:40px">&lt;!-- other dimensions and measures --&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Cube">Cube</a>&gt;</div>
    </code>
</blockquote>

<p>Note that because there is no join, the <code>foreignKey</code> attribute of
<code>Dimension</code> is not necessary, and the <code>Hierarchy</code>
element has no <code>&lt;Table&gt;</code> child element or
<code>primaryKey</code> attribute.</p>

<!--
################################################
##  3.3.9 Approximate level cardinality #####
################################################ -->
<h1>3.3.9 Approximate level cardinality<a name="Approximate_level_cardinality">&nbsp;</a></h1>

<p>The {@element Level} element allows specifying the optional attribute <code>approxRowCount</code>.  Specifying
    <code>approxRowCount</code> can improve performance by reducing the need to determine level, hierarchy, and dimension cardinality.
    This can have a significant impact when connecting to Mondrian via XMLA.</p>
<!--
################################################
##  3.3.10 Default Measure Attribute       #####
################################################ -->
<h1>3.3.10 Default Measure Attribute<a name="Default_Measure_Attribute">&nbsp;</a></h1>

<p>The {@element Cube} element allows specifying the
optional attribute "defaultMeasure".</p>

<p>Specifying <code>defaultMeasure</code> in the {@element Cube} element allows users
to explicitly specify any base measure as a default Measure.</p>

<p>Note that if a default measure is not specified it takes the first measure
defined in the cube as the default measure.</p>

<p>Specifying the <code>defaultMeasure</code> explicitly would be useful in
cases where you would want a calculated member to be picked up as the default
measure.</p>

{@xml
<Cube name="Sales" defaultMeasure="Unit Sales">
  ...
  <CalculatedMember name="Profit" dimension="Measures">
    <Formula>[Measures].[Store Sales] - [Measures].[Store Cost]</Formula>
    ...
  </CalculatedMember>
</Cube>
}

<!--
####################################################
##  3.3.11 Functional Dependency Optimizations #####
#################################################### -->
<h1>3.3.11 Functional Dependency Optimizations<a name="Functional_dependency_optimizations">&nbsp;</a></h1>

<p>In some circumstances, it may be possible to optimize performance by taking advantage
of known functional dependencies in the data being processed.  Such dependencies
are typically the result of business rules associated with the systems producing
the data, and often cannot be inferred just by looking at the data itself.</p>

<p>Functional dependencies are declared to Mondrian using the
<code>dependsOnLevelValue</code> attribute of the
{@element Property} element and the
<code>uniqueKeyLevelName</code> attribute of the {@element Hierarchy}
element.</p>

<p>The <code>dependsOnLevelValue</code> attribute of a
<a href="#Member_properties">member property</a> is used to indicate
that the value of the member property is functionally dependent on the value
of the {@element Level} in which the member property is
defined.  In other words, for a given value of the level, the value of the
property is invariant.</p>

<p>The <code>uniqueKeyLevelName</code> attribute of a
{@element Hierarchy} is used to indicate that the given
level (if any) taken together with all higher levels in the hierarchy acts as a
unique alternate key, ensuring that for any unique combination of those level values,
there is exactly one combination of values for all levels below it.

<p>To illustrate, consider a hierarchy modeling cars built and licensed in the
United States:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Dimension">Dimension</a> name="Automotive" foreignKey="auto_dim_id"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Hierarchy">Hierarchy</a> hasAll="true" primaryKey="auto_dim_id" uniqueKeyLevelName="Vehicle Identification Number"&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_Table">Table</a> name="automotive_dim"/&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Level">Level</a> name="Make" column="make_id" type="Numeric"/&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Level">Level</a> name="Model" column="model_id" type="Numeric"/&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Level">Level</a> name="ManufacturingPlant" column="plant_id" type="Numeric"/&gt;</div>
                    <div style="padding-left:80px">&lt;<a href="#XML_Property">Property</a> name="State" column="plant_state_id" type="Numeric" dependsOnLevelValue="true"/&gt;</div>
                    <div style="padding-left:80px">&lt;<a href="#XML_Property">Property</a> name="City" column="plant_city_id" type="Numeric" dependsOnLevelValue="true"/&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Level">Level</a> name="Vehicle Identification Number" column="vehicle_id" type="Numeric"/&gt;</div>
                    <div style="padding-left:80px">&lt;<a href="#XML_Property">Property</a> name="Color" column="color_id" type="Numeric" dependsOnLevelValue="true"/&gt;</div>
                    <div style="padding-left:80px">&lt;<a href="#XML_Property">Property</a> name="Trim" column="trim_id" type="Numeric" dependsOnLevelValue="true"/&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Level">Level</a> name="LicensePlateNum" column="license_id" type="String"/&gt;</div>
                    <div style="padding-left:80px">&lt;<a href="#XML_Property">Property</a> name="State" column="license_state_id" type="Numeric" dependsOnLevelValue="true"/&gt;</div>
            <div style="padding-left:40px">&lt;/<a href="#XML_Hierarchy">Hierarchy</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Dimension">Dimension</a>&gt;</div>
    </code>
</blockquote>

<p>In the above example, we know that a given manufacturing plant exists only in
a single city and state, that a given car only has one color scheme and
one trim level, and that the license number is associated with a single state.
Therefore, we can state that all of these member properties are functionally
dependent on the associated level values.</p>

<p>Additionally, we know that the Vehicle Identification Number uniquely identifies
each car, and that each car only has one license.  Thus, we know that the
combination of Make, Model, Manufacturing Plant, and Vehicle Identification
Number uniquely identifies each vehicle; the license number is redundant.</p>

<p>These attributes enable optimization of the GROUP BY clause in the SQL statements Mondrian generates.  Absent any
functional dependency information, a typical query on the Automotive dimension
would look something like:</p>


<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">SELECT</div>
            <div style="padding-left:40px;">`automotive_dim`.`make_id` AS c0,</div>
            <div style="padding-left:40px;">`automotive_dim`.`model_id` AS c1,</div>
            <div style="padding-left:40px;">`automotive_dim`.`plant_id` AS c2,</div>
            <div style="padding-left:40px;">`automotive_dim`.`plant_state_id` AS c3,</div>
            <div style="padding-left:40px;">`automotive_dim`.`plant_city_id` AS c4,</div>
            <div style="padding-left:40px;">`automotive_dim`.`vehicle_id` AS c5,</div>
            <div style="padding-left:40px;">`automotive_dim`.`color_id` AS c6,</div>
            <div style="padding-left:40px;">`automotive_dim`.`trim_id` AS c7,</div>
            <div style="padding-left:40px;">`automotive_dim`.`license_id` AS c8,</div>
            <div style="padding-left:40px;">`automotive_dim`.`license_state_id` AS c9</div>
        <div style="padding-left:20px;">FROM</div>
            <div style="padding-left:40px;">`automotive_dim` AS `automotive_dim`,</div>
        <div style="padding-left:20px;">GROUP BY</div>
            <div style="padding-left:40px;">`automotive_dim`.`make_id`,</div>
            <div style="padding-left:40px;">`automotive_dim`.`model_id`,</div>
            <div style="padding-left:40px;">`automotive_dim`.`plant_id`,</div>
            <div style="padding-left:40px;">`automotive_dim`.`plant_state_id`,</div>
            <div style="padding-left:40px;">`automotive_dim`.`plant_city_id`,</div>
            <div style="padding-left:40px;">`automotive_dim`.`vehicle_id`,</div>
            <div style="padding-left:40px;">`automotive_dim`.`color_id`,</div>
            <div style="padding-left:40px;">`automotive_dim`.`trim_id`,</div>
            <div style="padding-left:40px;">`automotive_dim`.`license_id`,</div>
            <div style="padding-left:40px;">`automotive_dim`.`license_state_id`</div>
        <div style="padding-left:20px;">ORDER BY</div>
            <div style="padding-left:40px;">`...</div>
    </code>
</blockquote>

<p>Given the functional dependence attributes in the schema example above, however,
we know that the query is selecting at a depth that includes the "unique key" level,
and that all properties in the query are also functionally dependent on their levels.
In such cases the GROUP BY clause is redundant and may be eliminated completely,
increasing SQL query performance significantly on some databases:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">SELECT</div>
            <div style="padding-left:40px;">`automotive_dim`.`make_id` AS c0,</div>
            <div style="padding-left:40px;">`automotive_dim`.`model_id` AS c1,</div>
            <div style="padding-left:40px;">`automotive_dim`.`plant_id` AS c2,</div>
            <div style="padding-left:40px;">`automotive_dim`.`plant_state_id` AS c3,</div>
            <div style="padding-left:40px;">`automotive_dim`.`plant_city_id` AS c4,</div>
            <div style="padding-left:40px;">`automotive_dim`.`vehicle_id` AS c5,</div>
            <div style="padding-left:40px;">`automotive_dim`.`color_id` AS c6,</div>
            <div style="padding-left:40px;">`automotive_dim`.`trim_id` AS c7,</div>
            <div style="padding-left:40px;">`automotive_dim`.`license_id` AS c8,</div>
            <div style="padding-left:40px;">`automotive_dim`.`license_state_id` AS c9</div>
        <div style="padding-left:20px;">FROM</div>
            <div style="padding-left:40px;">`automotive_dim` AS `automotive_dim`,</div>
        <div style="padding-left:20px;">ORDER BY</div>
            <div style="padding-left:40px;">`...</div>
    </code>
</blockquote>


<p>Had the query not been deep enough to include the "unique key" level, or
had any of the member properties not been functionally dependent on their level,
this optimization would not be possible.</p>

<p>In some cases, a different optimization can be made where there is no "unique key"
level, but some or all of the member properties are functionally dependent on
their level.  Some databases (notably MySQL) permit columns to be listed in the
SELECT clause that do not also appear in the GROUP BY clause.  On such databases,
Mondrian can simply leave the functionally dependent member properties out of
the GROUP BY, which may reduce SQL query processing time substantially:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">SELECT</div>
            <div style="padding-left:40px;">`automotive_dim`.`make_id` AS c0,</div>
            <div style="padding-left:40px;">`automotive_dim`.`model_id` AS c1,</div>
            <div style="padding-left:40px;">`automotive_dim`.`plant_id` AS c2,</div>
            <div style="padding-left:40px;">`automotive_dim`.`plant_state_id` AS c3,</div>
            <div style="padding-left:40px;">`automotive_dim`.`plant_city_id` AS c4,</div>
            <div style="padding-left:40px;">`automotive_dim`.`vehicle_id` AS c5,</div>
            <div style="padding-left:40px;">`automotive_dim`.`color_id` AS c6,</div>
            <div style="padding-left:40px;">`automotive_dim`.`trim_id` AS c7,</div>
            <div style="padding-left:40px;">`automotive_dim`.`license_id` AS c8,</div>
            <div style="padding-left:40px;">`automotive_dim`.`license_state_id` AS c9</div>
        <div style="padding-left:20px;">FROM</div>
            <div style="padding-left:40px;">`automotive_dim` AS `automotive_dim`,</div>
        <div style="padding-left:20px;">GROUP BY</div>
            <div style="padding-left:40px;">`automotive_dim`.`make_id`,</div>
            <div style="padding-left:40px;">`automotive_dim`.`model_id`,</div>
            <div style="padding-left:40px;">`automotive_dim`.`plant_id`,</div>
            <div style="padding-left:40px;">`automotive_dim`.`vehicle_id`,</div>
            <div style="padding-left:40px;">`automotive_dim`.`license_id`,</div>
        <div style="padding-left:20px;">ORDER BY</div>
            <div style="padding-left:40px;">`...</div>
    </code>
</blockquote>

<p>Please note that significant changes are anticipated to the schema syntax
in Mondrian 4.0, including a new approach to declaring functional dependencies.
While the expectation is that the 4.0 schema processor will maintain backward
compatibility with schemas developed for Mondrian 3.1, these are transitional
attributes introduced to allow support in the interim, and 4.0 will not be
backward compatible with them. Therefore, any schema using these attributes will
need to be migrated to the new syntax as part of upgrading to Mondrian 4.0.</p>

<!--
#############################
##  4. Physical schemas #####
############################# -->
<h3>4. Physical schemas<a name="Physical_schemas">&nbsp;</a></h3>

<p>A physical schema defines a set of tables, columns and
relationships between them. The relationships are
called <dfn>links</dfn>.</p>

<p>The goal of the physical schema is to isolate the logical schema
(cubes, dimensions, measures and so forth) from the actual
database. For example, a measure can be based upon a column and does
not need to know whether it is a real column or a column calculated
using a SQL expression.</p>

<p>Because the isolation layer exists, you can change the
implementation. For example, you could change a calculated column into
a real column, or change a query or inline table into a real table,
without changing the logical schema.</p>

<!--
###################
##  4.1 Table #####
################### -->
<h1>4.1 Table<a name="Table">&nbsp;</a></h1>

<p>A table is a named use of a database table.</p>

<p>Tables are declared using
the {@element Table} element. If
the fact table is not in the default schema, you can provide an
explicit schema using the "schema" attribute; for example:</p>

{@xml
<Table schema="Foodmart" name="sales_fact_1997"/>
}


<h1>4.2 Columns and calculated columns<a name="Column">&nbsp;</a></h1>

<p>Inside a table, you can optionally define {@element Column}
elements. For example:</p>

{@xml
<Table name='customer'>
  <ColumnDefs>
    <ColumnDef name='customer_id' type='Integer' internalType='int'/>
    <ColumnDef name='fname'/>
    <ColumnDef name='lname'/>
    <CalculatedColumnDef name='full_name' type='String'>
      <ExpressionView>
        <SQL dialect='mysql'>
          CONCAT(<Column name='fname'/>, ' ', <Column name='lname'/>)
        </SQL>
        <SQL dialect='generic'>
          <Column name='fullname'/>
        </SQL>
      </ExpressionView>
    </CalculatedColumnDef>
  </ColumnDefs>
</Table>
}

<p>If you do not include a {@element ColumnDefs} section, Mondrian
will read column definitions from JDBC. Such single-line table
definitions are adequate for most purposes.</p>

<p>The
{@element ColumnDef name='customer_id' type='Integer' internalType='int'}
declares that the <code>customer</code> table has
a <code>customer_id</code> column and that we want to use it as an
integer. This affects how the column is sorted, and affects the MDX
type of expressions built from this column.  The underlying column
might have a different type such as <code>FLOAT</code>
or <code>VARCHAR(20)</code>.</p>

<p>The attribute <code>internalType='int'</code> tells Mondrian how to
represent the value internally. The value <code>int</code> means that
Mondrian will use <code>getInt</code> JDBC calls to access the values,
and store them using Java <code>int</code> values.</p>

<p>The next two {@element ColumnDef} elements just make explicit the
fact that we expect the <code>fname</code> and <code>lname</code>
columns to exist.</p>

<p>The {@element CalculatedColumnDef} defines a column using a SQL
expression. Note that you can include SQL for multiple
dialects. Mondrian will choose the right SQL expression for the
current backend database. (This is very useful when defining a
packaged application that needs to run unchanged on multiple backend
databases.)</p>

<p>The SQL can include embedded {@element Column} elements. Mondrian
replaces these with references to columns, qualifying with a table
alias and quoting identifiers appropriately for the current SQL
dialect. (This might become <code>`customer`.`customer_id`</code> on
MySQL, or <code>&quot;customer&quot;.&quot;customer_id&quot;</code> on
Oracle.</p>

<p>You can also use the {@element Query}
construct to build more complicated SQL statements.</p>

<!--
##########################
##  4.3 Inline table #####
########################## -->
<h1>4.3 Inline table<a name="Inline_table">&nbsp;</a></h1>

<p>The {@element InlineTable} construct allows
you to define a dataset in the schema file. You must declare the names of the columns, the column types
(&quot;String&quot; or &quot;Numeric&quot;), and a set of rows. As for
{@element Table} and
{@element View}, you must provide a unique alias with which
to refer to the dataset.</p>

<p>Here is an example:</p>

{@xml
<Dimension name="Severity">
  <Hierarchy hasAll="true" primaryKey="severity_id">
    <InlineTable alias="severity">
      <ColumnDefs>
        <ColumnDef name="id" type="Numeric"/>
        <ColumnDef name="desc" type="String"/>
      </ColumnDefs>
      <Rows>
        <Row>
          <Value column="id">1</Value>
          <Value column="desc">High</Value>
        </Row>
        <Row>
          <Value column="id">2</Value>
          <Value column="desc">Medium</Value>
        </Row>
        <Row>
          <Value column="id">3</Value>
          <Value column="desc">Low</Value>
        </Row>
      </Rows>
    </InlineTable>
    <Level name="Severity" column="id" nameColumn="desc" uniqueMembers="true"/>
  </Hierarchy>
</Dimension>
}

<p>This has the same effect as if you had a table called 'severity' in
your database:</p>

  <table   id="table7" class="grayTable">
    <tr>
      <td><b>id</b></td>
      <td><b>desc</b></td>
    </tr>
    <tr>
      <td>1</td>
      <td>High</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Medium</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Low</td>
    </tr>
  </table>

<p>and the declaration</p>

{@xml
<Dimension name="Severity">
  <Hierarchy hasAll="true" primaryKey="severity_id">
    <Table name="severity"/>
    <Level name="Severity" column="id" nameColumn="desc" uniqueMembers="true"/>
  </Hierarchy>
</Dimension>
}

<p>To specify a NULL value for a column, omit the <code>&lt;Value&gt;</code>
for that column, and the column's value will default to NULL.</p>

<!--
###################
##  4.4 Query #####
################### -->
<h1>4.4 Query<a name="Query">&nbsp;</a></h1>

<p>A {@element Query} element defines a table by executing a SQL
statement. It is similar to a view definition in an RDBMS. As for
{@element CalculatedColumnDef}, you can provide a different SQL
expression for different SQL dialects.</p>

<p>Example:</p>

{@xml
<Query name='american_customers'>
  <ExpressionView>
    <SQL dialect='generic'>
      SELECT * FROM customer WHERE country = 'USA'
    </SQL>
  </ExpressionView>
</Query>
}

<!--
##################
##  4.5 Link #####
################## -->
<h1>4.5 Link<a name="Link">&nbsp;</a></h1>

<p>A {@element Link} defines a relationship between two tables. The
relationship is directed, in the same sense as a foreign key. It is
used as an automatic join path when the tables are used in
a <a href="#Star_and_snowflake_dimensions">snowflake
dimension</a>.</p>

<p>Here is how to define a link between the infamous <code>emp</code>
and <code>dept</code> tables.</p>

{@xml
<Table name='emp'>
  <Key>
    <Column name='empno'/>
  </Key>
</Table>
<Table name='dept'>
  <Key>
    <Column name='deptno'/>
  </Key>
</Table>
<Link target='emp' source='dept'>
  <ForeignKey>
    <Column name='deptno'/>
  </ForeignKey>
</Link>
}

<p>And here is a shorter, equivalent, version
using <code>keyColumn</code> and <code>foreignKeyColumn</code>
attributes. These <a href="#Schema_short_cuts">short cuts</a> are
possible because the keys are not composite.</p>

{@xml
<Table name='emp' keyColumn='empno'/>
<Table name='dept' keyColumn='deptno'/>
<Link target='emp' source='dept' foreignKeyColumn='deptno'/>
}

<p>Some other table-to-table connections in Mondrian schemas do not
automatically use links. For instance, you need to provide an explicit
{@element ForeignKeyLink} to connect the <code>sales_fact_1997</code>
fact table to the <code>customer</code> dimension table.</p>

<p>(Rationale as follows. If we used links for purposes such as
connecting fact to dimension tables, many schemas would become cyclic
or ambiguous (there might be multiple paths between various
tables). But we still think it is useful to be able define links in a
diagram, as a guideline for what join paths make sense. After all,
doesn't everyone wish there were a schema diagram for every schema?  A
schema modeler would, we hope, include a diagramming tool, and if
links are present, it would suggest that they are used when defining
connections in the schema.)</p>

<!--
####################################################
##  4.6 Table Hints #####
#################################################### -->
<h1>4.6 Table Hints<a name="Table_hints">&nbsp;</a></h1>

<p>Mondrian supports a limited set of database-specific hints for the
{@element Table} element, which will then be
passed on to SQL queries involving the table.  These hints are as
follows:</p>

    <table class="grayTable" id="table12" width="500">
        <tr>
            <td><b>Database</b></td>
            <td><b>Hint Type</b></td>
            <td><b>Permitted Values</b></td>
            <td><b>Description</b></td>
        </tr>
        <tr>
            <td>MySQL</td>
            <td><code>force_index</code></td>
            <td>The name of an index on this table</td>
            <td>Forces the named index to be used when selecting level values
            from this table.</td>
        </tr>
        </table>

<p>For example:</p>

{@xml
<Table name="automotive_dim">
  <Hint type="force_index">my_index</Hint>
</Table>
}

<p>As with the functional dependency optimizations, support for table hints
is in a transitional stage, and are likely to change in Mondrian 4.0.  Any
schema using them may need to be migrated to the new schema syntax as part of
upgrading to Mondrian 4.0.</p>

<!--
#######################################
##  4. Star and snowflake schemas #####
####################################### -->
<h3>4. Star and snowflake schemas<a name="Star_schemas">&nbsp;</a></h3>

<p>We saw earlier how to build a cube based upon a fact table, and dimensions in the fact
table ("Payment method") and in a table joined to the fact table ("Gender"). This is the
most common kind of mapping, and is known as a <dfn>star schema</dfn>.</p>

<p>But a dimension can be based upon more than one table, provided that there is a well-defined
path to join these tables to the fact table. This kind of dimension is known as a snowflake,
and is defined using the <code>&lt;<a href="#XML_Join">Join</a>&gt;</code> operator. For example:</p>

<blockquote style="text-indent: -20px;">
<code>
    <div style="padding-left:20px;">&lt;<a href="#XML_Cube">Cube</a> name=&quot;Sales&quot;&gt;</div>
        <div style="padding-left:40px;">...</div>
        <div style="padding-left:40px;">&lt;<a href="#XML_Dimension">Dimension</a> name=&quot;Product&quot; foreignKey=&quot;product_id&quot;&gt;</div>
            <div style="padding-left:60px;">&lt;<a href="#XML_Hierarchy">Hierarchy</a> hasAll=&quot;true&quot; primaryKey=&quot;product_id&quot; primaryKeyTable=&quot;product&quot;&gt;</div>
                <div style="padding-left:80px;">&lt;<a href="#XML_Join">Join</a> leftKey=&quot;product_class_key&quot; rightAlias=&quot;product_class&quot; rightKey=&quot;product_class_id&quot;&gt;</div>
                    <div style="padding-left:100px;">&lt;<a href="#XML_Table">Table</a> name=&quot;product&quot;/&gt;</div>
                    <div style="padding-left:100px;">&lt;<a href="#XML_Join">Join</a> leftKey=&quot;product_type_id&quot; rightKey=&quot;product_type_id&quot;&gt;</div>
                        <div style="padding-left:120px;">&lt;<a href="#XML_Table">Table</a> name=&quot;product_class&quot;/&gt;</div>
                        <div style="padding-left:120px;">&lt;<a href="#XML_Table">Table</a> name=&quot;product_type&quot;/&gt;</div>
                    <div style="padding-left:100px;">&lt;/<a href="#XML_Join">Join</a>&gt;</div>
                <div style="padding-left:80px;">&lt;/<a href="#XML_Join">Join</a>&gt;</div>
                <div style="padding-left:80px">&lt;!-- Level declarations ... --&gt;</div>
            <div style="padding-left:60px">&lt;/<a href="#XML_Hierarchy">Hierarchy</a>&gt;</div>
        <div style="padding-left:40px;">&lt;/<a href="#XML_Dimension">Dimension</a>&gt;</div>
    <div style="padding-left:20px;">&lt;/<a href="#XML_Cube">Cube</a>&gt;</div>
</code>
</blockquote>

<p>This defines a <code>"Product"</code> dimension consisting of three tables. The
fact table joins to <code>"product"</code> (via the foreign key <code>
"product_id"</code>), which joins to <code>"product_class"</code> (via the foreign
key <code>"product_class_id"</code>), which joins to <code>"
product_type"</code> (via the foreign key <code>"product_type_id"</code>). We require
a <code>&lt;Join&gt;</code> element nested within a <code>&lt;Join&gt;
</code> element because <code>&lt;Join&gt;</code> takes two operands; the operands
can be tables, joins, or even queries.</p>

<p>The arrangement of the tables seems complex; the simple rule of thumb is to order the tables
by the number of rows they contain. The <code>"product"</code> table has the most
rows, so it joins to the fact table and appears first; <code>"product_class"</code>
has fewer rows, and <code>"product_type"</code>, at the tip of the snowflake, has
least of all.</p>

<p>Note that the outer <code>&lt;Join&gt;</code> element has a <code>
rightAlias</code> attribute. This is necessary because the right component of the join (the inner
<code>&lt;Join&gt;</code> element) consists of more than one table. No
<code>leftAlias</code> attribute is necessary in this case, because the leftKey
column unambiguously comes from the <code>"product"</code> table.</p>
<!--
###############################
##  4.1 Shared dimensions #####
############################### -->
<h1>4.1 Shared dimensions<a name="Shared_dimensions">&nbsp;</a></h1>

<p>When generating the SQL for a join, Mondrian needs to know which column to join to. If you are
joining to a join, then you need to tell it which of the tables in the join that column belongs
to (usually it will be the first table in the join).</p>

<p>Because shared dimensions don't belong to a cube, you have to give them an explicit table
(or other data source). When you use them in a particular cube, you specify the foreign key. This
example shows the <code>Store Type</code> dimension being joined to the
<code>Sales</code> cube using the <code>sales_fact_1997.store_id
</code> foreign key, and to the <code>Warehouse</code> cube using the
<code>warehouse.warehouse_store_id</code> foreign key:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Dimension">Dimension</a> name="Store Type"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Hierarchy">Hierarchy</a> hasAll="true" primaryKey="store_id"&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Table">Table</a> name="store"/&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Level">Level</a> name="Store Type" column="store_type" uniqueMembers="true"/&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_Hierarchy">Hierarchy</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Dimension">Dimension</a>&gt;</div>
    <br/>
        <div style="padding-left:20px;">&lt;<a href="#XML_Cube">Cube</a> name="Sales"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Table">Table</a> name="sales_fact_1997"/&gt;</div>
            <div style="padding-left:40px;">...</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_DimensionUsage">DimensionUsage</a> name="Store Type" source="Store Type" foreignKey="store_id"/&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Cube">Cube</a>&gt;</div>
    <br/>
        <div style="padding-left:20px;">&lt;<a href="#XML_Cube">Cube</a> name="Warehouse"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Table">Table</a> name="warehouse"/&gt;</div>
            <div style="padding-left:40px;">...</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_DimensionUsage">DimensionUsage</a> name="Store Type" source="Store Type" foreignKey="warehouse_store_id"/&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Cube">Cube</a>&gt;</div>
    </code>
</blockquote>

<!--
########################################
##  5. Advanced logical constructs #####
######################################## -->
<h3>5. Advanced logical constructs<a name="Advanced_logical_constructs">&nbsp;</a></h3>

<!--
###########################
##  5.1 Virtual cubes #####
########################### -->
<h1>5.1 Virtual cubes<a name="Virtual_cubes">&nbsp;</a></h1>

<p>A virtual cube combines two or more regular cubes. It is defined by the <code><a href="#XML_VirtualCube">&lt;VirtualCube&gt;</a></code>
element:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_VirtualCube">VirtualCube</a> name=&quot;Warehouse and Sales&quot;&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_CubeUsages">CubeUsages</a>&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_CubeUsage">CubeUsage</a> cubeName=&quot;Sales&quot; ignoreUnrelatedDimensions=&quot;true&quot;/&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_CubeUsage">CubeUsage</a> cubeName=&quot;Warehouse&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_CubeUsages">CubeUsages</a>&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeDimension">VirtualCubeDimension</a> cubeName=&quot;Sales&quot; name=&quot;Customers&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeDimension">VirtualCubeDimension</a> cubeName=&quot;Sales&quot; name=&quot;Education Level&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeDimension">VirtualCubeDimension</a> cubeName=&quot;Sales&quot; name=&quot;Gender&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeDimension">VirtualCubeDimension</a> cubeName=&quot;Sales&quot; name=&quot;Marital Status&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeDimension">VirtualCubeDimension</a> name=&quot;Product&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeDimension">VirtualCubeDimension</a> cubeName=&quot;Sales&quot; name=&quot;Promotion Media&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeDimension">VirtualCubeDimension</a> cubeName=&quot;Sales&quot; name=&quot;Promotions&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeDimension">VirtualCubeDimension</a> name=&quot;Store&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeDimension">VirtualCubeDimension</a> name=&quot;Time&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeDimension">VirtualCubeDimension</a> cubeName=&quot;Sales&quot; name=&quot;Yearly Income&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeDimension">VirtualCubeDimension</a> cubeName=&quot;Warehouse&quot; name=&quot;Warehouse&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a> cubeName=&quot;Sales&quot; name=&quot;[Measures].[Sales Count]&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a> cubeName=&quot;Sales&quot; name=&quot;[Measures].[Store Cost]&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a> cubeName=&quot;Sales&quot; name=&quot;[Measures].[Store Sales]&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a> cubeName=&quot;Sales&quot; name=&quot;[Measures].[Unit Sales]&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a> cubeName=&quot;Sales&quot; name=&quot;[Measures].[Profit Growth]&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a> cubeName=&quot;Warehouse&quot; name=&quot;[Measures].[Store Invoice]&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a> cubeName=&quot;Warehouse&quot; name=&quot;[Measures].[Supply Time]&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a> cubeName=&quot;Warehouse&quot; name=&quot;[Measures].[Units Ordered]&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a> cubeName=&quot;Warehouse&quot; name=&quot;[Measures].[Units Shipped]&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a> cubeName=&quot;Warehouse&quot; name=&quot;[Measures].[Warehouse Cost]&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a> cubeName=&quot;Warehouse&quot; name=&quot;[Measures].[Warehouse Profit]&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a> cubeName=&quot;Warehouse&quot; name=&quot;[Measures].[Warehouse Sales]&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a> cubeName=&quot;Warehouse&quot; name=&quot;[Measures].[Average Warehouse Sale]&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;<span><a href="#XML_CalculatedMember">CalculatedMember</a></span> name=&quot;Profit Per Unit Shipped&quot; dimension=&quot;Measures&quot;&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_Formula">Formula</a>&gt;[Measures].[Profit] / [Measures].[Units Shipped]&lt;/<a href="#XML_Formula">Formula</a>&gt;</div>
            <div style="padding-left:40px;">&lt;/<span><a href="#XML_CalculatedMember">CalculatedMember</a></span>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_VirtualCube">VirtualCube</a>&gt;</div>
    </code>
</blockquote>

<p>The <code>&lt;<a href="#XML_CubeUsages">CubeUsages</a>&gt;</code>
element is optional. It specifies the cubes that are imported into the virtual cube.
Holds CubeUsage elements.</p>

<p>The <code>&lt;<a href="#XML_CubeUsage">CubeUsage</a>&gt;</code>
element is optional. It specifies the base cube that is imported into the
virtual cube. Currently it is possible to define a VirtualCubeMeasure and
similar imports from a base cube without defining CubeUsage for the cube.
The <code>cubeName</code> attribute specifies the base cube being imported.
The <code>ignoreUnrelatedDimensions</code> attribute specifies that the measures
from this base cube will have non joining dimension members pushed to the
top level member. This behaviour is currently supported for aggregation.
This attribute is by default false.
<code>ignoreUnrelatedDimensions</code> is an experimental feature similar to
the similarly named feature in SSAS 2005. 
<a href="http://msdn2.microsoft.com/en-us/library/ms128498.aspx">MSDN documentation</a>
mentions "When IgnoreUnrelatedDimensions is true, unrelated dimensions are forced
to their top level; when the value is false, dimensions are not forced to their
top level. This property is similar to the Multidimensional Expressions
(MDX) ValidMeasure function". Current Mondrian implementation of
<code>ignoreUnrelatedDimensions</code> depends on use of ValidMeasure. E.g. If we
want to apply this behaviour to "Unit Sales" measure in the "Warehouse and Sales"
virtual cube then we need to define a CubeUsage entry for "Sales" cube as shown
in the example above and also wrap this measure with ValidMeasure.</p>

<p>The <code>&lt;<a href="#XML_VirtualCubeDimension">VirtualCubeDimension</a>&gt;</code>
element imports a dimension from one of the constituent cubes. If you do not
specify the <code>cubeName</code> attribute, this means you
are importing a shared dimension. (If a shared dimension is used more than once
in a cube, there is no way, at present, to disambiguate which usage of the
shared dimension you intend to import.)</p>

<p>The <code>&lt;<a href="#XML_VirtualCubeMeasure">VirtualCubeMeasure</a>&gt;</code>
element imports a measure from one of the constituent cubes. It is imported with
the same name. If you want to create a formula, or just to rename a measure as
you import it, use the <code>&lt;<span><a href="#XML_CalculatedMember">CalculatedMember</a>&gt;</span></code>
element.</p>

<p>Virtual cubes occur surprisingly frequently in real-world applications. They
occur when you have fact tables of different granularities (say one measured at
the day level, another at the month level), or fact tables of different
dimensionalities (say one on Product, Time and Customer, another on Product,
Time and Warehouse), and want to present the results to an end-user who doesn't
know or care how the data is structured.</p>

<p>Any common dimensions -- shared dimensions which are used by both constituent
cubes -- are automatically synchronized. In this example, <code>[Time]</code>
and <code>[Product]</code> are common dimensions. So if the context is (<code>[Time].[1997].[Q2]</code>,
<code>[Product].[Beer].[Miller Lite]</code>), measures from either cube will
relate to this context.</p>

<p>Dimensions which only belong to one cube are called non-conforming
dimensions. The <code>[Gender]</code> dimension is an example of this: it exists
in the <code>Sales</code> cube but not <code>Warehouse</code>. If the context is
(<code>[Gender].[F]</code>, <code>[Time].[1997].[Q1]</code>), it makes sense to
ask the value of the <code>[Unit Sales]</code> measure (which comes from the
<code>[Sales]</code> cube) but not the <code>[Units Ordered]</code> measure (from <code>
[Warehouse]</code>). In the context of <code>[Gender].[F]</code>, <code>[Units
Ordered]</code> has value NULL.</p>

<!--
######################################
##  5.2 Parent-child hierarchies #####
###################################### -->

<h1>5.2 Parent-child hierarchies<a name="Parent_child_hierarchies">&nbsp;</a></h1>

<p>A conventional hierarchy has a rigid set of levels, and members which adhere to those
levels. For example, in the <code>Product</code> hierarchy, any member of the <code>Product Name
</code> level has a parent in the <code>Brand Name</code> level, which has a parent in the
<code>Product Subcategory</code> level, and so forth. This structure is sometimes too rigid
to model real-world data.</p>

<p>A <dfn>parent-child hierarchy</dfn> has only one level (not counting the special 'all' level),
but any member can have parents in the same level. A classic example is the reporting structure
in the <code>Employees</code> hierarchy:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Dimension">Dimension</a> name="Employees" foreignKey="employee_id"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Hierarchy">Hierarchy</a> hasAll="true" allMemberName="All Employees" primaryKey="employee_id"&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Table">Table</a> name="employee"/&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Level">Level</a> name="Employee Id" uniqueMembers="true" type="Numeric" column="employee_id" nameColumn="full_name" parentColumn="supervisor_id" nullParentValue="0"&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Property">Property</a> name="Marital Status" column="marital_status"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Property">Property</a> name="Position Title" column="position_title"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Property">Property</a> name="Gender" column="gender"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Property">Property</a> name="Salary" column="salary"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Property">Property</a> name="Education Level" column="education_level"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Property">Property</a> name="Management Role" column="management_role"/&gt;</div>
                <div style="padding-left:60px">&lt;/<a href="#XML_Level">Level</a>&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_Hierarchy">Hierarchy</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Dimension">Dimension</a>&gt;</div>
    </code>
</blockquote>

<p>The important attributes here are <code>parentColumn</code> and <code>nullParentValue</code>:</p>

<ul>
  <li>The <code>parentColumn</code> attribute is the name of the
column which links a member to its parent member; in this case, it is
the foreign key column which points to an employee's supervisor. The <code>&lt;ParentExpression&gt;</code>

child element of <code>&lt;Level&gt;</code> is equivalent to the <code>parentColumn</code>
attribute, but allows you to define an arbitrary SQL expression, just
like the <code>&lt;Expression&gt;</code> element. The <code>parentColumn</code>
attribute (or <code>&lt;ParentExpression&gt;</code> element) is the
only indication to Mondrian that a hierarchy has a parent-child
structure.</li>

  <li>The <code>nullParentValue</code> attribute is the value which
indicates that a member has no parent. The default is <code>nullParentValue="null"</code>,
but since many database don't index null values, schema designers
sometimes use values as the empty string, 0, and -1 instead.</li>
</ul>
<!--
###############################################
##  5.2.1 Tuning parent-child hierarchies #####
############################################### -->
<h1>5.2.1 Tuning parent-child hierarchies<a name="Tuning_parent-child_hierarchies">&nbsp;</a></h1>

<p>There's one serious problem with the parent-child hierarchy defined above, and that is the
amount of work Mondrian has to do in order to compute cell-totals. Let's suppose that the
employee table contains the following data:</p>

  <table id="table3.5"   class="grayTable">
      <tr>
        <td colspan="3"><b>employee</b></td>
      </tr>
      <tr>
        <td><b>supervisor_id</b></td>
        <td><b>employee_id</b></td>
        <td><b>full_name</b></td>
      </tr>
      <tr>
        <td>null</td>
        <td>1</td>
        <td>Frank</td>
      </tr>
      <tr>
        <td>1</td>
        <td>2</td>
        <td>Bill</td>
      </tr>
      <tr>
        <td>2</td>
        <td>3</td>
        <td>Eric</td>
      </tr>
      <tr>
        <td>1</td>
        <td>4</td>
        <td>Jane</td>
      </tr>
      <tr>
        <td>3</td>
        <td>5</td>
        <td>Mark</td>
      </tr>
      <tr>
        <td>2</td>
        <td>6</td>
        <td>Carla</td>
      </tr>
  </table>

<p>If we want to compute the total salary budget for Bill, we need to add in the salaries of Eric
and Carla (who report to Bill) and Mark (who reports to Eric). Usually Mondrian generates a
SQL <code>GROUP BY</code> statement to compute these totals, but there is no
(generally available) SQL construct which can traverse hierarchies. So by default,
Mondrian generates one SQL statement per supervisor, to retrieve and total all of that
supervisor's direct reports.</p>

<p>This approach has a couple of drawbacks. First, the performance is not very good if a
hierarchy contains more than a hundred members. Second, because Mondrian implements the
distinct-count aggregator by generating SQL, you cannot define a distinct-count
measure in
any cube which contains a parent-child hierarchy.</p>

<p>How can we solve these problems? The answer is to enhance the data so that Mondrian is
able to retrieve the information it needs using standard SQL. Mondrian supports a mechanism
called a <dfn>closure table</dfn> for this purpose.</p>
<!--
##############################
##  5.2.2 Closure tables #####
############################## -->
<h1>5.2.2 Closure tables<a name="Closure_tables">&nbsp;</a></h1>

<p>A closure table is a SQL table which contains a record for every employee/supervisor
relationship, regardless of depth. (In mathematical terms, this is called the 'reflexive
transitive closure' of the employee/supervisor relationship. The <code>distance</code>
column is not strictly required, but it makes it easier to populate the table.)</p>

  <table id="table3"   class="grayTable">
      <tr>
        <td colspan="3"><strong>employee_closure</strong></td>
    </tr>
      <tr>
        <td width="91"><strong>supervisor_id</strong></td>
        <td width="85"><strong>employee_id</strong></td>
        <td width="8"><strong>distance</strong></td>
      </tr>
      <tr>
        <td width="91">1</td>
        <td width="85">1</td>
        <td width="8">0</td>
      </tr>
      <tr>
        <td width="91">1</td>
        <td width="85">2</td>
        <td width="8">1</td>
      </tr>
      <tr>
        <td width="91">1</td>
        <td width="85">3</td>
        <td width="8">2</td>
      </tr>
      <tr>
        <td width="91">1</td>
        <td width="85">4</td>
        <td width="8">1</td>
      </tr>
      <tr>
        <td width="91">1</td>
        <td width="85">5</td>
        <td width="8">3</td>
      </tr>
      <tr>
        <td width="91">1</td>
        <td width="85">6</td>
        <td width="8">2</td>
      </tr>
      <tr>
        <td width="91">2</td>
        <td width="85">2</td>
        <td width="8">0</td>
      </tr>
      <tr>
        <td width="91">2</td>
        <td width="85">3</td>
        <td width="8">1</td>
      </tr>
      <tr>
        <td width="91">2</td>
        <td width="85">5</td>
        <td width="8">2</td>
      </tr>
      <tr>
        <td width="91">2</td>
        <td width="85">6</td>
        <td width="8">1</td>
      </tr>
      <tr>
        <td width="91">3</td>
        <td width="85">3</td>
        <td width="8">0</td>
      </tr>
      <tr>
        <td width="91">3</td>
        <td width="85">5</td>
        <td width="8">1</td>
      </tr>
      <tr>
        <td width="91">4</td>
        <td width="85">4</td>
        <td width="8">0</td>
      </tr>
      <tr>
        <td width="91">5</td>
        <td width="85">5</td>
        <td width="8">0</td>
      </tr>
      <tr>
        <td width="91">6</td>
        <td width="85">6</td>
        <td width="8">0</td>
      </tr>
  </table>

<p>In the catalog XML, the <code>&lt;<a href="#XML_Closure">Closure</a>&gt;</code> element maps
the level onto a <code>&lt;<a href="#XML_Table">Table</a>&gt;</code>:</p>

<blockquote>
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Dimension">Dimension</a> name="Employees" foreignKey="employee_id"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Hierarchy">Hierarchy</a> hasAll="true" allMemberName="All Employees" primaryKey="employee_id"&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_Table">Table</a> name="employee"/&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_Level">Level</a> name="Employee Id" uniqueMembers="true" type="Numeric"<br/> column="employee_id" nameColumn="full_name" parentColumn="supervisor_id" nullParentValue="0"&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Closure">Closure</a> parentColumn="supervisor_id" childColumn="employee_id"&gt;</div>
                        <div style="padding-left:100px;">&lt;<a href="#XML_Table">Table</a> name="employee_closure"/&gt;</div>
                    <div style="padding-left:80px;">&lt;/<a href="#XML_Closure">Closure</a>&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Property">Property</a> name="Marital Status" column="marital_status"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Property">Property</a> name="Position Title" column="position_title"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Property">Property</a> name="Gender" column="gender"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Property">Property</a> name="Salary" column="salary"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Property">Property</a> name="Education Level" column="education_level"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Property">Property</a> name="Management Role" column="management_role"/&gt;</div>
                <div style="padding-left:60px;">&lt;/<a href="#XML_Level">Level</a>&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_Hierarchy">Hierarchy</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Dimension">Dimension</a>&gt;</div>
    </code>
</blockquote>

<p>This table allows totals to be evaluated in pure SQL. Even though this introduces an extra
table into the query, database optimizers are very good at handling joins. I recommend that
you declare both <code>supervisor_id</code> and <code>employee_id</code> NOT NULL, and index
them as follows:</p>

<blockquote>
  <code>CREATE UNIQUE INDEX employee_closure_pk ON employee_closure (<br/>
&nbsp;&nbsp; supervisor_id,<br/>
&nbsp;&nbsp; employee_id);<br/>
CREATE INDEX employee_closure_emp ON employee_closure (<br/>
&nbsp;&nbsp; employee_id);</code>
</blockquote>

<h1>5.2.3 Populating closure tables<a name="Populating_closure_tables">&nbsp;</a></h1>

<p>The table needs to be re-populated whenever the hierarchy changes, and it is 
the application's responsibility to do so &mdash; Mondrian does not do this!</p>

<p>If you are using <a href="http://kettle.pentaho.com/">Pentaho Data Integration (Kettle)</a>, there is a special step 
to populate closure tables as part of the ETL process. Further details in the
<a href="http://wiki.pentaho.com/display/EAI/Closure+Generator">Pentaho Data 
Integration wiki</a>.</p>

<p/>
<table cellspacing="4" border="1" style="border-collapse: collapse">
    <tr>
        <td>
        <img
            border="0"
            src="http://wiki.pentaho.com/download/attachments/1050777/closure-generator-step.png"
            alt="Closure Generator step in Pentaho Data Integration"
            width="474"
            height="218">
        <p align="center">
        <i>Closure Generator step in Pentaho Data Integration</i>
        </p>
        </td>
    </tr>
</table>

<p>If you are not using Pentaho Data Integration, you can populate the table 
yourself using SQL. Here is an example of a MySQL stored procedure that populates a closure table.</p>

<blockquote>
  <code>DELIMITER //<br/>
    <br/>
    CREATE PROCEDURE populate_employee_closure()<br/>
BEGIN<br/>
&nbsp; DECLARE distance int;<br/>
&nbsp; TRUNCATE TABLE employee_closure;<br/>
&nbsp; SET distance = 0;<br/>
&nbsp; <i>-- seed closure with self-pairs (distance 0)</i><br/>
&nbsp; INSERT INTO employee_closure (supervisor_id, employee_id, distance)<br/>
&nbsp;&nbsp;&nbsp; SELECT employee_id, employee_id, distance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FROM employee;<br/>
  <br/>
&nbsp; <i>-- for each pair (root, leaf) in the closure,<br/>
&nbsp; -- add (root, leaf-&gt;child) from the base table</i><br/>
&nbsp; REPEAT<br/>
&nbsp;&nbsp;&nbsp; SET distance = distance + 1;<br/>
&nbsp;&nbsp;&nbsp; INSERT INTO employee_closure (supervisor_id, employee_id, distance)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SELECT employee_closure.supervisor_id, employee.employee_id, distance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FROM employee_closure, employee<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHERE employee_closure.employee_id = employee.supervisor_id<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AND employee_closure.distance = distance - 1;<br/>
&nbsp; UNTIL (ROW_COUNT() == 0))<br/>
&nbsp; END REPEAT;<br/>
END //<br/>
    <br/>
    DELIMITER ;</code>
</blockquote>

<!--
################################
##  5.4 Calculated members #####
################################ -->
<h1>5.4 Calculated members<a name="Calculated_members">&nbsp;</a></h1>

<p>Suppose you want to create a measure whose value comes not from a column of the fact table,
but from an MDX formula. One way to do this is to use a <code>WITH MEMBER</code> clause, like
this:</p>

<blockquote>
  <code>WITH MEMBER [Measures].[Profit] AS '[Measures].[Store
Sales]-[Measures].[Store Cost]',<br/>
&nbsp;&nbsp; FORMAT_STRING = '$#,###'<br/>
SELECT {[Measures].[Store Sales], [Measures].[Profit]} ON COLUMNS,<br/>
&nbsp; {[Product].Children} ON ROWS<br/>
FROM [Sales]<br/>
WHERE [Time].[1997]</code>
</blockquote>

<p>But rather than including this clause in every MDX query of your application, you can define
the member in your schema, as part of your cube definition:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_CalculatedMember">CalculatedMember</a> name="Profit" dimension="Measures"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Formula">Formula</a>&gt;[Measures].[Store Sales] - [Measures].[Store Cost]&lt;/<a href="#XML_Formula">Formula</a>&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_CalculatedMemberProperty">CalculatedMemberProperty</a> name="FORMAT_STRING" value="$#,##0.00"/&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_CalculatedMember">CalculatedMember</a>&gt;</div>
    </code>
</blockquote>

<p>You can also declare the formula as an XML attribute, if you prefer. The effect is just the same.</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_CalculatedMember">CalculatedMember</a> name="Profit" dimension="Measures" formula="[Measures].[Store Sales]-[Measures].[Store Cost]"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_CalculatedMemberProperty">CalculatedMemberProperty</a> name="FORMAT_STRING" value="$#,##0.00"/&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_CalculatedMember">CalculatedMember</a>&gt;</div>
    </code>
</blockquote>

<p>Note that the <code>&lt;<a href="#XML_CalculatedMemberProperty">CalculatedMemberProperty</a>&gt;</code>
(not <code>&lt;<a href="#XML_Property">Property</a>&gt;</code>) element corresponds
to the <code>FORMAT_STRING = '$#,###'</code> fragment of the MDX statement. You can define
other properties here too, but <code>FORMAT_STRING</code> is by far the most useful in practice.</p>

<p>The <code>FORMAT_STRING</code> property value can also be evaluated using an expression.
When formatting a particular cell, first the expression is evaluated to yield a format string,
then the format string is applied to the cell value. Here is the same property with a conditional
format string:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_CalculatedMemberProperty">CalculatedMemberProperty</a> name="FORMAT_STRING" expression="Iif(Value &lt; 0, '|($#,##0.00)|style=red', '|$#,##0.00|style=green')"/&gt;</div>
    </code>
</blockquote>

<p>For more details about format strings, see the
<a href="mdx.html#Format_strings">MDX specification</a>.</p>

<p>One additional calculated member property that is worth mentioning is DATATYPE.
As with <a href="#Measures">measures</a>,
setting datatype specifies how the calculated member is returned via XML for Analysis.
The DATATYPE property of a calculated member can have values "<code>String</code>", "<code>Integer</code>", or
"<code>Numeric</code>":
</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_CalculatedMemberProperty">CalculatedMemberProperty</a> name="DATATYPE" value="Numeric"/&gt;</div>
    </code>
</blockquote>

<p>You can specify SOLVE_ORDER for the calculated member property. Solve order
    determines the priority of calculation in the event of competing expressions</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_CalculatedMemberProperty">CalculatedMemberProperty</a> name="SOLVE_ORDER" value="2000"/&gt;</div>
    </code>
</blockquote>

<p>You can make a calculated member or a measure invisible. If you specify <code>visible="false"</code>
(the default is "true") in the <code>&lt;<a href="#XML_Measure">Measure</a>&gt;</code> or
<code>&lt;<a href="#XML_CalculatedMember">CalculatedMember</a>&gt;</code> element, user-interfaces such as
JPivot will notice this property and hide the member. This is useful if you want to perform
calculations in a number of steps, and hide intermediate steps from end-users. For example,
here only "Margin per Sqft" is visible, and its factors "Store Cost", "Margin" and "Store Sqft"
are hidden:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Measure">Measure</a> name="Store Cost" column="store_cost" aggregator="sum" formatString="#,###.00" visible="false"/&gt;</div>
        <div style="padding-left:20px;">&lt;<a href="#XML_CalculatedMember">CalculatedMember</a> name="Margin" dimension="Measures" visible="false"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Formula">Formula</a>&gt;([Measures].[Store Sales] - [Measures].[Store Cost]) / [Measures].[Store Cost]&lt;/<a href="#XML_Formula">Formula</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_CalculatedMember">CalculatedMember</a>&gt;</div>
        <div style="padding-left:20px;">&lt;<a href="#XML_CalculatedMember">CalculatedMember</a> name="Store Sqft" dimension="Measures" visible="false"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Formula">Formula</a>&gt;[Store].Properties("Sqft")&lt;/<a href="#XML_Formula">Formula</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_CalculatedMember">CalculatedMember</a>&gt;</div>
        <div style="padding-left:20px;">&lt;<a href="#XML_CalculatedMember">CalculatedMember</a> name="Margin per Sqft" dimension="Measures" visible="true"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Formula">Formula</a>&gt;[Measures].[Margin] / [Measures].[Store Cost]&lt;/<a href="#XML_Formula">Formula</a>&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_CalculatedMemberProperty">CalculatedMemberProperty</a> name="FORMAT_STRING" value="$#,##0.00"/&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_CalculatedMember">CalculatedMember</a>&gt;</div>
    </code>
</blockquote>

<!--
########################
##  5.5 Named sets #####
######################## -->
<h1>5.5 Named sets<a name="Named_sets">&nbsp;</a></h1>

<p>The <code>WITH SET</code> clause of an MDX statement allows you to declare a set expression
which can be used throughout that query. For example,</p>

<blockquote>
  <code>WITH SET [Top Sellers] AS <br/>
&nbsp;&nbsp;&nbsp; 'TopCount([Warehouse].[Warehouse Name].MEMBERS, 5,
[Measures].[Warehouse Sales])'<br/>
SELECT <br/>
&nbsp;&nbsp;&nbsp; {[Measures].[Warehouse Sales]} ON COLUMNS,<br/>
&nbsp;&nbsp;&nbsp; {[Top Sellers]} ON ROWS<br/>
FROM [Warehouse]<br/>

WHERE [Time].[Year].[1997]</code>
</blockquote>

<p>The <code>WITH SET</code> clause is very similar to the <code>WITH MEMBER</code> clause,
and as you might expect, it has a construct in schema analogous to
<code>&lt;<a href="#XML_CalculatedMember">CalculatedMember</a>&gt;</code>. The
<code>&lt;<a href="#XML_NamedSet">NamedSet</a>&gt;</code> element allows you to define a
named set in your schema as part of a cube definition. It is implicitly available for
any query against that cube:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Cube">Cube</a> name="Warehouse"&gt;</div>
            <div style="padding-left:40px;">...</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_NamedSet">NamedSet</a> name="Top Sellers"&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_Formula">Formula</a>&gt;TopCount([Warehouse].[Warehouse Name].MEMBERS, 5, [Measures].[Warehouse Sales])&lt;/<a href="#XML_Formula">Formula</a>&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_NamedSet">NamedSet</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Cube">Cube</a>&gt;</div>
<br />
  SELECT <br/>
&nbsp;&nbsp;&nbsp; {[Measures].[Warehouse Sales]} ON COLUMNS,<br/>
&nbsp;&nbsp;&nbsp; {[Top Sellers]} ON ROWS<br/>
FROM [Warehouse]<br/>
WHERE [Time].[Year].[1997]</code>
</blockquote>

  <table id="table4" class="grayTable"  >
      <tr>
        <td>
        <b>Warehouse</b>
        </td>
        <td><b>Warehouse Sales</b></td>
      </tr>
      <tr>
        <td>Treehouse Distribution</td>
        <td align="right">31,116.37</td>
      </tr>
      <tr>
        <td>Jorge Garcia, Inc.</td>
        <td align="right">30,743.77</td>
      </tr>
      <tr>
        <td>Artesia Warehousing, Inc.</td>
        <td align="right">29,207.96</td>
      </tr>
      <tr>
        <td>Jorgensen Service Storage</td>
        <td align="right">22,869.79</td>
      </tr>
      <tr>
        <td>Destination, Inc.</td>
        <td align="right">22,187.42</td>
      </tr>
  </table>

<p>A named set defined against a cube is not inherited by a virtual cube defined against
that cube. (But you can define a named set against a virtual cube.)</p>

<p>You can also define a named set as global to a schema:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Cube">Schema</a>&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Cube">Cube</a> name="Sales" ... /&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Cube">Cube</a> name="Warehouse" ... /&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_VirtualCube">VirtualCube</a> name="Warehouse and Sales" .../&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_NamedSet">NamedSet</a> name="CA Cities" formula="{[Store].[USA].[CA].Children}"/&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_NamedSet">NamedSet</a> name="Top CA Cities"&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Formula">Formula</a>&gt;TopCount([CA Cities], 2, [Measures].[Unit Sales])&lt;/<a href="#XML_Formula">Formula</a>&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_NamedSet">NamedSet</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Cube">Schema</a>&gt;</div>
    </code>
</blockquote>

<p>A named set defined against a schema is available in all cubes and virtual cubes in that
schema. However, it is only valid if the cube contains dimensions with the names required to
make the formula valid. For example, it would be valid to use <code>[CA Cities]</code> in
queries against the <code>[Sales]</code> and <code>[Warehouse and Sales]</code> cubes, but
if you used it in a query against the <code>[Warehouse]</code> cube you would get an error,
because <code>[Warehouse]</code> does not have a <code>[Store]</code> dimension.</p>
<!--
########################
##  plugins        #####
######################## -->
<h3>6. Plug-ins<a name="Plugins">&nbsp;</a></h3>

<p>Sometimes Mondrian's schema language isn't flexible enough, or the MDX language isn't
powerful enough, to solve the problem at hand. What you want to do is add a little of your
own Java code into the Mondrian application, and a <dfn>plug-in</dfn> is a way to do this.</p>

<p>Each of Mondrian's extensions is technically a Service Provider Interface (SPI); in short,
a Java interface which you write code to implement, and which Mondrian will call at runtime.
You also need to register an extension (usually somewhere in your schema.xml file) and to
ensure that it appears on the classpath.</p>

<p>Plug-ins include <a href="#User-defined_function">
user-defined functions</a>; <a href="#Cell_formatter">
cell</a>, <a href="#Member_formatter">member</a> and
<a href="#Property_formatter">property formatters</a>;
<a href="#Dynamic_schema_processor">dynamic schema processors</a> and
<a href="#DataSource_change_listener">data source change listeners</a>.
There is incomplete support for <a href="#Member_reader">member
readers</a> and <a href="#Cell_reader">cell readers</a>,
and in future we may support pluggable
<a href="api/mondrian/rolap/sql/SqlQuery.Dialect.html">
SQL dialects</a>.</p>

<p>Some plug-ins (user-defined function, member formatter, property
formatter, cell formatter) can be implemented in a scripting language
such as JavaScript. In this case, you do not need to write a Java
class; you just enclose the script code within
a <a href="#XML_Script">Script</a> element in the mondrian schema
file. Extensions implemented in scripting languages do not in general
perform as well as extensions implemented in Java, but they are much
more convenient because you do not need to compile any code. Just
modify the script code in the mondrian schema file and re-load the
schema. The shorter code-debug-fix cycle allows you to develop your
application much faster. Once you have implemented the plug-in in
script, if performance is still a concern, you can translate your
plug-in into Java.</p>

<p>Other extensions
include <a href="#Dynamic_datasource_xmla_servlet">Dynamic datasource
XMLA servlet</a>.</p>

<!--
###################################
##  6.1 User-defined function #####
################################### -->
<h1>6.1 User-defined function<a name="User-defined_function">&nbsp;</a></h1>

<p>A user-defined function must have a public constructor and implement the
<a href="api/mondrian/spi/UserDefinedFunction.html">
mondrian.spi.UserDefinedFunction</a> interface. For example,</p>

<blockquote>
  <code>package com.example;<br/>
  <br/>
import mondrian.olap.*;<br/>

import mondrian.olap.type.*;<br/>
import mondrian.spi.UserDefinedFunction;<br/>
  <br/>
/**<br/>
&nbsp;* A simple user-defined function which adds one to its argument.<br/>
&nbsp;*/<br/>
public class PlusOneUdf implements UserDefinedFunction {<br/>
&nbsp;&nbsp;&nbsp; // public constructor<br/>

&nbsp;&nbsp;&nbsp; public PlusOneUdf() {<br/>
&nbsp;&nbsp;&nbsp; }<br/>
  <br/>
&nbsp;&nbsp;&nbsp; public String getName() {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "PlusOne";<br/>
&nbsp;&nbsp;&nbsp; }<br/>

  <br/>
&nbsp;&nbsp;&nbsp; public String getDescription() {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "Returns its argument
plus one";<br/>
&nbsp;&nbsp;&nbsp; }<br/>
  <br/>
&nbsp;&nbsp;&nbsp; public Syntax getSyntax() {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Syntax.Function;<br/>

&nbsp;&nbsp;&nbsp; }<br/>
  <br/>
&nbsp;&nbsp;&nbsp; public Type getReturnType(Type[] parameterTypes) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new NumericType();<br/>
&nbsp;&nbsp;&nbsp; }<br/>
  <br/>
&nbsp;&nbsp;&nbsp; public Type[] getParameterTypes() {<br/>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new Type[] {new
NumericType()};<br/>
&nbsp;&nbsp;&nbsp; }<br/>
  <br/>
&nbsp;&nbsp;&nbsp; public Object execute(Evaluator evaluator, Exp[]
arguments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final Object argValue =
arguments[0].evaluateScalar(evaluator);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (argValue instanceof
Number) {<br/>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return new Double(((Number) argValue).doubleValue() + 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
Argument might be a RuntimeException indicating that<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
the cache does not yet have the required cell value. The<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
function will be called again when the cache is loaded.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return null;<br/>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp; }<br/>
  <br/>
&nbsp;&nbsp;&nbsp; public String[] getReservedWords() {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return null;<br/>
&nbsp;&nbsp;&nbsp; }<br/>

}</code>
</blockquote>

<p>Declare it in your schema:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Schema">Schema</a> ...&gt;</div>
            <div style="padding-left:40px;">...</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_UserDefinedFunction">UserDefinedFunction</a> name="PlusOne" className="com.example.PlusOneUdf"/&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Schema">Schema</a>&gt;</div>
    </code>
</blockquote>

<p>And use it in any MDX statement:</p>

<blockquote>
  <code>WITH MEMBER [Measures].[Unit Sales Plus One] <br/>
&nbsp;&nbsp;&nbsp; AS 'PlusOne([Measures].[Unit
Sales])'<br/>
SELECT<br/>
&nbsp;&nbsp;&nbsp; {[Measures].[Unit Sales]} ON COLUMNS,<br/>

&nbsp;&nbsp;&nbsp; {[Gender].MEMBERS} ON ROWS<br/>
FROM [Sales]</code>
</blockquote>

<p>If a user-defined function has a public constructor with one string argument, Mondrian
will pass in the function's name. Why? This allows you to define two or more user-defined
functions using the same class:</p>

<blockquote>
  <code>package com.example;<br/>
  <br/>
import mondrian.olap.*;<br/>
import mondrian.olap.type.*;<br/>

import mondrian.spi.UserDefinedFunction;<br/>
  <br/>
/**<br/>
&nbsp;* A user-defined function which either adds one to or <br/>
&nbsp;* subtracts one from its argument.<br/>
&nbsp;*/<br/>
public class PlusOrMinusOneUdf implements UserDefinedFunction {<br/>
  &nbsp;&nbsp;&nbsp; private final name;<br/>

&nbsp;&nbsp;&nbsp; private final isPlus;<br/>
  <br/>
  &nbsp;&nbsp;&nbsp; // public constructor with one argument<br/>
&nbsp;&nbsp;&nbsp; public PlusOneUdf(String
name) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.name = name;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (name.equals("PlusOne")) {<br/>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
isPlus = true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if
(name.equals("MinusOne")) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
isPlus = false;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
throw new IllegalArgumentException("Unexpected name " + name);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>

&nbsp;&nbsp;&nbsp; }<br/>
  <br/>
&nbsp;&nbsp;&nbsp; public String getName() {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return name;<br/>
&nbsp;&nbsp;&nbsp; }<br/>
  <br/>
&nbsp;&nbsp;&nbsp; public String getDescription() {<br/>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "Returns its argument
plus or minus one";<br/>
&nbsp;&nbsp;&nbsp; }<br/>
  <br/>
&nbsp;&nbsp;&nbsp; public Syntax getSyntax() {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Syntax.Function;<br/>
&nbsp;&nbsp;&nbsp; }<br/>

  <br/>
&nbsp;&nbsp;&nbsp; public Type getReturnType(Type[] parameterTypes) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new NumericType();<br/>
&nbsp;&nbsp;&nbsp; }<br/>
  <br/>
&nbsp;&nbsp;&nbsp; public Type[] getParameterTypes() {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new Type[] {new
NumericType()};<br/>

&nbsp;&nbsp;&nbsp; }<br/>
  <br/>
&nbsp;&nbsp;&nbsp; public Object execute(Evaluator evaluator, Exp[]
arguments) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final Object argValue =
arguments[0].evaluateScalar(evaluator);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (argValue instanceof
Number) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (isPlus) {<br/>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return new Double(((Number) argValue).doubleValue() + 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
else {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return new Double(((Number) argValue).doubleValue() - 1);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
Argument might be a RuntimeException indicating that<br/>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
the cache does not yet have the required cell value. The<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
function will be called again when the cache is loaded.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return null;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br/>
&nbsp;&nbsp;&nbsp; }<br/>
  <br/>

&nbsp;&nbsp;&nbsp; public String[] getReservedWords() {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return null;<br/>
&nbsp;&nbsp;&nbsp; }<br/>
}</code>
</blockquote>

<p>and register two the functions in your schema:</p>

<blockquote>
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Schema">Schema</a> ...&gt;</div>
            <div style="padding-left:40px;">...</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_UserDefinedFunction">UserDefinedFunction</a> name="PlusOne" className="com.example.PlusOrMinusOneUdf"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_UserDefinedFunction">UserDefinedFunction</a> name="MinusOne" className="com.example.PlusOrMinusOneUdf"&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Schema">Schema</a>&gt;</div>
    </code>
</blockquote>

<p>If you're tired of writing duplicate user-defined function
declarations in schema files, you can pack your user-defined function
implemention classes into a jar file with a embedded
<code>META-INF/services/mondrian.spi.UserDefinedFunction</code>
resource file. This resource file contains class names of
implementations of interface mondrian.spi.UserDefinedFunction, one
name per line.  For more details, you may look into
<code>src/main/META-INF/services/mondrian.spi.UserDefinedFunction</code>
in the source distribution and the
<a href="http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html#Service%20Provider">
Service Provider</a> section of the specification of JAR files.
User-defined functions declared by this means are available to all
mondrian schemas in the JVM.</p>

<p>Caution: you can't define more than one user-defined function
implementations in one class when you declare user-defined functions
in this way. One function will be loaded for each class, and given the
name that the <code>getName()</code> method returns.</p>

<p>User-defined functions can also be implemented in a scripting
language, such as JavaScript. These functions may not perform quite as
well as Java UDFs or built-in functions, but they are a lot more
convenient to implement.</p>

<p>To define a UDF in script, use the <a href="#XML_Script">Script</a> element and include within it the followimg functions:</p>
<ul>
<li><code>getName()</code></li>
<li><code>getDescription()</code></li>
<li><code>getSyntax()</code></li>
<li><code>getParameterTypes()</code></li>
<li><code>getReturnType(parameterTypes)</code></li>
<li><code>execute(evaluator, arguments)</code></li>
</ul>

<p>The getName(), getDescription(), getReservedWords() and getSyntax()
methods are optional; getName() defaults to the name attribute in the
UserDefinedFunction element, getDescription() defaults to the name,
getReservedWords() returns the empty list, and getSyntax() defaults
to <a href="api/mondrian/olap/Syntax.html#Function">mondrian.olap.Syntax.Function</a>. The
other methods have similar meanings to the ones in the
UserDefinedFunction SPI.</p>

<p>Here is an example of the factorial function as a JavaScript UDF:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_UserDefinedFunction">UserDefinedFunction</a> name="Factorial"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Script">Script</a> language="JavaScript"&gt;</div>
                <div style="padding-left:60px">function getParameterTypes() {</div>
                <div style="padding-left:80px">  return new Array(new mondrian.olap.type.NumericType());</div>
                <div style="padding-left:60px">}</div>
                <div style="padding-left:60px">function getReturnType(parameterTypes) {</div>
                <div style="padding-left:80px">  return new mondrian.olap.type.NumericType();</div>
                <div style="padding-left:60px">}</div>
                <div style="padding-left:60px">function execute(evaluator, arguments) {</div>
                <div style="padding-left:80px">  var n = arguments[0].evaluateScalar(evaluator);</div>
                <div style="padding-left:80px">  return factorial(n);</div>
                <div style="padding-left:60px">}</div>
                <div style="padding-left:60px">function factorial(n) {</div>
                <div style="padding-left:80px">  return n &lt;= 1 ? 1 : n * factorial(n - 1);</div>
                <div style="padding-left:60px">}</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_Script">Script</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_UserDefinedFunction">UserDefinedFunction</a>&gt;</div>
    </code>
</blockquote>




<!--
############################
##  6.4 Cell formatter #####
############################ -->
<h1>6.4 Cell formatter<a name="Cell_formatter">&nbsp;</a></h1>

<p>A cell formatter modifies the behavior of <code>
<a href="api/mondrian/olap/Cell.html#getFormattedValue%28%29">
Cell.getFormattedValue()</a></code>. The class must implement the <code>
<a href="api/mondrian/spi/CellFormatter.html">
mondrian.spi.CellFormatter</a></code> interface, and is specified like this:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Measure">Measure</a> name="name"&gt;</div>
            <div style="padding-left:40px">&lt;<a href="#XML_CellFormatter">CellFormatter</a> className=&quot;com.example.MyCellFormatter&quot;/&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Measure">Measure</a>&gt;</div>
    </code>
</blockquote>

<p>(The previous syntax, using the 'formatter' attribute of the Measure
element, is deprecated, and will be removed in mondrian-4.0.)</p>

<p>You can specify a formatter in a scripting language such as
JavaScript, using the <a href="#XML_Script">Script</a> element:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Measure">Measure</a> name="name"&gt;</div>
            <div style="padding-left:40px">&lt;<a href="#XML_CellFormatter">CellFormatter</a>&gt;</div>
            <div style="padding-left:60px">&lt;<a href="#XML_Script">Script</a> language=&quot;JavaScript&quot;&gt;</div>
                <div style="padding-left:60px">&lt;/<a href="#XML_Script">Script</a>&gt;</div>
            <div style="padding-left:40px">&lt;/<a href="#XML_CellFormatter">CellFormatter</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Measure">Measure</a>&gt;</div>
    </code>
</blockquote>

<p>The script has available a <code>value</code> variable,
corresponding to the parameter of
the <a href="api/mondrian/spi/CellFormatter.html#formatCell(Object)">
mondrian.spi.CellFormatter.formatCell(Object value)</a></code>
method. The code fragment can have multiple statements, but must end
in a <code>return</code> statement.</p>

<p>For a calculated member that belongs to a cube or virtual cube, you
can also use the <a href="#XML_CellFormatter">CellFormatter</a>
element:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_CalculatedMember">CalculatedMember</a> name=&quot;name&quot; dimension=&quot;dimension&quot;&gt;</div>
            <div style="padding-left:40px">&lt;<a href="#XML_Formula">Formula</a>&gt;</div>
                <div style="padding-left:60px">[Measures].[Unit Sales] * 2</div>
            <div style="padding-left:40px">&lt;/<a href="#XML_Formula">Formula</a>&gt;</div>
            <div style="padding-left:40px">&lt;<a href="#XML_CellFormatter">CellFormatter</a>&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Script">Script</a> language=&quot;JavaScript&quot;&gt;</div>
                    <div style="padding-left:80px">var s = value.toString();</div>
                    <div style="padding-left:80px">while (s.length() < 20) {</div>
                    <div style="padding-left:100px">s = &quot;0&quot; + s;</div>
                    <div style="padding-left:80px">}</div>
                    <div style="padding-left:80px">return s;</div>
                <div style="padding-left:60px">&lt;/<a href="#XML_Script">Script</a>&gt;</div>
            <div style="padding-left:40px">&lt;/<a href="#XML_CellFormatter">CellFormatter</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Measure">Measure</a>&gt;</div>
    </code>
</blockquote>


<p>You can also define a formatter by setting the <code>CELL_FORMATTER</code> property of the member to the name of the formatter class.</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_CalculatedMember">CalculatedMember</a> name="name" formatter="com.example.MyCellFormatter"&gt;</div>
            <div style="padding-left:40px">&lt;<a href="#XML_CalculatedMemberProperty">CalculatedMemberProperty</a> name=&quot;CELL_FORMATTER&quot; value=&quot;com.example.MyCellFormatter&quot/&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_CalculatedMember">CalculatedMember</a>&gt;</div>
    </code>
</blockquote>

<p>For a calculated measure defined in the <code>WITH MEMBER</code> clause of an
MDX query, you can set the same property in the MDX to achieve the same effect:</p>

<blockquote>
  <code>WITH MEMBER [Measures].[Foo]<br/>
&nbsp; AS '[Measures].[Unit Sales] * 2',<br/>
&nbsp;&nbsp; CELL_FORMATTER='com.example.MyCellFormatter'<br/>
    SELECT {[Measures].[Unit Sales], [Measures].[Foo]} ON COLUMNS,<br/>
&nbsp;&nbsp;&nbsp; {[Store].Children} ON ROWS<br/>
    FROM [Sales]</code></blockquote>

<p>To define a scripted formatter, use
the <code>CELL_FORMATTER_SCRIPT</code>
and <code>CELL_FORMATTER_SCRIPT_LANGUAGE</code> properties:</p>

<blockquote>
  <code>WITH MEMBER [Measures].[Foo]<br/>
&nbsp; AS '[Measures].[Unit Sales] * 2',<br/>
&nbsp;&nbsp; CELL_FORMATTER_SCRIPT_LANGUAGE='JavaScript',<br/>
&nbsp;&nbsp; CELL_FORMATTER_SCRIPT='var s = value.toString(); while (s.length() < 20) s = &quot;0&quot; + s; return s;'<br/>
    SELECT {[Measures].[Unit Sales], [Measures].[Foo]} ON COLUMNS,<br/>
&nbsp;&nbsp;&nbsp; {[Store].Children} ON ROWS<br/>
    FROM [Sales]</code></blockquote>


<p>The cell formatter property is ignored if a member does not belong to the
<code>[Measures]</code> dimension.</p>

<!--
##############################
##  6.5 Member formatter #####
############################## -->
<h1>6.5 Member formatter<a name="Member_formatter">&nbsp;</a></h1>

<p>A member formatter modifies the behavior of <code>
<a href="api/mondrian/olap/Member.html#getCaption%28%29">
Member.getCaption()</a></code>. The class must implement
the <code><a href="api/mondrian/spi/MemberFormatter.html">
mondrian.spi.MemberFormatter</a></code> interface, and is specified
like this:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Level">Level</a> name="name" column=&quot;column&quot;&gt;</div>
            <div style="padding-left:40px">&lt;<a href="#XML_MemberFormatter">MemberFormatter</a> className=&quot;com.example.MyMemberFormatter&quot;/&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Level">Level</a>&gt;</div>
    </code>
</blockquote>

<p>(The previous syntax, using the 'formatter' attribute of the Level
element, is deprecated, and will be removed in mondrian-4.0.)</p>

<p>You can specify a formatter in a scripting language such as
JavaScript, using the <a href="#XML_Script">Script</a> element:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Level">Level</a> name="name" column=&quot;column&quot;&gt;</div>
            <div style="padding-left:40px">&lt;<a href="#XML_MemberFormatter">MemberFormatter</a>&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Script">Script</a> language=&quot;JavaScript&quot;&gt;</div>
                    <div style="padding-left:80px">return member.getName().toUpperCase();</div>
                <div style="padding-left:60px">&lt;/<a href="#XML_Script">Script</a>&gt;</div>
            <div style="padding-left:40px">&lt;/<a href="#XML_MemberFormatter">MemberFormatter</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Level">Level</a>&gt;</div>
    </code>
</blockquote>

<p>The script has available a <code>member</code> variable,
corresponding to the parameter of
the <a href="api/mondrian/spi/MemberFormatter.html#formatMember(Member)">
mondrian.spi.MemberFormatter.formatMember(Member member)</a></code>
method. The code fragment can have multiple statements, but must end
in a <code>return</code> statement.</p>


<!--
################################
##  6.6 Property formatter #####
################################ -->
<h1>6.6 Property formatter<a name="Property_formatter">&nbsp;</a></h1>

<p>A property formatter modifies the behavior of <code>
<a href="api/mondrian/olap/Member.html#getPropertyFormattedValue%28java.lang.String%29">
Property.getPropertyFormattedValue()</a></code>. The class must implement the <code>
<a href="api/mondrian/spi/PropertyFormatter.html">
mondrian.spi.PropertyFormatter</a></code> interface, and is specified like this:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Attribute">Attribute</a> name="My Attribute" column="attributeColumn" uniqueMembers="true"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Property">Property</a> name="My Property" column="propColumn"&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_PropertyFormatter">PropertyFormatter</a> className=&quot;com.example.MyPropertyFormatter&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_Property">Property</a></div>
        <div style="padding-left:20px;">&lt;<a href="#XML_Attribute">Attribute</a>/&gt;</div>
    </code>
</blockquote>

<p>You can specify a formatter in a scripting language such as
JavaScript, using the <a href="#XML_Script">Script</a> element:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Level">Level</a> name="name" column=&quot;column&quot;&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Property">Property</a> name="MyProp" column="PropColumn"&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_PropertyFormatter">PropertyFormatter</a>&gt;</div>
                <div style="padding-left:80px">&lt;<a href="#XML_Script">Script</a> language=&quot;JavaScript&quot;&gt;</div>
                    <div style="padding-left:100px">return member.getName().toUpperCase();</div>
                <div style="padding-left:80px">&lt;/<a href="#XML_Script">Script</a>&gt;</div>
                <div style="padding-left:60px">&lt;/<a href="#XML_PropertyFormatter">PropertyFormatter</a>&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_Property">Property</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Level">Level</a>&gt;</div>
    </code>
</blockquote>

<p>The script has
available <code>member</code>, <code>propertyName</code>
and <code>propertyValue</code> variables, corresponding to the
parameters of
the <a href="api/mondrian/spi/PropertyFormatter.html#formatProperty(Member,
String, Object)"> mondrian.spi.PropertyFormatter.formatProperty(Member
member, String propertyName, Object propertyValue)</a></code> method.
The code fragment can have multiple statements, but must end in
a <code>return</code> statement.</p>

<!--
######################################
##  6.7 Dynamic schema processor #####
###################################### -->
<h1>6.7 Dynamic schema processor<a name="Dynamic_schema_processor">&nbsp;</a></h1>

<p>A dynamic schema processor implements the <code>
<a href="api/mondrian/spi/DynamicSchemaProcessor.html">
    mondrian.spi.DynamicSchemaProcessor</a></code> interface. It is specified as part of
the connection string, like this:</p>

<blockquote>
  <code>Jdbc=jdbc:odbc:MondrianFoodMart; JdbcUser=ziggy;
JdbcPassword=stardust; DynamicSchemaProcessor=com.example.MySchemaProcessor</code>
</blockquote>

<p>The effect is that when reading the contents of the schema from a URL, Mondrian turns to
the schema processor rather than Java's default URL handler. This gives the schema reader
the opportunity to run a schema through a filter, or even generate an entire schema on the fly.</p>

<p>When <code>DynamicSchemaProcessor</code> is specified, schema would
be processed and reloaded on every ROLAP connection request. Property
<code>UseContentChecksum</code> should be used along with a schema processor
to enable caching of the schema:</p>

<blockquote><code>DataSource=java:/jdbc/MyWarehouse;
DynamicSchemaProcessor=com.example.MySchemaProcessor;
UseContentChecksum=true</code></blockquote>

<p>In this case once loaded schema would be cached until it
changes. If schema content changes, it is be reloaded. (The newly
loaded schema is regarded as a different schema, and will start with
empty caches.)</p>

<p>Dynamic schemas are a very powerful construct. As we shall see, an important application
for them is <a href="#I18n">internationalization</a>.</p>

<!--
#########################################
##  6.8 Data source change listener #####
######################################### -->
<h1>6.8 Data source change listener<a name="DataSource_change_listener">&nbsp;</a></h1>

<p>A data source change listener implements the <code>
<a href="api/mondrian/spi/DataSourceChangeListener.html">
mondrian.spi.DataSourceChangeListener</a></code> interface. It is specified as part of
the connection string, like this:</p>

<blockquote>
  <code>Jdbc=jdbc:odbc:MondrianFoodMart; JdbcUser=ziggy;
JdbcPassword=stardust; DataSourceChangeListener=com.example.MyChangeListener;</code>
</blockquote>

<p>Everytime mondrian has to decide whether it will use data from cache, it
will call the change listener.  When the change listener tells mondrian
the datasource has changed for a dimension, cube, ... then mondrian will
flush the cache and read from database again.</p>

<p>This class should be called in mondrian before any data is read, so
even before cache is build.  This way, the plugin is able to register
the first timestamp mondrian tries to read the datasource.</p>

<p>Each time a query is started, aggregate cache is checked to see if
it has changed.  If so, cache will be flushed and aggregates will be
reloaded from the data source.</p>

<p>Here is an example of a data source change listener plugin class:

<blockquote>
  <code>package com.example;<br/>
<br/>
import javax.sql.DataSource;<br/>
import java.sql.Connection;<br/>
import java.sql.ResultSet;<br/>
import java.sql.SQLException;<br/>
import java.sql.Timestamp;<br/>
<br/>
import mondrian.olap.MondrianDef;<br/>
import mondrian.rolap.RolapHierarchy;<br/>
import mondrian.rolap.RolapUtil;<br/>
import mondrian.rolap.agg.Aggregation;<br/>
import mondrian.rolap.RolapStar;<br/>
import mondrian.spi.impl.DataSourceChangeListenerImpl;<br/>
<br/>
public class MyChangeListener extends DataSourceChangeListenerImpl {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;public MyChangeListener() {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;public synchronized boolean isHierarchyChanged(RolapHierarchy hierarchy) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Since this function is called many times, it is a<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// good idea to not check the database every time.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// And use some sort of time interval...<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Get name of the table (does not work if based on view)<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String tableName = getTableName(hierarchy);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection jdbcConnection = null;<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DataSource dataSource =<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hierarchy.getRolapSchema().getInternalConnection().getDataSource();<br/>
<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;jdbcConnection = dataSource.getConnection();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (jdbcConnection != null) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Check database whether hierarchy data source has changed<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// ...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;public synchronized boolean isAggregationChanged(Aggregation aggregation) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// The first time, register star and bitKey and remember first time of access...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RolapStar star = aggregation.getStar();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BitKey bitKey = aggregation.getConstrainedColumnsBitKey();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// The first time this function is called, only the bitKey is set,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the columns are not filled up yet.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RolapStar.Column[] columns = aggregation.getColumns();<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (columns != null) {<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Check database...<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
&nbsp;&nbsp;&nbsp;&nbsp;}<br/>
}<br/>
</code>
</blockquote>

<!--
#############################################
##  6.9 Dynamic datasource XMLA servlet #####
############################################# -->
<h1>6.9 Dynamic datasource XMLA servlet<a name="Dynamic_datasource_xmla_servlet">&nbsp;</a></h1>

<p>The <code>DynamicDatasourceXmlaServlet</code> extends <code>DefaultXmlaServlet</code>, adding the ability to dynamically load 
the <code>datasources.xml</code> file. For every client request that it receives, it checks
for updates to the content of <code>datasources.xml</code>. It selectively 
clears cache for catalogs that have changed or no longer exist in <code>datasources.xml</code>. 
The servlet considers a
catalog as changed when either of its properties (DataSourceInfo, definition
properties on <a href="api/mondrian/xmla/DataSourcesConfig.Catalog.html">
DataSourcesConfig.Catalog</a>) are different. It identifies catalog by name.</p>

<p>This servlet complements the dynamic catalog loading capability based on
<a href="configuration.html#Connect_string_properties">UseContentChecksum</a>.
It does not check the catalog content for updates. There is no overlap in the
functionality. Both together will give full dynamic datasource and
catalog configuration capability.</p>

<p>To use DynamicDatasourceXmlaServlet, change definition of the <code>MondrianXmlaServlet</code> 
servlet in <code>web.xml</code>:</p>

<blockquote>
  <code>
    &lt;servlet&gt;<br/>
    &nbsp;&nbsp;&nbsp;&lt;servlet-name&gt;MondrianXmlaServlet&lt;/servlet-name&gt;<br/>
    &nbsp;&nbsp;&nbsp;&lt;servlet-class&gt;mondrian.xmla.impl.<b>DynamicDatasourceXmlaServlet</b>&lt;/servlet-class&gt;<br/>
    &nbsp;&nbsp;&nbsp; ...<br/>
    &lt;/servlet&gt;</code></blockquote>

<p>This implementation has a limitation. It requires catalog name to be unique
across all datasources and may not work correctly otherwise.</p>

<!--
#################################
##  7. Internationalization #####
################################# -->
<h3>7. Internationalization<a name="I18n">&nbsp;</a></h3>

<p>An internationalized Mondrian application would have a schema for each language, where the
caption of each object appears in the local language. For example, the <code>[Product]</code>
dimension would have the caption "Product" in English and "Produit" in French.</p>

<p>It is unwise to translate the actual names of the schema objects, because then the MDX
statements would need to be changed also. All that you need to change is the caption. Every
schema object (schema, cube, virtual cube, dimension, hierarchy, level, measure, 
named set) has a caption attribute, and user
interfaces such as JPivot and Pentaho Analyzer display the caption rather than the real name. Additionally:</p>

<ul>
  <li>Every schema object has a description attribute.</li>
    <li>A hierarchy can have an <code>allMemberCaption</code> attribute
as display value of the "All" member. </li>
  <li>For the schema we can set a display value of the "measures"
dimension by the <code>measuresCaption</code> attribute. </li>
    <li>A calculated member has properties CAPTION and DESCRIPTION that appear 
    as caption and description if the member is a measure (that is, a member of 
    the <code>Measures</code> dimension).</li>
</ul>

<p>One way to create an internationalized application is to create a
copy of the schema file for each language, but these are difficult to
maintain. A better way is to use the <a
 href="api/mondrian/i18n/LocalizingDynamicSchemaProcessor.html">
LocalizingDynamicSchemaProcessor</a> class to perform dynamic
substitution on a single schema file.</p>
<!--
#########################################
##  7.1 Localizing schema processor #####
######################################### -->
<h1>7.1 Localizing schema processor</h1>

<p>First, write your schema using variables as values for <code>caption</code>,
<code>description</code>,
<code>allMemberCaption</code> and <code>measuresCaption</code> attributes as follows:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Schema">Schema</a> ... measuresCaption="%{foodmart.measures.caption}"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Dimension">Dimension</a> name="Store" caption="%{foodmart.dimension.store.caption}" 
                description=&quot;%{foodmart.dimension.store.description}&quot;&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_Hierarchy">Hierarchy</a> hasAll="true" allMemberName="All Stores" allMemberCaption="%{foodmart.dimension.store.allmember.caption =All Stores}" primaryKey="store_id"&nbsp; 
                    caption=&quot;%{foodmart.hierarchy.store.country.caption}&quot; 
                    description=&quot;%{foodmart.hierararchy.store.country.description}&gt;</div>
                    <div style="padding-left:80px">&lt;<a href="#XML_Table">Table</a> name="store"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Level">Level</a> name="Store Country" column="store_country" uniqueMembers="true" caption="%{foodmart.dimension.store.country.caption}" 
                        description=&quot;%{foodmart.dimension.store.country.description}&quot;/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Level">Level</a> name="Store State" column="store_state" uniqueMembers="true" caption="%{foodmart.dimension.store.state.caption}" 
                        description=&quot;%{foodmart.dimension.store.state.description}&quot;/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Level">Level</a> name="Store City" column="store_city" uniqueMembers="false" caption="%{foodmart.dimension.store.city.caption}" 
                        description=&quot;%{foodmart.dimension.store.city.description}&quot;/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_Level">Level</a> name="Store Name" column="store_name" uniqueMembers="true" caption="%{foodmart.dimension.store.name.caption}" 
                        description=&quot;%{foodmart.dimension.store.name.description}&quot;&gt;</div>
                        <div style="padding-left:100px">&lt;<a href="#XML_Property">Property</a> name="Store Type" column="store_type" caption="%{foodmart.dimension.store. name.property_type.caption}" 
                            description=&quot;%{foodmart.dimension.store. name.property_type.description}&quot;/&gt;</div>
                        <div style="padding-left:100px">&lt;<a href="#XML_Property">Property</a> name="Store Manager" column="store_manager" caption="%{foodmart.dimension.store. name.property_manager.caption}" 
                            description=&quot;%{foodmart.dimension.store. name.property_manager.description}&quot;/&gt;</div>
                        <div style="padding-left:100px">&lt;<a href="#XML_Property">Property</a> name="Store Sqft" column="store_sqft" type="Numeric" caption="%{foodmart.dimension.store. name.property_storesqft.caption}" 
                            description=&quot;%{foodmart.dimension.store. 
                            name.property_storesqft.description}&quot;/&gt;</div>
                        <div style="padding-left:100px">&lt;<a href="#XML_Property">Property</a> name="Grocery Sqft" column="grocery_sqft" type="Numeric"/&gt;</div>
                        <div style="padding-left:100px">&lt;<a href="#XML_Property">Property</a> name="Frozen Sqft" column="frozen_sqft" type="Numeric"/&gt;</div>
                        <div style="padding-left:100px">&lt;<a href="#XML_Property">Property</a> name="Meat Sqft" column="meat_sqft" type="Numeric"/&gt;</div>
                        <div style="padding-left:100px">&lt;<a href="#XML_Property">Property</a> name="Has coffee bar" column="coffee_bar" type="Boolean"/&gt;</div>
                        <div style="padding-left:100px">&lt;<a href="#XML_Property">Property</a> name="Street address" column="store_street_address" type="String"/&gt;</div>
                    <div style="padding-left:80px;">&lt;/<a href="#XML_Level">Level</a>&gt;</div>
                <div style="padding-left:60px">&lt;/<a href="#XML_Hierarchy">Hierarchy</a>&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_Dimension">Dimension</a>&gt;</div>
<br/>
            <div style="padding-left:40px;">&lt;<a href="#XML_Cube">Cube</a> name="Sales" caption="%{foodmart.cube.sales.caption}" 
                description=&quot;%{foodmart.cube.sales.description}&quot;&gt;</div>
                <div style="padding-left:60px;">...</div>
                <div style="padding-left:60px">&lt;<a href="#XML_DimensionUsage">DimensionUsage</a> name="Store" source="Store" foreignKey="store_id"&nbsp; 
                    caption=&quot;%{foodmart.cube.sales.name.caption}&quot; 
                    description=&quot;%{foodmart.cube.sales.name.description}&quot;/&gt;</div>
                <div style="padding-left:60px;">...</div>
                <div style="padding-left:60px">&lt;<a href="#XML_Measure">Measure</a> name="Unit Sales" column="unit_sales" caption="%{foodmart.cube.sales.measure.unitsales.caption}" 
                    description=&quot;%{foodmart.cube.sales.measure.unitsales.description}&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_Cube">Cube</a>&gt;</div>
        <div style="padding-left:10px;">&lt;/<a href="#XML_Schema">Schema</a>&gt;</div>
    </code>
</blockquote>

<p>As usual, the default caption for any cube, measure, dimension or
level without a <code>caption</code> attribute is the name of the
element. A hierarchy's default caption is the caption of its dimension;
for example, the <code>[Store]</code> hierarchy has no <code>caption</code>
defined, so it inherits the <code>caption</code> attribute from its
parent, the <code>
[Store]</code> dimension.</p>
<p>Next, add the dynamic schema processor and locale to your connect
string. For example,</p>

<blockquote>
  <code>Provider=mondrian; <i><b>Locale=en_US;
DynamicSchemaProcessor=&shy;mondrian.i18n.LocalizingDynamicSchemaProcessor;</b>
  </i>Jdbc=&shy;jdbc:mysql://localhost/foodmart;
  JdbcUser=&shy;foodmart;
  JdbcPassword=&shy;foodmart;
  Catalog=&shy;/WEB-INF/FoodMart.mondrian.xml</code>
</blockquote>

<p>Now, for each locale you wish to support, provide a resource file
named <code>
locale_<i>{locale}</i>.properties</code>. For example,</p>

<blockquote>
  <code># locale.properties: Default resources<br/>
foodmart.measures.caption=Measures<br/>
foodmart.dimension.store.country.caption=Store Country<br/>

foodmart.dimension.store.name.property_type.column= store_type<br/>
foodmart.dimension.store.country.member.caption= store_country<br/>
foodmart.dimension.store.name.property_type.caption =Store Type<br/>
foodmart.dimension.store.name.caption =Store Name<br/>
foodmart.dimension.store.state.caption =Store State<br/>
foodmart.dimension.store.name.property_manager.caption =Store Manager<br/>
foodmart.dimension.store.name.property_storesqft.caption =Store Sq. Ft.<br/>
foodmart.dimension.store.allmember.caption =All Stores<br/>
foodmart.dimension.store.caption =Store<br/>

foodmart.cube.sales.caption =Sales<br/>
foodmart.dimension.store.city.caption =Store City<br/>
foodmart.cube.sales.measure.unitsales =Unit Sales</code>
</blockquote>

<p>and</p>

<blockquote>
  <code># locale_hu.properties: Resources for the 'hu' locale.<br/>
foodmart.measures.caption=Hungarian Measures<br/>
foodmart.dimension.store.country.caption=Orsz\u00E1g<br/>

foodmart.dimension.store.name.property_manager.caption =\u00C1ruh\u00E1z
vezet\u0151<br/>
foodmart.dimension.store.country.member.caption =store_country_caption_hu<br/>
foodmart.dimension.store.name.property_type.caption =Tipusa<br/>
foodmart.dimension.store.name.caption =Megnevez\u00E9s<br/>
foodmart.dimension.store.state.caption =\u00C1llam/Megye<br/>
foodmart.dimension.store.name.property_type.column =store_type_caption_hu<br/>
foodmart.dimension.store.name.property_storesqft.caption =M\u00E9ret
n.l\u00E1b<br/>
foodmart.dimension.store.allmember.caption =Minden \u00C1ruh\u00E1z<br/>
foodmart.dimension.store.caption =\u00C1ruh\u00E1z<br/>

foodmart.cube.sales.caption =Forgalom<br/>
foodmart.dimension.store.city.caption =V\u00E1ros<br/>
foodmart.cube.sales.measure.unitsales =Eladott db</code>
</blockquote>
<!--
#############################
##  8. Aggregate tables #####
############################# -->
<h3>8. Aggregate tables<a name="Aggregate_tables">&nbsp;</a></h3>

<p>Aggregate tables are a way to improve Mondrian's performance when
the fact table contains a huge number of rows: a million or more. An
aggregate table is essentially a pre-computed summary of the data in
the fact table.</p>

<p>Let's look at a simple aggregate table.</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Cube">Cube</a> name="Sales"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Table">Table</a> name="sales_fact_1997"&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_AggName">AggName</a> name="agg_c_special_sales_fact_1997"&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggFactCount">AggFactCount</a> column="FACT_COUNT"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggMeasure">AggMeasure</a> name="[Measures].[Store Cost]" column="STORE_COST_SUM"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggMeasure">AggMeasure</a> name="[Measures].[Store Sales]" column="STORE_SALES_SUM"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggLevel">AggLevel</a> name="[Product].[Product Family]" column="PRODUCT_FAMILY"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggLevel">AggLevel</a> name="[Time].[Quarter]" column="TIME_QUARTER"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggLevel">AggLevel</a> name="[Time].[Year]" column="TIME_YEAR"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggLevel">AggLevel</a> name="[Time].[Quarter]" column="TIME_QUARTER"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggLevel">AggLevel</a> name="[Time].[Month]" column="TIME_MONTH"/&gt;</div>
                <div style="padding-left:60px">&lt;/<a href="#XML_AggName">AggName</a>&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_Table">Table</a>&gt;</div>
    <br/>
            <div style="padding-left:40px;">&lt;!-- Rest of the cube definition --&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Cube">Cube</a>&gt;</div>
    </code>
</blockquote>

<p>The <code>&lt;<a href="#XML_AggForeignKey">AggForeignKey</a>&gt;</code>
element, not shown here, allows you to reference a dimension table
directly, without including its columns in the aggregate table. It is
described in the

<a href="aggregate_tables.html#Another_aggregate_table">aggregate
tables guide</a>.</p>

<p>In practice, a cube which is based upon a very large fact table may
have several aggregate tables. It is inconvenient to declare each
aggregate table explicitly in the schema XML file, and luckily there is
a better way. In the following example, Mondrian locates aggregate
tables by pattern-matching.</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Cube">Cube</a> name="Sales"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Table">Table</a> name="sales_fact_1997"&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_AggPattern">AggPattern</a> pattern="agg_.*_sales_fact_1997"&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggFactCount">AggFactCount</a> column="FACT_COUNT"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggMeasure">AggMeasure</a> name="[Measures].[Store Cost]" column="STORE_COST_SUM"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggMeasure">AggMeasure</a> name="[Measures].[Store Sales]" column="STORE_SALES_SUM"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggLevel">AggLevel</a> name="[Product].[Product Family]" column="PRODUCT_FAMILY"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggLevel">AggLevel</a> name="[Time].[Quarter]" column="TIME_QUARTER"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggLevel">AggLevel</a> name="[Time].[Year]" column="TIME_YEAR"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggLevel">AggLevel</a> name="[Time].[Quarter]" column="TIME_QUARTER"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggLevel">AggLevel</a> name="[Time].[Month]" column="TIME_MONTH"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggExclude">AggExclude</a> name="agg_c_14_sales_fact_1997"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_AggExclude">AggExclude</a> name="agg_lc_100_sales_fact_1997"/&gt;</div>
                <div style="padding-left:60px">&lt;/<a href="#XML_AggPattern">AggPattern</a>&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_Table">Table</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Cube">Cube</a>&gt;</div>
    </code>
</blockquote>

<p>It tells Mondrian to treat all tables which match the pattern <code>"agg_.*_sales_fact_1997"</code>
as aggregate tables, except <code>"agg_c_14_sales_fact_1997"</code>
and <code>
"agg_lc_100_sales_fact_1997"</code>. Mondrian uses rules to deduce the
roles of the columns in those tables, so it's important to adhere to
strict naming conventions. The naming conventions are described in the
<a href="aggregate_tables.html#Recognizing_aggregates">aggregate tables
guide</a>.</p>
<p>The performance guide has advice on <a
 href="performance.html#Choosing_aggregate_tables">choosing
aggregate tables</a>.</p>
<!--
###########################
##  9. Access-control #####
########################### -->
<h3>9. Access-control<a name="Access_control">&nbsp;</a></h3>

<p>OK, so now you've got all this great data, but you don't everyone to
be able to read all
of it. To solve this, you can define an access-control profile, called
a <dfn>Role</dfn>, as part of the
schema, and set this role when establishing a connection.</p>
<!--
#############################
##  9.1 Defining a role #####
############################# -->
<h1>9.1 Defining a role<a name="Defining_roles">&nbsp;</a></h1>

<p>Roles are defined by <code><a href="#XML_Role">&lt;Role&gt;</a></code>
elements,
which occur as direct children of the <code><a href="#XML_Schema">&lt;Schema&gt;</a></code>
element, after the last <code><a href="#XML_Cube">&lt;Cube&gt;</a></code>.
Here is an example of a role:</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Role">Role</a> name="California manager"&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_SchemaGrant">SchemaGrant</a> access="none"&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_CubeGrant">CubeGrant</a> cube="Sales" access="all"&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_DimensionGrant">DimensionGrant</a> hierarchy="[Measures]" access="all"/&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_HierarchyGrant">HierarchyGrant</a> hierarchy="[Store]" access="custom" topLevel="[Store].[Store Country]"&gt;</div>
                        <div style="padding-left:100px;">&lt;<a href="#XML_MemberGrant">MemberGrant</a> member="[Store].[USA].[CA]" access="all"/&gt;</div>
                        <div style="padding-left:100px;">&lt;<a href="#XML_MemberGrant">MemberGrant</a> member="[Store].[USA].[CA].[Los Angeles]" access="none"/&gt;</div>
                    <div style="padding-left:80px;">&lt;/<a href="#XML_HierarchyGrant">HierarchyGrant</a>&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_HierarchyGrant">HierarchyGrant</a> hierarchy="[Customers]" access="custom" topLevel="[Customers].[State Province]" bottomLevel="[Customers].[City]"&gt;</div>
                        <div style="padding-left:100px">&lt;<a href="#XML_MemberGrant">MemberGrant</a> member="[Customers].[USA].[CA]" access="all"/&gt;</div>
                        <div style="padding-left:100px">&lt;<a href="#XML_MemberGrant">MemberGrant</a> member="[Customers].[USA].[CA].[Los Angeles]" access="none"/&gt;</div>
                    <div style="padding-left:80px;">&lt;/<a href="#XML_HierarchyGrant">HierarchyGrant</a>&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_HierarchyGrant">HierarchyGrant</a> hierarchy="[Gender]" access="none"/&gt;</div>
                <div style="padding-left:60px">&lt;/<a href="#XML_CubeGrant">CubeGrant</a>&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_SchemaGrant">SchemaGrant</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Role">Role</a>&gt;</div>
    </code>
</blockquote>

<p>A <code><a href="#XML_SchemaGrant">&lt;SchemaGrant&gt;</a></code>

defines the default access for
objects in a schema. The <code>access</code> attribute can be "all" or
"none";
this access can be overridden for specific objects. In this case,
because
<code>access="none"</code>, a user would only be able to browse the
"Sales" cube,
because it is explicitly granted.</p>

<p>A <code><a href="#XML_CubeGrant">&lt;CubeGrant&gt;</a></code>
defines the access to
a particular cube. As for <code><a href="#XML_SchemaGrant">&lt;SchemaGrant&gt;</a></code>,
the access attribute can be "all", "custom" or "none", and can
be overridden for specific sub-objects in the cube.</p>

<p>A <code><a href="#XML_DimensionGrant">&lt;DimensionGrant&gt;</a></code>
defines access to a dimension. The access attribute can be "all", "custrom"
or "none". An access level of "all" means that all the child hierarchies
of the dimension will get inherited access. An access level of "custom" means
that the role does not get an inherent access to the child hierarchies,
unless the role is explicitely granted using a
<a href="#XML_HierarchyGrant">&lt;HierarchyGrant&gt;</a> element.</p>

<p>A <code><a href="#XML_HierarchyGrant">&lt;HierarchyGrant&gt;</a></code>

defines
access to a hierarchy. The access attribute can be "all", meaning all
members
are visible; "none", meaning the hierarchy's very existence is hidden
from the
user; and "custom". With custom access, you can use the <code>topLevel</code>
attribute to define the top level which is visible (preventing users
from seeing
too much of the 'big picture', such as viewing revenues rolled up to
the <code>
Store Country</code> level); or use the <code>bottomLevel</code>
attribute to
define the bottom level which is visible (here, preventing users from
invading
looking at individual customers' details); or control which sets of
members the
user can see, by defining nested <code><a href="#XML_MemberGrant">&lt;MemberGrant&gt;</a></code>
elements.</p>

<p>You can only define a <code><a href="#XML_MemberGrant">&lt;MemberGrant&gt;</a></code>

element if its enclosing <code><a href="#XML_HierarchyGrant">&lt;HierarchyGrant&gt;</a></code>
has <code>access="custom"</code>. Member grants give (or remove)
access to a
given member, and all of its children. Here are the rules:</p>

<ol>
  <li><b>Members inherit access from their parents</b>. If you deny
access to California, you won't be able to see San Francisco.</li>
  <li><b>Grants are order-dependent</b>. If you grant access to USA,
then deny access to Oregon, then you won't be able to see Oregon, or
Portland. But if you were to deny access to Oregon, then grant access
to USA, you can effectively see everything.</li>
  <li><b>A member is visible if any of its children are visible</b>.
Suppose you deny access to USA, then grant access to California. You
will be able to see USA, and California, but none of the other states.
The totals against USA will still reflect all states, however.
If the parent HierarchyGrant specifies a top level, only the parents
equal or below this level will be visible. Similarly, if a bottom level
is specified, only the children above or equal to the level are visible.</li>

<li><b>Member grants don't override the hierarchy grant's top- and
bottom-levels</b>. If you set <code>topLevel="[Store].[Store State]"</code>,
and grant access to California, you won't be able to see USA.
Member grants do not override the topLevel and bottomLevel attributes.
You can grant or deny access to a member of any level, but the top
and bottom constraints have precedence on the explicit member grants.</li>
</ol>

<p>In the example, the user will have access to California, and all of
the
cities in California except Los Angeles. They will be able to see USA
(because
its child, California, is visible), but no other nations, and not All
Stores
(because it is above the top level, <code>Store Country</code>).</p>

<!--
###########################
##  9.2 Rollup policy #####
########################### -->
<h1>9.2 Rollup policy<a name="Rollup_policy">&nbsp;</a></h1>

<p>A <dfn>rollup policy</dfn> determines how mondrian computes a member's total 
if the current role cannot see all of that member's children. Under the default 
rollup policy, called 'full', the total for that member includes contributions 
from the children that are not visible. For example, suppose that Fred belongs to a role 
that can see <code>[USA].[CA]</code> and <code>[USA].[OR]</code> but not <code>[USA].[WA]</code>. 
If Fred runs the query</p>

<blockquote><code>SELECT {[Measures].[Unit Sales]} ON COLUMNS,<br/>
&nbsp;&nbsp;&nbsp; {[[Store].[USA], Store].[USA].Children} ON ROWS<br/>
    FROM [Sales]</code></blockquote>

<p>the query returns</p>

<blockquote>
    <table class="grayTable" id="table8"  >
        <tr>
            <td align="left"><code>[Customer]</code></td>
            <td><code>[Measures].[Unit Sales]</code></td>
        </tr>
        <tr>
            <td align="left"><code>[USA]</code></td>
            <td align="right">266,773</td>
        </tr>
        <tr>
            <td align="left"><code>[USA].[CA]</code></td>
            <td align="right">74,748</td>
        </tr>
        <tr>
            <td align="left"><code>[USA].[OR]</code></td>
            <td align="right">67,659</td>
        </tr>
    </table>
</blockquote>

<p>Note that <code>[USA].[WA]</code> is not returned, per the access-control
policy, but the total includes the total from Washington (124,366) that
Fred cannot see. For some applications, this is not appropriate.
In particular, if the dimension has a small number of members,
the end-user may be able to deduce the values of the members
which they do not have access to.</p>

<p>To remedy this, a role can apply a different rollup policy to a hierarchy.
The policy describes how a total is calculated for a particular member if
the current role can only see some of that 
member's children:</p>

<ul>
<li><b>Full</b>. The total for that member includes all children. This is the 
default policy if you don't specify the <code>rollupPolicy</code> attribute.</li>
<li><b>Partial</b>. The total for that member includes only accessible children.</li>
<li><b>Hidden</b>. If any of the children are inaccessible, the total is hidden.</li>
</ul>

<p>Under the 'partial' policy, the <code>[USA]</code> total is the sum of the 
accessible children <code>[CA]</code> 
and <code>[OR]</code>:</p>

<blockquote>
    <table class="grayTable" id="table9"  >
        <tr>
            <td align="left"><code>[Customer]</code></td>
            <td><code>[Measures].[Unit Sales]</code></td>
        </tr>
        <tr>
            <td align="left"><code>[USA]</code></td>
            <td align="right">142,407</td>
        </tr>
        <tr>
            <td align="left"><code>[USA].[CA]</code></td>
            <td align="right">74,748</td>
        </tr>
        <tr>
            <td align="left"><code>[USA].[OR]</code></td>
            <td align="right">67,659</td>
        </tr>
        </table>
</blockquote>

<p>Under 'hidden' policy, the [USA] total is hidden because one of its children 
is not accessible:</p>

<blockquote>
    <table class="grayTable" id="table10">
        <tr>
            <td align="left"><code>[Customer]</code></td>
            <td><code>[Measures].[Unit Sales]</code></td>
        </tr>
        <tr>
            <td align="left"><code>[USA]</code></td>
            <td align="right">-</td>
        </tr>
        <tr>
            <td align="left"><code>[USA].[CA]</code></td>
            <td align="right">74,748</td>
        </tr>
        <tr>
            <td align="left"><code>[USA].[OR]</code></td>
            <td align="right">67,659</td>
        </tr>
        </table>
</blockquote>

<p>The policy is specified per role and hierarchy. In the following example, the role sees partial totals for the 
<code>[Store]</code> hierarchy but full totals for <code>[Product]</code>.</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Role">Role</a> name=&quot;South Pacific manager&quot;&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_SchemaGrant">SchemaGrant</a> access=&quot;none&quot;&gt;</div>
                <div style="padding-left:60px;">&lt;<a href="#XML_CubeGrant">CubeGrant</a> cube=&quot;Sales&quot; access=&quot;all&quot;&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_HierarchyGrant">HierarchyGrant</a> hierarchy=&quot;[Store]&quot; access=&quot;custom&quot; <i><b>rollupPolicy=&quot;partial&quot; </b></i>topLevel=&quot;[Store].[Store Country]&quot;&gt;</div>
                        <div style="padding-left:100px;">&lt;<a href="#XML_MemberGrant">MemberGrant</a> member=&quot;[Store].[USA].[CA]&quot; access=&quot;all&quot;/&gt;</div>
                        <div style="padding-left:100px;">&lt;<a href="#XML_MemberGrant">MemberGrant</a> member=&quot;[Store].[USA].[CA].[Los Angeles]&quot; access=&quot;none&quot;/&gt;</div>
                    <div style="padding-left:80px;">&lt;/<a href="#XML_HierarchyGrant">HierarchyGrant</a>&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_HierarchyGrant">HierarchyGrant</a> hierarchy=&quot;[Customers]&quot; access=&quot;custom&quot; <i><b>rollupPolicy=&quot;full&quot;</b></i> topLevel=&quot;[Customers].[State Province]&quot; bottomLevel=&quot;[Customers].[City]&quot;&gt;</div>
                        <div style="padding-left:100px;">&lt;MemberGrant member=&quot;[Customers].[USA].[CA]&quot; access=&quot;all&quot;/&gt;</div>
                        <div style="padding-left:100px;">&lt;MemberGrant member=&quot;[Customers].[USA].[CA].[Los Angeles]&quot; access=&quot;none&quot;/&gt;</div>
                    <div style="padding-left:80px;">&lt;/<a href="#XML_HierarchyGrant">HierarchyGrant</a>&gt;</div>
                    <div style="padding-left:80px;">&lt;<a href="#XML_HierarchyGrant">HierarchyGrant</a> hierarchy=&quot;[Gender]&quot; access=&quot;none&quot;/&gt;</div>
                <div style="padding-left:60px;">&lt;/<a href="#XML_CubeGrant">CubeGrant</a>&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_SchemaGrant">SchemaGrant</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Role">Role</a>&gt;</div>
    </code>
</blockquote>

<p>This example also shows existing features, such as how hierarchy grants can be restricted using 
<code>topLevel</code> and/or <code>bottomLevel</code> attributes, and how a role 
can be prevented from seeing a hierarchy using access=&quot;none&quot;.</p>

<!--
#########################
##  9.3 Union roles #####
######################### -->
<h1>9.3 Union roles<a name="Union_roles">&nbsp;</a></h1>
<p>A union role combines several roles, and has the sum of their privileges.</p>
<p>A union role can see a particular schema object if one or more of its
constituent roles can see it. Similarly, the rollup policy of a union role with
respect to a particular hierarchy is the least restrictive of all of the roles'
rollup policies.</p>

<p>Here is an example showing the syntax of a union role.</p>

<blockquote style="text-indent: -20px">
    <code>
        <div style="padding-left:20px;">&lt;<a href="#XML_Role">Role</a> name=&quot;Coastal manager&quot;&gt;</div>
            <div style="padding-left:40px;">&lt;<a href="#XML_Union">Union</a>&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_RoleUsage">RoleUsage</a> roleName=&quot;California manager&quot;/&gt;</div>
                <div style="padding-left:60px">&lt;<a href="#XML_RoleUsage">RoleUsage</a> roleName=&quot;Eastern sales manager&quot;/&gt;</div>
            <div style="padding-left:40px;">&lt;/<a href="#XML_Union">Union</a>&gt;</div>
        <div style="padding-left:20px;">&lt;/<a href="#XML_Role">Role</a>&gt;</div>
    </code>
</blockquote>

<p>The constituent roles &quot;California manager&quot; and &quot;Eastern sales manager&quot; may be
regular roles, user-defined roles or union roles, but they must be declared
earlier in the schema file. The &quot;Coastal manager&quot; role will be able to see any
member that or a &quot;California manager&quot; and &quot;Eastern sales manager&quot;. It will be
able to see all the cells at the intersection of these members, plus it will be
able to see cells that neither role can see: for example, if only &quot;California
manager&quot; can see <code>[USA].[CA].[Fresno]</code>, and only &quot;Eastern sales
manager&quot; see the <code>[Sales Target]</code> measure, then &quot;Coastal manager&quot;
will be able to see the sales target for Fresno, which neither of the
constituent roles have access to.</p>
<h1>9.4 Setting a connection's role<a name="Setting_a_connections_role">&nbsp;</a></h1>

<p>A role only has effect when it is associated with a connection. By
default,
connections have a role which gives them access to every
cube in that connection's schema.</p>

<p>Most databases associate roles (or 'groups') with users, and
automatically
assign them when users log in. However, Mondrian doesn't have the
notion of
users, so you have to establish the role in a different way. There are
two ways
of doing this:</p>

<ol>
  <li><b>In the connect string</b>. If you specify the <code>Role</code>
keyword in the connect string, the connection will adopt that role. You can
    specify multiple role names separated by commas, and a union role will be
    created; if a role name contains a comma, escape it with an extra comma. See
    <a href="api/mondrian/olap/DriverManager.html"> class DriverManager</a>
for examples of connect string syntax.</li>
  <li><b>Programmatically</b>. Once your application has established a
connection, call the method <a
 href="api/mondrian/olap/Connection.html#setRole%28mondrian.olap.Role%29">
Connection.setRole(Role)</a>. You can create a Role programmatically
(see <a href="api/mondrian/olap/Role.html">interface Role</a> and
the <a href="developer_notes.html">developer's note link</a> for more
details), or look one up using the method <a
 href="api/mondrian/olap/Schema.html#lookupRole%28java.lang.String%29">

Schema.lookupRole(String)</a>.</li>
</ol>
<!--
######################################
##  10. Appendix A: XML elements #####
###################################### -->
<h3>10. Appendix A: XML elements<a name="Appendix_A_XML_elements">&nbsp;</a></h3>

<table id="AutoNumber2"   class="grayTable" width="500">
    <tr>
        <td><b>Element</b></td>
        <td><b>Description</b></td>
    </tr>
    <tr>
        <td colspan="2"><i><br/>Schema</i></td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Schema" href="xml_schema.html#Schema">Schema</a>&gt;</code></td>
        <td>The top-level collection of elements relating to a particular
        enterprise. Cubes belong to a Schema, as do shared Dimensions, Named
        Sets, Roles, User-defined functions, and Parameters. (Dimensions and
        Named Sets may also be defined privately within a particular Cube.)</td>
    </tr>
    <tr>
        <td colspan="2"><i><br/>Physical elements</i></td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_PhysicalSchema" href="xml_schema.html#PhysicalSchema">PhysicalSchema</a>&gt;</code></td>
        <td>Collection of table usages, linked via relationships, upon which the logical schema is constructed.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Table" href="xml_schema.html#Table">Table</a>&gt;</code></td>
        <td>Defines a use of a table.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Query" href="xml_schema.html#Query">Query</a>&gt;</code></td>
        <td>Defines a 'table' using a SQL query, which can have different variants for different underlying databases.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_InlineTable" href="xml_schema.html#InlineTable">InlineTable</a>&gt;</code></td>
        <td>Defines a table using an inline dataset.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Link" href="xml_schema.html#Link">Link</a>&gt;</code></td>
        <td>Link between two tables.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_ColumnDefs" href="xml_schema.html#ColumnDefs">ColumnDefs</a>&gt;</code></td>
        <td>Holder for <code>&lt;ColumnDef&gt;</code> elements.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_ColumnDef" href="xml_schema.html#ColumnDef">ColumnDef</a>&gt;</code></td>
        <td>Definition of a column in an <code>&lt;InlineTable&gt;</code> dataset.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_ExpressionView" href="xml_schema.html#ExpressionView">ExpressionView</a>&gt;</code></td>

        <td>Collection of SQL expressions for a {@element CalculatedColumnDef}
          or {@element Query}, one for each supported dialect.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Column" href="xml_schema.html#Column">Column</a>&gt;</code></td>
        <td>Reference to a column in a SQL expression (inside a
          {@element SQL} element) or in a key structure ({@element Key},
          {@element ForeignKey}, {@element Name}, {@element Caption},
          {@element OrderBy}).</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_SQL" href="xml_schema.html#SQL">SQL</a>&gt;</code></td>
        <td>The SQL expression for a particular database dialect.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Rows" href="xml_schema.html#Rows">Rows</a>&gt;</code></td>
        <td>Holder for {@element Row} elements.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Row" href="xml_schema.html#Row">Row</a>&gt;</code></td>
        <td>Row in an {@element InlineTable} dataset.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Value" href="xml_schema.html#Value">Value</a>&gt;</code></td>
        <td>Value of a column in an {@element InlineTable} dataset.</td>
    </tr>
    <tr>
        <td colspan="2"><i><br/>Logical elements</i></td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Cube" href="xml_schema.html#Cube">Cube</a>&gt;</code></td>
        <td>The main business view for an analysis, a cube is a collection of dimensions and measures.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Dimensions" href="xml_schema.html#Dimensions">Dimensions</a>&gt;</code></td>
        <td>Collection of {@element Dimension} elements.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Dimension" href="xml_schema.html#Dimension">Dimension</a>&gt;</code></td>
        <td>A collection of {@element Attribute}s that may be used to subdivide a
        multidimensional data set, some of them organized into
        {@element Hierarchy} structures.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Attributes" href="xml_schema.html#Attributes">Attributes</a>&gt;</code></td>
        <td>Collection of {@element Attribute} elements.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Attribute" href="xml_schema.html#Attribute">Attribute</a>&gt;</code></td>
        <td>Data item in a {@element Dimension}.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Hierarchies" href="xml_schema.html#Hierarchies">Hierarchies</a>&gt;</code></td>
        <td>Collection of {@element Hierarchy} elements.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Hierarchy" href="xml_schema.html#Hierarchy">Hierarchy</a>&gt;</code></td>
        <td>Collection of {@element Attributes} organized into {@element Levels}.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Levels" href="xml_schema.html#Levels">Levels</a>&gt;</code></td>
        <td>Collection of {@element Level} elements.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Level" href="xml_schema.html#Level">Level</a>&gt;</code></td>
        <td>Level of a {@element Hierarchy}.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Key" href="xml_schema.html#Key">Key</a>&gt;</code></td>
        <td>Column or columns that are the key of an {@element Attribute}, in lieu of <code>Attribute.keyColumn</code>.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Name" href="xml_schema.html#Name">Name</a>&gt;</code></td>
        <td>Column that holds the name of an {@element Attribute}, in lieu of <code>Attribute.nameColumn</code>.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Caption" href="xml_schema.html#Caption">Caption</a>&gt;</code></td>
        <td>Column that holds the caption of an {@element Attribute}, in lieu of <code>Attribute.captionColumn</code>.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_OrderBy" href="xml_schema.html#OrderBy">OrderBy</a>&gt;</code></td>
        <td>Column or columns that used to sort members of an {@element Attribute}, in lieu of <code>Attribute.orderByColumn</code>.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Property"  href="xml_schema.html#Property">Property</a>&gt;</code></td>
        <td>Member property. The definition is against a hierarchy or level, but the property will be available to all members.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_MeasureGroups" href="xml_schema.html#MeasureGroups">MeasureGroups</a>&gt;</code></td>
        <td>Collection of {@element MeasureGroup} elements.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_MeasureGroup" href="xml_schema.html#MeasureGroup">MeasureGroup</a>&gt;</code></td>
        <td>Collection of {@element Measure}s that are stored in the same fact table.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Measures" href="xml_schema.html#Measures">Measures</a>&gt;</code></td>
        <td>Collection of {@element Measure} elements.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Measure" href="xml_schema.html#Measure">Measure</a>&gt;</code></td>
        <td>Measure.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_DimensionLinks" href="xml_schema.html#DimensionLinks">DimensionLinks</a>&gt;</code></td>
        <td>Collection of links between a {@element MeasureGroup} and the {@element Dimension}s of the {@element Cube}.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_ForeignKeyLink" href="xml_schema.html#ForeignKeyLink">ForeignKeyLink</a>&gt;</code></td>
        <td>Links a {@element Dimension} to a {@element MeasureGroup} using a foreign key
        from the fact table to the dimension table.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_FactLink" href="xml_schema.html#FactLink">FactLink</a>&gt;</code></td>
        <td>Declares that a Dimension is trivially linked to a
        MeasureGroup because its dimension table is the same as the
        fact table.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_CopyLink" href="xml_schema.html#CopyLink">CopyLink</a>&gt;</code></td>
        <td>Indicates dimension that is represented by key columns in the MeasureGroup's table.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_ReferenceLink" href="xml_schema.html#ReferenceLink">ReferenceLink</a>&gt;</code></td>
        <td>Links a Dimension to a MeasureGroup via another Dimension.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_NoLink" href="xml_schema.html#NoLink">NoLink</a>&gt;</code></td>
        <td>Documents that a {@element Dimension} is not linked to the current {@element MeasureGroup}.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_CalculatedMembers" href="xml_schema.html#CalculatedMembers">CalculatedMembers</a>&gt;</code></td>
        <td>Collection of {@element CalculatedMember} elements.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_CalculatedMember" href="xml_schema.html#CalculatedMember">CalculatedMember</a>&gt;</code></td>
        <td>A member whose value is derived using a formula, defined as part of a cube.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_NamedSets" href="xml_schema.html#NamedSets">NamedSets</a>&gt;</code></td>
        <td>Collection of {@element NamedSet} elements.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_NamedSet" href="xml_schema.html#NamedSet">NamedSet</a>&gt;</code></td>
        <td>A set whose value is derived using a formula, defined as part of a cube.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Closure" href="xml_schema.html#Closure">Closure</a>&gt;</code></td>
        <td>Maps a parent-child hierarchy onto a closure table.</td>
    </tr>
    <tr>
        <td colspan="2"><i><br/>Access control</i></td>
    </tr>
    <tr>
        <td><code>&lt;<a href="xml_schema.html#Role" name="XML_Role">Role</a>&gt;</code></td>
        <td>An access-control profile.</td>
    </tr>
    <tr>
        <td><code>&lt;<a href="xml_schema.html#SchemaGrant" name="XML_SchemaGrant">SchemaGrant</a>&gt;</code></td>
        <td>A set of rights to a schema.</td>
    </tr>
    <tr>
        <td><code>&lt;<a href="xml_schema.html#CubeGrant" name="XML_CubeGrant">CubeGrant</a>&gt;</code></td>
        <td>A set of rights to a cube.</td>
    </tr>
    <tr>
        <td><code>&lt;<a href="xml_schema.html#HierarchyGrant" name="XML_HierarchyGrant">HierarchyGrant</a>&gt;</code></td>
        <td>A set of rights to a {@element Hierarchy} and {@element Level}s within that Hierarchy.</td>
    </tr>
    <tr>
        <td><code>&lt;<a href="xml_schema.html#MemberGrant" name="XML_MemberGrant">MemberGrant</a>&gt;</code></td>
        <td>A set of rights to a {@element Member} and its children.</td>
    </tr>
    <tr>
        <td><code>&lt;<a href="xml_schema.html#Union" name="XML_Union">Union</a>&gt;</code></td>
        <td>Definition of a set of rights as the union of a set of {@element Role}s.</td>
    </tr>
    <tr>
        <td><code>&lt;<a href="xml_schema.html#RoleUsage" name="XML_RoleUsage">RoleUsage</a>&gt;</code></td>
        <td>A reference to a {@element Role}.</td>
    </tr>
    <tr>
        <td colspan="2"><i><br/>Extensions</i></td>
    </tr>
    <tr>
        <td><code>&lt;<a href="xml_schema.html#UserDefinedFunction" name="XML_UserDefinedFunction">UserDefinedFunction</a>&gt;</code></td>
        <td>Declares a user-defined function.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_CellFormatter" href="xml_schema.html#CellFormatter">CellFormatter</a>&gt;</code></td>
        <td>Cell formatter.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_MemberFormatter" href="xml_schema.html#MemberFormatter">MemberFormatter</a>&gt;</code></td>
        <td>Member formatter.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_PropertyFormatter" href="xml_schema.html#PropertyFormatter">PropertyFormatter</a>&gt;</code></td>
        <td>Property formatter.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Script" href="xml_schema.html#Script">Script</a>&gt;</code></td>
        <td>Script fragment to implement an SPI such as user-defined
            function, member formatter, or cell formatter.</td>
    </tr>
    <tr>
        <td colspan="2"><i><br/>Miscellaneous</i></td>
    </tr>
    <tr>
        <td><code>&lt;<a href="xml_schema.html#Annotations" name="XML_Annotations">Annotations</a>&gt;</code></td>
        <td>Holder for annotations.</td>
    </tr>
    <tr>
        <td><code>&lt;<a href="xml_schema.html#Annotation" name="XML_Annotation">Annotation</a>&gt;</code></td>
        <td>User-defined property attached to a metadata element.</td>
    </tr>
    <tr>
        <td><code>&lt;<a href="xml_schema.html#Parameter" name="XML_Parameter">Parameter</a>&gt;</code></td>
        <td>Part of the definition of a Hierarchy; passed to a MemberReader, if present.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_CalculatedMemberProperty" href="xml_schema.html#MemberProperty">CalculatedMemberProperty</a>&gt;</code></td>
        <td>Property of a calculated member.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_Formula" href="xml_schema.html#Formula">Formula</a>&gt;</code></td>
        <td>Holds the formula text within a <code>&lt;NamedSet&gt;</code> or <code>&lt;CalculatedMember&gt;</code>.</td>
    </tr>
    <tr>
        <td><code>&lt;<a name="XML_MeasureExpression" href="xml_schema.html#MeasureExpression">MeasureExpression</a>&gt;</code></td>
        <td>SQL expression used to compute a measure, in lieu of <code>Measure.column</code>.</td>
    </tr>
</table>
<br />
<br />

<p>Author: Julian Hyde; last modified October 2012.<br/>
    Copyright (C) 2001-2005 Julian Hyde.<br/>
    Copyright (C) 2005-2012 Pentaho and others
</p>

<br />

<!-- doc2web end -->

</body>
</html>
